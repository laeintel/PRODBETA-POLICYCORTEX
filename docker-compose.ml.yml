version: '3.8'

services:
  # ML Prediction Server
  ml-prediction-server:
    build:
      context: .
      dockerfile: Dockerfile.ml
    image: policycortex-ml:latest
    container_name: ml-prediction-server
    command: python3 -m ml_models.prediction_serving
    ports:
      - "8080:8080"  # API port
      - "9090:9090"  # Metrics port
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/policycortex
      - REDIS_URL=redis://redis:6379/0
      - CUDA_VISIBLE_DEVICES=0
      - ENABLE_GPU=true
      - TENSORRT_OPTIMIZATION=true
      - MODEL_CACHE_SIZE=10
      - INFERENCE_BATCH_SIZE=32
      - MAX_WAIT_MS=10
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
    volumes:
      - ml-models:/app/models
      - ml-checkpoints:/app/checkpoints
      - ml-logs:/app/logs
    depends_on:
      - postgres
      - redis
      - mlflow
    networks:
      - policycortex-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # WebSocket Server
  ml-websocket-server:
    build:
      context: .
      dockerfile: Dockerfile.ml
    image: policycortex-ml:latest
    container_name: ml-websocket-server
    command: python3 websocket_server.py
    ports:
      - "8765:8765"
    environment:
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/policycortex
    depends_on:
      - redis
      - postgres
    networks:
      - policycortex-network
    healthcheck:
      test: ["CMD", "python3", "-c", "import websockets; import asyncio; asyncio.run(websockets.connect('ws://localhost:8765').aclose())"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Model Training Service (Run on demand)
  ml-training:
    build:
      context: .
      dockerfile: Dockerfile.ml
    image: policycortex-ml:latest
    container_name: ml-training
    command: python3 -m ml_models.train_models
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/policycortex
      - REDIS_URL=redis://redis:6379/0
      - CUDA_VISIBLE_DEVICES=0,1  # Use multiple GPUs for training
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - AZURE_SUBSCRIPTION_ID=${AZURE_SUBSCRIPTION_ID}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
    volumes:
      - ml-models:/app/models
      - ml-checkpoints:/app/checkpoints
      - ml-data:/app/data
      - ml-logs:/app/logs
    depends_on:
      - postgres
      - redis
      - mlflow
    networks:
      - policycortex-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 2
              capabilities: [gpu]
    profiles:
      - training  # Only run when explicitly requested

  # MLflow Tracking Server
  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.5.0
    container_name: mlflow
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://postgres:postgres@postgres:5432/mlflow
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow/artifacts
    volumes:
      - mlflow-artifacts:/mlflow/artifacts
    command: >
      mlflow server
      --backend-store-uri postgresql://postgres:postgres@postgres:5432/mlflow
      --default-artifact-root /mlflow/artifacts
      --host 0.0.0.0
      --port 5000
    depends_on:
      - postgres
    networks:
      - policycortex-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=policycortex
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    networks:
      - policycortex-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - policycortex-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - policycortex-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SERVER_ROOT_URL=http://localhost:3001
    volumes:
      - grafana-data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - policycortex-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  ml-models:
    driver: local
  ml-checkpoints:
    driver: local
  ml-data:
    driver: local
  ml-logs:
    driver: local
  mlflow-artifacts:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  policycortex-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16