# Test script for navigation system APIs
# This script tests all the new endpoints added for the comprehensive navigation system

$API_BASE = "http://localhost:8080/api/v1"

Write-Host "Testing PolicyCortex Navigation System APIs" -ForegroundColor Cyan
Write-Host "===========================================" -ForegroundColor Cyan

# Dashboard APIs
Write-Host "`nüìä Testing Dashboard APIs..." -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "$API_BASE/dashboard/metrics" -Method Get
    if ($response.total_resources) { Write-Host "‚úÖ Dashboard metrics endpoint working" -ForegroundColor Green }
} catch { Write-Host "‚ùå Dashboard metrics endpoint failed" -ForegroundColor Red }

try {
    $response = Invoke-RestMethod -Uri "$API_BASE/dashboard/alerts" -Method Get
    if ($response[0].severity) { Write-Host "‚úÖ Dashboard alerts endpoint working" -ForegroundColor Green }
} catch { Write-Host "‚ùå Dashboard alerts endpoint failed" -ForegroundColor Red }

try {
    $response = Invoke-RestMethod -Uri "$API_BASE/dashboard/activities" -Method Get
    if ($response[0].activity_type) { Write-Host "‚úÖ Dashboard activities endpoint working" -ForegroundColor Green }
} catch { Write-Host "‚ùå Dashboard activities endpoint failed" -ForegroundColor Red }

# Governance APIs
Write-Host "`n‚öñÔ∏è Testing Governance APIs..." -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "$API_BASE/governance/compliance/status" -Method Get
    if ($response[0].framework) { Write-Host "‚úÖ Compliance status endpoint working" -ForegroundColor Green }
} catch { Write-Host "‚ùå Compliance status endpoint failed" -ForegroundColor Red }

try {
    $response = Invoke-RestMethod -Uri "$API_BASE/governance/compliance/violations" -Method Get
    if ($response[0].policy_name) { Write-Host "‚úÖ Compliance violations endpoint working" -ForegroundColor Green }
} catch { Write-Host "‚ùå Compliance violations endpoint failed" -ForegroundColor Red }

try {
    $response = Invoke-RestMethod -Uri "$API_BASE/governance/risk/assessment" -Method Get
    if ($response[0].risk_level) { Write-Host "‚úÖ Risk assessment endpoint working" -ForegroundColor Green }
} catch { Write-Host "‚ùå Risk assessment endpoint failed" -ForegroundColor Red }

try {
    $response = Invoke-RestMethod -Uri "$API_BASE/governance/cost/summary" -Method Get
    if ($response[0].service) { Write-Host "‚úÖ Cost summary endpoint working" -ForegroundColor Green }
} catch { Write-Host "‚ùå Cost summary endpoint failed" -ForegroundColor Red }

try {
    $response = Invoke-RestMethod -Uri "$API_BASE/governance/policies" -Method Get
    if ($response[0].name) { Write-Host "‚úÖ Governance policies endpoint working" -ForegroundColor Green }
} catch { Write-Host "‚ùå Governance policies endpoint failed" -ForegroundColor Red }

# Security APIs
Write-Host "`nüîí Testing Security APIs..." -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "$API_BASE/security/iam/users" -Method Get
    if ($response[0].display_name) { Write-Host "‚úÖ IAM users endpoint working" -ForegroundColor Green }
} catch { Write-Host "‚ùå IAM users endpoint failed" -ForegroundColor Red }

try {
    $response = Invoke-RestMethod -Uri "$API_BASE/security/rbac/roles" -Method Get
    if ($response[0].name) { Write-Host "‚úÖ RBAC roles endpoint working" -ForegroundColor Green }
} catch { Write-Host "‚ùå RBAC roles endpoint failed" -ForegroundColor Red }

try {
    $response = Invoke-RestMethod -Uri "$API_BASE/security/pim/requests" -Method Get
    if ($response[0].requestor) { Write-Host "‚úÖ PIM requests endpoint working" -ForegroundColor Green }
} catch { Write-Host "‚ùå PIM requests endpoint failed" -ForegroundColor Red }

try {
    $response = Invoke-RestMethod -Uri "$API_BASE/security/conditional-access/policies" -Method Get
    if ($response[0].name) { Write-Host "‚úÖ Conditional access endpoint working" -ForegroundColor Green }
} catch { Write-Host "‚ùå Conditional access endpoint failed" -ForegroundColor Red }

try {
    $response = Invoke-RestMethod -Uri "$API_BASE/security/zero-trust/status" -Method Get
    if ($response[0].pillar) { Write-Host "‚úÖ Zero trust status endpoint working" -ForegroundColor Green }
} catch { Write-Host "‚ùå Zero trust status endpoint failed" -ForegroundColor Red }

try {
    $response = Invoke-RestMethod -Uri "$API_BASE/security/entitlements" -Method Get
    if ($response[0].name) { Write-Host "‚úÖ Entitlements endpoint working" -ForegroundColor Green }
} catch { Write-Host "‚ùå Entitlements endpoint failed" -ForegroundColor Red }

try {
    $response = Invoke-RestMethod -Uri "$API_BASE/security/access-reviews" -Method Get
    if ($response[0].name) { Write-Host "‚úÖ Access reviews endpoint working" -ForegroundColor Green }
} catch { Write-Host "‚ùå Access reviews endpoint failed" -ForegroundColor Red }

# Operations APIs
Write-Host "`n‚öôÔ∏è Testing Operations APIs..." -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "$API_BASE/operations/resources" -Method Get
    if ($response[0].name) { Write-Host "‚úÖ Operations resources endpoint working" -ForegroundColor Green }
} catch { Write-Host "‚ùå Operations resources endpoint failed" -ForegroundColor Red }

try {
    $response = Invoke-RestMethod -Uri "$API_BASE/operations/monitoring/metrics" -Method Get
    if ($response[0].metric_name) { Write-Host "‚úÖ Monitoring metrics endpoint working" -ForegroundColor Green }
} catch { Write-Host "‚ùå Monitoring metrics endpoint failed" -ForegroundColor Red }

try {
    $response = Invoke-RestMethod -Uri "$API_BASE/operations/automation/workflows" -Method Get
    if ($response[0].name) { Write-Host "‚úÖ Automation workflows endpoint working" -ForegroundColor Green }
} catch { Write-Host "‚ùå Automation workflows endpoint failed" -ForegroundColor Red }

try {
    $response = Invoke-RestMethod -Uri "$API_BASE/operations/notifications" -Method Get
    if ($response[0].title) { Write-Host "‚úÖ Notifications endpoint working" -ForegroundColor Green }
} catch { Write-Host "‚ùå Notifications endpoint failed" -ForegroundColor Red }

try {
    $response = Invoke-RestMethod -Uri "$API_BASE/operations/alerts" -Method Get
    if ($response[0].name) { Write-Host "‚úÖ Operations alerts endpoint working" -ForegroundColor Green }
} catch { Write-Host "‚ùå Operations alerts endpoint failed" -ForegroundColor Red }

# DevOps APIs
Write-Host "`nüöÄ Testing DevOps APIs..." -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "$API_BASE/devops/pipelines" -Method Get
    if ($response[0].name) { Write-Host "‚úÖ Pipelines endpoint working" -ForegroundColor Green }
} catch { Write-Host "‚ùå Pipelines endpoint failed" -ForegroundColor Red }

try {
    $response = Invoke-RestMethod -Uri "$API_BASE/devops/releases" -Method Get
    if ($response[0].version) { Write-Host "‚úÖ Releases endpoint working" -ForegroundColor Green }
} catch { Write-Host "‚ùå Releases endpoint failed" -ForegroundColor Red }

try {
    $response = Invoke-RestMethod -Uri "$API_BASE/devops/artifacts" -Method Get
    if ($response[0].name) { Write-Host "‚úÖ Artifacts endpoint working" -ForegroundColor Green }
} catch { Write-Host "‚ùå Artifacts endpoint failed" -ForegroundColor Red }

try {
    $response = Invoke-RestMethod -Uri "$API_BASE/devops/deployments" -Method Get
    if ($response[0].application) { Write-Host "‚úÖ Deployments endpoint working" -ForegroundColor Green }
} catch { Write-Host "‚ùå Deployments endpoint failed" -ForegroundColor Red }

try {
    $response = Invoke-RestMethod -Uri "$API_BASE/devops/builds" -Method Get
    if ($response[0].number) { Write-Host "‚úÖ Builds endpoint working" -ForegroundColor Green }
} catch { Write-Host "‚ùå Builds endpoint failed" -ForegroundColor Red }

try {
    $response = Invoke-RestMethod -Uri "$API_BASE/devops/repos" -Method Get
    if ($response[0].name) { Write-Host "‚úÖ Repos endpoint working" -ForegroundColor Green }
} catch { Write-Host "‚ùå Repos endpoint failed" -ForegroundColor Red }

# AI APIs
Write-Host "`nü§ñ Testing AI APIs..." -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "$API_BASE/ai/predictive/compliance" -Method Get
    if ($response[0].violation_probability) { Write-Host "‚úÖ Predictive compliance endpoint working" -ForegroundColor Green }
} catch { Write-Host "‚ùå Predictive compliance endpoint failed" -ForegroundColor Red }

try {
    $response = Invoke-RestMethod -Uri "$API_BASE/ai/correlations" -Method Get
    if ($response[0].correlation_strength) { Write-Host "‚úÖ AI correlations endpoint working" -ForegroundColor Green }
} catch { Write-Host "‚ùå AI correlations endpoint failed" -ForegroundColor Red }

try {
    $body = @{ message = "test" } | ConvertTo-Json
    $response = Invoke-RestMethod -Uri "$API_BASE/ai/chat" -Method Post -Body $body -ContentType "application/json"
    if ($response.response) { Write-Host "‚úÖ AI chat endpoint working" -ForegroundColor Green }
} catch { Write-Host "‚ùå AI chat endpoint failed" -ForegroundColor Red }

try {
    $response = Invoke-RestMethod -Uri "$API_BASE/ai/unified/metrics" -Method Get
    if ($response[0].domain) { Write-Host "‚úÖ Unified metrics endpoint working" -ForegroundColor Green }
} catch { Write-Host "‚ùå Unified metrics endpoint failed" -ForegroundColor Red }

Write-Host "`n‚úÖ Navigation API endpoint testing complete!" -ForegroundColor Green