# PolicyCortex SLO Configuration
# Service Level Objectives with Error Budgets

slos:
  # Core API Service
  - service: policycortex-core
    objectives:
      - name: availability
        description: "Core API availability"
        target: 99.9  # Three 9s
        window: 30d   # Rolling 30-day window
        sli:
          type: ratio
          good_events: "sum(rate(http_requests_total{service='core-api',status!~'5..'}[5m]))"
          total_events: "sum(rate(http_requests_total{service='core-api'}[5m]))"
        error_budget:
          burn_rate_thresholds:
            - rate: 14.4  # 1 hour burn rate (consumes budget in 3 days)
              duration: 1h
              severity: page
            - rate: 6     # 6 hour burn rate (consumes budget in 1 week)
              duration: 6h
              severity: ticket
            - rate: 1     # 3 day burn rate (consumes budget in 30 days)
              duration: 3d
              severity: notification
              
      - name: latency_p95
        description: "95th percentile latency < 300ms"
        target: 95    # 95% of requests under 300ms
        window: 30d
        sli:
          type: threshold
          metric: "histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket{service='core-api'}[5m])) by (le))"
          threshold: 0.3  # 300ms
        error_budget:
          burn_rate_thresholds:
            - rate: 10
              duration: 1h
              severity: warning
            - rate: 5
              duration: 6h
              severity: ticket
              
      - name: error_rate
        description: "Error rate < 1%"
        target: 99    # Less than 1% errors
        window: 30d
        sli:
          type: ratio
          good_events: "sum(rate(http_requests_total{service='core-api',status!~'5..'}[5m]))"
          total_events: "sum(rate(http_requests_total{service='core-api'}[5m]))"

  # Frontend Service
  - service: policycortex-frontend
    objectives:
      - name: availability
        description: "Frontend availability"
        target: 99.95  # Four 9s
        window: 30d
        sli:
          type: ratio
          good_events: "sum(rate(http_requests_total{service='frontend',status!~'5..'}[5m]))"
          total_events: "sum(rate(http_requests_total{service='frontend'}[5m]))"
        error_budget:
          burn_rate_thresholds:
            - rate: 14.4
              duration: 1h
              severity: page
            - rate: 6
              duration: 6h
              severity: ticket
              
      - name: page_load_time
        description: "Page load time < 2s"
        target: 90    # 90% of pages load in under 2s
        window: 30d
        sli:
          type: threshold
          metric: "histogram_quantile(0.90, sum(rate(page_load_duration_seconds_bucket[5m])) by (le))"
          threshold: 2.0
          
      - name: javascript_errors
        description: "JavaScript error rate < 0.1%"
        target: 99.9
        window: 30d
        sli:
          type: ratio
          good_events: "sum(rate(frontend_requests_total{error='false'}[5m]))"
          total_events: "sum(rate(frontend_requests_total[5m]))"

  # AI Engine Service
  - service: policycortex-ai-engine
    objectives:
      - name: availability
        description: "AI Engine availability"
        target: 99.5   # Two and a half 9s
        window: 30d
        sli:
          type: ratio
          good_events: "sum(rate(http_requests_total{service='ai-engine',status!~'5..'}[5m]))"
          total_events: "sum(rate(http_requests_total{service='ai-engine'}[5m]))"
          
      - name: inference_latency_p99
        description: "99th percentile inference latency < 1s"
        target: 90
        window: 30d
        sli:
          type: threshold
          metric: "histogram_quantile(0.99, sum(rate(ai_inference_duration_seconds_bucket[5m])) by (le))"
          threshold: 1.0
          
      - name: prediction_accuracy
        description: "Prediction accuracy > 95%"
        target: 95
        window: 30d
        sli:
          type: custom
          metric: "avg(ai_prediction_accuracy)"

  # Database Service
  - service: postgresql
    objectives:
      - name: availability
        description: "Database availability"
        target: 99.99  # Four 9s
        window: 30d
        sli:
          type: probe
          metric: "up{service='postgresql'}"
          
      - name: query_latency_p95
        description: "95th percentile query latency < 100ms"
        target: 95
        window: 30d
        sli:
          type: threshold
          metric: "histogram_quantile(0.95, sum(rate(pg_query_duration_seconds_bucket[5m])) by (le))"
          threshold: 0.1
          
      - name: connection_pool_saturation
        description: "Connection pool utilization < 80%"
        target: 95
        window: 30d
        sli:
          type: threshold
          metric: "(pg_stat_database_numbackends{datname='policycortex'} / pg_settings_max_connections) * 100"
          threshold: 80

# Global error budget policies
error_budget_policies:
  - name: feature_freeze
    description: "Freeze new features when error budget < 25%"
    threshold: 25
    actions:
      - block_deployments: true
      - allow_hotfixes: true
      - notify_teams: ["engineering", "product"]
      
  - name: emergency_response
    description: "Trigger emergency response when error budget < 10%"
    threshold: 10
    actions:
      - page_oncall: true
      - create_incident: true
      - notify_teams: ["engineering", "sre", "management"]
      
  - name: postmortem_required
    description: "Require postmortem when error budget consumed > 50% in 24h"
    threshold: 50
    window: 24h
    actions:
      - require_postmortem: true
      - schedule_review: true

# Composite SLOs (business-level objectives)
composite_slos:
  - name: user_experience
    description: "Overall user experience SLO"
    components:
      - service: policycortex-frontend
        objective: availability
        weight: 0.4
      - service: policycortex-frontend
        objective: page_load_time
        weight: 0.3
      - service: policycortex-core
        objective: latency_p95
        weight: 0.3
    target: 99.5
    
  - name: data_pipeline
    description: "End-to-end data pipeline SLO"
    components:
      - service: policycortex-core
        objective: availability
        weight: 0.3
      - service: policycortex-ai-engine
        objective: availability
        weight: 0.3
      - service: postgresql
        objective: availability
        weight: 0.4
    target: 99.0

# Reporting configuration
reporting:
  dashboards:
    - name: slo-overview
      url: "http://localhost:3030/d/slo-overview"
      refresh_interval: 30s
      
  weekly_report:
    enabled: true
    recipients:
      - engineering@policycortex.com
      - sre@policycortex.com
    include:
      - slo_compliance
      - error_budget_status
      - incidents_summary
      - improvement_recommendations
      
  monthly_review:
    enabled: true
    recipients:
      - management@policycortex.com
    include:
      - slo_trends
      - error_budget_consumption
      - incident_analysis
      - slo_adjustments_needed