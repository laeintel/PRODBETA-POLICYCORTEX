# Security Testing Configuration
# Implements SAST, DAST, and comprehensive security scanning

name: Security Testing Suite
version: 1.0.0

# SAST (Static Application Security Testing)
sast:
  # Semgrep configuration
  semgrep:
    enabled: true
    config:
      - auto  # Use Semgrep's default rules
      - security-audit
      - secrets
      - owasp-top-ten
    custom_rules:
      - path: ./security/semgrep-rules
    exclude_paths:
      - node_modules
      - .venv
      - target
      - dist
      - build
    severity_threshold: WARNING
    
  # SonarQube configuration  
  sonarqube:
    enabled: true
    server: ${SONAR_HOST_URL}
    token: ${SONAR_TOKEN}
    project_key: policycortex
    quality_gates:
      - security_rating: A
      - security_hotspots_reviewed: 100
      - vulnerabilities: 0
      
  # CodeQL configuration
  codeql:
    enabled: true
    languages:
      - javascript
      - typescript
      - python
      - rust
    queries:
      - security-and-quality
      - security-extended
    
# DAST (Dynamic Application Security Testing)
dast:
  # OWASP ZAP configuration
  zap:
    enabled: true
    api_url: http://localhost:8080
    api_key: ${ZAP_API_KEY}
    scan_policy: Full Scan
    contexts:
      - name: PolicyCortex
        urls:
          - http://localhost:3000
          - http://localhost:8080/api
        authentication:
          type: form
          login_url: /auth/login
          username: test@policycortex.com
          password: ${TEST_PASSWORD}
    alert_threshold: Medium
    
  # Burp Suite configuration
  burp:
    enabled: false  # Pro version required
    api_url: http://localhost:1337
    api_key: ${BURP_API_KEY}
    
# Dependency Scanning
dependencies:
  # npm audit
  npm_audit:
    enabled: true
    audit_level: moderate
    production_only: false
    
  # Python Safety
  safety:
    enabled: true
    ignore_ids: []
    
  # Cargo audit
  cargo_audit:
    enabled: true
    deny_warnings: true
    
  # Trivy scanning
  trivy:
    enabled: true
    scan_types:
      - os
      - library
      - secret
      - config
    severity: MEDIUM,HIGH,CRITICAL
    ignore_unfixed: false
    
# Container Security
containers:
  # Docker image scanning
  docker_scan:
    enabled: true
    images:
      - crcortexdev.azurecr.io/policycortex-frontend:latest
      - crcortexdev.azurecr.io/policycortex-core:latest
      - crcortexdev.azurecr.io/policycortex-api-gateway:latest
    
  # Kubernetes security
  kubesec:
    enabled: true
    manifests:
      - ./k8s/*.yaml
      - ./helm/policycortex/templates/*.yaml
    
# Secret Detection
secrets:
  # Gitleaks
  gitleaks:
    enabled: true
    config: .gitleaks.toml
    baseline: .gitleaksignore
    
  # TruffleHog
  trufflehog:
    enabled: true
    entropy_threshold: 4.5
    regex_patterns:
      - AWS
      - Azure
      - GCP
      - GitHub
      - Private Key
      
# Infrastructure Security
infrastructure:
  # Terraform security scanning
  tfsec:
    enabled: true
    minimum_severity: WARNING
    exclude_checks: []
    
  # Checkov
  checkov:
    enabled: true
    frameworks:
      - terraform
      - dockerfile
      - kubernetes
      - helm
    skip_checks: []
    
# API Security Testing
api_security:
  # API fuzzing
  fuzzing:
    enabled: true
    endpoints:
      - path: /api/v1/resources
        methods: [GET, POST, PUT, DELETE]
      - path: /api/v1/policies
        methods: [GET, POST, PUT, DELETE]
      - path: /api/v1/predictions
        methods: [GET]
    payloads:
      - sql_injection
      - xss
      - xxe
      - command_injection
      - path_traversal
      
  # Rate limiting tests
  rate_limiting:
    enabled: true
    endpoints:
      - path: /api/v1/login
        limit: 5
        window: 60
      - path: /api/v1/*
        limit: 100
        window: 60
        
  # Authentication tests
  auth_tests:
    enabled: true
    test_cases:
      - missing_token
      - expired_token
      - malformed_token
      - wrong_signature
      - privilege_escalation
      
# Compliance Scanning
compliance:
  # CIS Benchmarks
  cis:
    enabled: true
    benchmarks:
      - docker
      - kubernetes
      - azure
      
  # PCI DSS
  pci_dss:
    enabled: true
    requirements:
      - 2.2.3  # Encrypt all non-console administrative access
      - 6.5.1  # Injection flaws
      - 6.5.7  # Cross-site scripting
      
  # HIPAA
  hipaa:
    enabled: false  # Enable if handling PHI
    
# Penetration Testing
pentest:
  # Metasploit integration
  metasploit:
    enabled: false  # Manual review required
    modules:
      - auxiliary/scanner/http/
      - exploit/multi/http/
      
  # Custom scripts
  custom_scripts:
    enabled: true
    scripts:
      - ./security/pentest/auth_bypass.py
      - ./security/pentest/session_fixation.py
      - ./security/pentest/privilege_escalation.py
      
# Security Headers
headers:
  required:
    - name: X-Frame-Options
      value: DENY
    - name: X-Content-Type-Options
      value: nosniff
    - name: X-XSS-Protection
      value: 1; mode=block
    - name: Strict-Transport-Security
      value: max-age=31536000; includeSubDomains
    - name: Content-Security-Policy
      pattern: "default-src 'self'"
    - name: Referrer-Policy
      value: strict-origin-when-cross-origin
      
# SSL/TLS Configuration
ssl:
  # SSL Labs test
  ssllabs:
    enabled: true
    minimum_grade: A
    
  # Cipher suites
  ciphers:
    allowed:
      - TLS_AES_256_GCM_SHA384
      - TLS_AES_128_GCM_SHA256
      - TLS_CHACHA20_POLY1305_SHA256
    denied:
      - RC4
      - DES
      - 3DES
      
  # Protocol versions
  protocols:
    minimum: TLSv1.2
    preferred: TLSv1.3
    
# Reporting
reporting:
  formats:
    - json
    - html
    - junit
    - sarif
  output_dir: ./security-reports
  
  # Notifications
  notifications:
    slack:
      enabled: true
      webhook: ${SLACK_SECURITY_WEBHOOK}
      severity: HIGH
      
    email:
      enabled: true
      recipients:
        - security@policycortex.com
      severity: CRITICAL
      
  # Issue tracking
  jira:
    enabled: true
    project: SEC
    issue_type: Security
    auto_create: true
    severity_mapping:
      CRITICAL: Blocker
      HIGH: Major
      MEDIUM: Minor
      LOW: Trivial
      
# Thresholds and Gates
quality_gates:
  block_on:
    - critical_vulnerabilities: 0
    - high_vulnerabilities: 0
    - exposed_secrets: 0
    - sql_injection: 0
    - xss: 0
    
  warn_on:
    - medium_vulnerabilities: 5
    - low_vulnerabilities: 20
    - outdated_dependencies: 10
    
# Schedule
schedule:
  full_scan:
    cron: "0 2 * * SUN"  # Weekly on Sunday at 2 AM
    
  quick_scan:
    cron: "0 */4 * * *"  # Every 4 hours
    
  dependency_scan:
    cron: "0 9 * * MON-FRI"  # Daily on weekdays at 9 AM