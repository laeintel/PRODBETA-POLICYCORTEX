version: '3.9'

# PolicyCortex Complete Infrastructure Services
# This Docker Compose file includes all required services for PolicyCortex
# Includes: PostgreSQL, Redis/DragonflyDB, EventStore, NATS, Monitoring Stack

services:
  # ============================================================
  # DATABASE SERVICES
  # ============================================================

  # PostgreSQL Primary Database
  postgres:
    image: postgres:16-alpine
    container_name: policycortex-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: policycortex
      POSTGRES_INIT_DB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
      POSTGRES_MAX_CONNECTIONS: 200
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/01-init-db.sql
      - ../migrations:/scripts/migrations:ro
      - ./postgres-optimization.conf:/etc/postgresql/postgresql.conf:ro
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d policycortex"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - policycortex-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Redis/DragonflyDB (25x faster Redis)
  redis:
    image: docker.dragonflydb.io/dragonflydb/dragonfly:v1.12.1
    container_name: policycortex-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - redis_logs:/var/log/dragonfly
    command: [
      "dragonfly",
      "--logtostderr",
      "--cache_mode",
      "--maxmemory=2gb",
      "--save_schedule=*/15 * * * *",
      "--dbfilename=dump.rdb",
      "--bind=0.0.0.0",
      "--port=6379"
    ]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - policycortex-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # ============================================================
  # EVENT SOURCING & MESSAGING
  # ============================================================

  # EventStore for Event Sourcing
  eventstore:
    image: eventstore/eventstore:23.10.0-bookworm-slim
    container_name: policycortex-eventstore
    restart: unless-stopped
    environment:
      - EVENTSTORE_CLUSTER_SIZE=1
      - EVENTSTORE_RUN_PROJECTIONS=All
      - EVENTSTORE_START_STANDARD_PROJECTIONS=true
      - EVENTSTORE_DB=/var/lib/eventstore-data
      - EVENTSTORE_INDEX=/var/lib/eventstore-index
      - EVENTSTORE_LOG=/var/log/eventstore
      - EVENTSTORE_INSECURE=true
      - EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP=true
      - EVENTSTORE_MEM_DB=false
      - EVENTSTORE_CACHED_CHUNKS=50000
      - EVENTSTORE_CHUNK_CACHE_SIZE=536871424
      - EVENTSTORE_MAX_MEM_TABLE_SIZE=1000000
      - EVENTSTORE_HTTP_PORT=2113
      - EVENTSTORE_TCP_PORT=1113
      - EVENTSTORE_DISCOVER_VIA_DNS=false
      - EVENTSTORE_GOSSIP_ALLOWED_DIFFERENCE_MS=60000
    ports:
      - "2113:2113"  # HTTP
      - "1113:1113"  # TCP
    volumes:
      - eventstore_data:/var/lib/eventstore-data
      - eventstore_index:/var/lib/eventstore-index
      - eventstore_logs:/var/log/eventstore
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:2113/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - policycortex-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # NATS for messaging
  nats:
    image: nats:2.10-alpine
    container_name: policycortex-nats
    restart: unless-stopped
    ports:
      - "4222:4222"  # Client connections
      - "8222:8222"  # Management/Monitoring
      - "6222:6222"  # Clustering
    volumes:
      - nats_data:/data
      - nats_logs:/var/log/nats
    command: [
      "--js",
      "--sd", "/data",
      "--m", "8222",
      "--max_payload", "8MB",
      "--max_pending", "256MB",
      "--max_connections", "1000",
      "--write_deadline", "10s"
    ]
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "4222"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - policycortex-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # ============================================================
  # MONITORING & OBSERVABILITY
  # ============================================================

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: policycortex-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - prometheus_config:/etc/prometheus
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ../monitoring/ml_alerts.yml:/etc/prometheus/rules/ml_alerts.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - policycortex-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:10.2.3
    container_name: policycortex-grafana
    restart: unless-stopped
    ports:
      - "3010:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=policycortex2024
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=localhost
      - GF_SERVER_ROOT_URL=http://localhost:3010/
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - grafana_config:/etc/grafana
      - grafana_logs:/var/log/grafana
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - policycortex-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: policycortex-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    volumes:
      - jaeger_data:/tmp
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - policycortex-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # ============================================================
  # DEVELOPMENT & ADMIN TOOLS
  # ============================================================

  # Adminer for database management
  adminer:
    image: adminer:4.8.1
    container_name: policycortex-adminer
    restart: unless-stopped
    ports:
      - "8081:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
      - ADMINER_DESIGN=pepa-linha
    healthcheck:
      test: ["CMD", "php", "-r", "if(file_get_contents('http://localhost:8080') === FALSE) exit(1);"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - policycortex-network
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "2"

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: policycortex-redis-commander
    restart: unless-stopped
    ports:
      - "8082:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=admin
      - HTTP_PASSWORD=policycortex2024
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - policycortex-network
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "2"

  # ============================================================
  # ML & AI SERVICES
  # ============================================================

  # ML Model Registry
  mlflow:
    image: python:3.11-slim
    container_name: policycortex-mlflow
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://postgres:postgres@postgres:5432/mlflow
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow/artifacts
    volumes:
      - mlflow_artifacts:/mlflow/artifacts
      - mlflow_data:/mlflow/data
    command: >
      bash -c "
        pip install mlflow psycopg2-binary &&
        mlflow server 
          --backend-store-uri postgresql://postgres:postgres@postgres:5432/mlflow
          --default-artifact-root /mlflow/artifacts
          --host 0.0.0.0
          --port 5000
      "
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - policycortex-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # ============================================================
  # SECURITY & COMPLIANCE
  # ============================================================

  # Vault for secrets management (development)
  vault:
    image: hashicorp/vault:1.15
    container_name: policycortex-vault
    restart: unless-stopped
    ports:
      - "8200:8200"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=policycortex-root-token
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
      - VAULT_ADDR=http://0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:/vault/data
      - vault_logs:/vault/logs
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - policycortex-network
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "2"

  # ============================================================
  # LOAD BALANCING & PROXY
  # ============================================================

  # Traefik as reverse proxy and load balancer
  traefik:
    image: traefik:v3.0
    container_name: policycortex-traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "9080:8080"  # Traefik dashboard
    environment:
      - TRAEFIK_API_DASHBOARD=true
      - TRAEFIK_API_INSECURE=true
      - TRAEFIK_PROVIDERS_DOCKER=true
      - TRAEFIK_PROVIDERS_DOCKER_EXPOSEDBYDEFAULT=false
      - TRAEFIK_ENTRYPOINTS_WEB_ADDRESS=:80
      - TRAEFIK_ENTRYPOINTS_WEBSECURE_ADDRESS=:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_data:/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik.service=api@internal"
    networks:
      - policycortex-network
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "2"

# ============================================================
# NETWORKS
# ============================================================
networks:
  policycortex-network:
    name: policycortex-network
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
          gateway: 172.28.0.1
    driver_opts:
      com.docker.network.bridge.name: policycortex-br0
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.enable_icc: "true"

# ============================================================
# VOLUMES
# ============================================================
volumes:
  # Database volumes
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  
  # Redis volumes
  redis_data:
    driver: local
  redis_logs:
    driver: local

  # EventStore volumes
  eventstore_data:
    driver: local
  eventstore_index:
    driver: local
  eventstore_logs:
    driver: local

  # NATS volumes
  nats_data:
    driver: local
  nats_logs:
    driver: local

  # Monitoring volumes
  prometheus_data:
    driver: local
  prometheus_config:
    driver: local
  grafana_data:
    driver: local
  grafana_config:
    driver: local
  grafana_logs:
    driver: local
  jaeger_data:
    driver: local

  # ML/AI volumes
  mlflow_artifacts:
    driver: local
  mlflow_data:
    driver: local

  # Security volumes
  vault_data:
    driver: local
  vault_logs:
    driver: local

  # Load balancer volumes
  traefik_data:
    driver: local