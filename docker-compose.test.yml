version: '3.8'

services:
  # Rust Core Service (Test Mode)
  core-test:
    build:
      context: ./core
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - RUST_LOG=info
      - DATABASE_URL=postgresql://postgres:postgres@postgres-test:5432/policycortex_test
      - REDIS_URL=redis://redis-test:6379
      - EVENT_STORE_URL=http://eventstore-test:2113
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
      eventstore-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # GraphQL Gateway (Test Mode)
  graphql-test:
    build:
      context: ./graphql
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=test
      - CORE_SERVICE_URL=http://core-test:8080
      - APOLLO_KEY=test
      - APOLLO_GRAPH_REF=test
    depends_on:
      core-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Next.js Frontend (Test Mode)
  frontend-test:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=test
      - NEXT_PUBLIC_GRAPHQL_ENDPOINT=http://localhost:4000/graphql
      - NEXT_PUBLIC_API_URL=http://localhost:8080
    depends_on:
      graphql-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Test Database
  postgres-test:
    image: postgres:15-alpine
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=policycortex_test
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d policycortex_test"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Test Redis
  redis-test:
    image: redis:alpine
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Test EventStore
  eventstore-test:
    image: eventstore/eventstore:latest
    ports:
      - "2114:2113"
      - "1114:1113"
    environment:
      - EVENTSTORE_INSECURE=true
      - EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP=true
      - EVENTSTORE_MEM_DB=true
      - EVENTSTORE_RUN_PROJECTIONS=All
      - EVENTSTORE_START_STANDARD_PROJECTIONS=true
    volumes:
      - eventstore_test_data:/var/lib/eventstore
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:2113/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_test_data:
  eventstore_test_data:

networks:
  default:
    name: policycortex-test
    driver: bridge