version: '3.8'

services:
  # Infrastructure Services
  postgres:
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_DB: policycortex_test
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Services
  api-gateway:
    build:
      context: backend
      dockerfile: services/api_gateway/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - SERVICE_NAME=api-gateway
      - PORT=8000
      - DATABASE_URL=postgresql://test_user:test_password@postgres:5432/policycortex_test
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=test-secret-key
      - AZURE_INTEGRATION_URL=http://azure-integration:8001
      - AI_ENGINE_URL=http://ai-engine:8002
      - DATA_PROCESSING_URL=http://data-processing:8003
      - CONVERSATION_URL=http://conversation:8004
      - NOTIFICATION_URL=http://notification:8005
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  azure-integration:
    build:
      context: backend
      dockerfile: services/azure_integration/Dockerfile
    ports:
      - "8001:8001"
    environment:
      - SERVICE_NAME=azure-integration
      - PORT=8001
      - DATABASE_URL=postgresql://test_user:test_password@postgres:5432/policycortex_test
      - REDIS_URL=redis://redis:6379
      - AZURE_TENANT_ID=${AZURE_TENANT_ID:-test-tenant}
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID:-test-client}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET:-test-secret}
      - USE_MOCK_AZURE=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  ai-engine:
    build:
      context: backend
      dockerfile: services/ai_engine/Dockerfile
    ports:
      - "8002:8002"
    environment:
      - SERVICE_NAME=ai-engine
      - PORT=8002
      - DATABASE_URL=postgresql://test_user:test_password@postgres:5432/policycortex_test
      - REDIS_URL=redis://redis:6379
      - MODEL_PATH=/app/models
      - USE_MOCK_MODELS=true
    volumes:
      - ./backend/services/ai_engine/models:/app/models:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  data-processing:
    build:
      context: backend
      dockerfile: services/data_processing/Dockerfile
    ports:
      - "8003:8003"
    environment:
      - SERVICE_NAME=data-processing
      - PORT=8003
      - DATABASE_URL=postgresql://test_user:test_password@postgres:5432/policycortex_test
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  conversation:
    build:
      context: backend
      dockerfile: services/conversation/Dockerfile
    ports:
      - "8004:8004"
    environment:
      - SERVICE_NAME=conversation
      - PORT=8004
      - DATABASE_URL=postgresql://test_user:test_password@postgres:5432/policycortex_test
      - REDIS_URL=redis://redis:6379
      - AI_ENGINE_URL=http://ai-engine:8002
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ai-engine:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  notification:
    build:
      context: backend
      dockerfile: services/notification/Dockerfile
    ports:
      - "8005:8005"
    environment:
      - SERVICE_NAME=notification
      - PORT=8005
      - DATABASE_URL=postgresql://test_user:test_password@postgres:5432/policycortex_test
      - REDIS_URL=redis://redis:6379
      - SMTP_HOST=mailhog
      - SMTP_PORT=1025
      - USE_MOCK_NOTIFICATIONS=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_BASE_URL=http://localhost:8000/api
        - VITE_WS_URL=ws://localhost:8000/ws
        - VITE_AZURE_CLIENT_ID=${AZURE_CLIENT_ID:-test-client}
        - VITE_AZURE_TENANT_ID=${AZURE_TENANT_ID:-test-tenant}
    ports:
      - "3000:80"
    depends_on:
      api-gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Test Tools
  mailhog:
    image: mailhog/mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI

  selenium:
    image: selenium/standalone-chrome:latest
    ports:
      - "4444:4444"
    volumes:
      - /dev/shm:/dev/shm

volumes:
  postgres_data:

networks:
  default:
    name: policycortex-test-network