version: '3.8'

services:
  # Prometheus - Time series database for metrics
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: policycortex-prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    ports:
      - '9090:9090'
    networks:
      - policycortex-monitoring
    restart: unless-stopped

  # Grafana - Visualization and dashboards
  grafana:
    image: grafana/grafana:10.2.2
    container_name: policycortex-grafana
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel,grafana-simple-json-datasource
      - GF_SERVER_ROOT_URL=http://localhost:3030
      - GF_FEATURE_TOGGLES_ENABLE=publicDashboards
    ports:
      - '3030:3000'
    networks:
      - policycortex-monitoring
    restart: unless-stopped
    depends_on:
      - prometheus

  # AlertManager - Alert management and routing
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: policycortex-alertmanager
    volumes:
      - ./monitoring/alertmanager/config.yml:/etc/alertmanager/config.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
      - '--cluster.advertise-address=0.0.0.0:9093'
    ports:
      - '9093:9093'
    networks:
      - policycortex-monitoring
    restart: unless-stopped

  # Node Exporter - Host metrics
  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: policycortex-node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - '9100:9100'
    networks:
      - policycortex-monitoring
    restart: unless-stopped

  # cAdvisor - Container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: policycortex-cadvisor
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - '8095:8080'
    networks:
      - policycortex-monitoring
    restart: unless-stopped

  # Jaeger - Distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: policycortex-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - SPAN_STORAGE_TYPE=badger
      - BADGER_EPHEMERAL=false
      - BADGER_DIRECTORY_VALUE=/badger/data
      - BADGER_DIRECTORY_KEY=/badger/key
    ports:
      - '5775:5775/udp'  # accept zipkin.thrift over compact thrift protocol
      - '6831:6831/udp'  # accept jaeger.thrift over compact thrift protocol
      - '6832:6832/udp'  # accept jaeger.thrift over binary thrift protocol
      - '5778:5778'      # serve configs
      - '16686:16686'    # serve frontend
      - '14250:14250'    # accept model.proto
      - '14268:14268'    # accept jaeger.thrift directly from clients
      - '14269:14269'    # admin port: health check at / and metrics at /metrics
      - '4317:4317'      # OTLP gRPC receiver
      - '4318:4318'      # OTLP HTTP receiver
      - '9411:9411'      # Zipkin compatible endpoint
    volumes:
      - jaeger_data:/badger
    networks:
      - policycortex-monitoring
    restart: unless-stopped

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.91.0
    container_name: policycortex-otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./monitoring/otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - '1888:1888'   # pprof extension
      - '8888:8888'   # Prometheus metrics exposed by the collector
      - '8889:8889'   # Prometheus exporter metrics
      - '13133:13133' # health_check extension
      - '4319:4317'   # OTLP gRPC receiver
      - '4320:4318'   # OTLP HTTP receiver
      - '55679:55679' # zpages extension
    networks:
      - policycortex-monitoring
    depends_on:
      - jaeger
      - prometheus
    restart: unless-stopped

  # Loki - Log aggregation
  loki:
    image: grafana/loki:2.9.3
    container_name: policycortex-loki
    ports:
      - '3100:3100'
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki/loki-config.yaml:/etc/loki/local-config.yaml
      - loki_data:/loki
    networks:
      - policycortex-monitoring
    restart: unless-stopped

  # Promtail - Log shipping
  promtail:
    image: grafana/promtail:2.9.3
    container_name: policycortex-promtail
    volumes:
      - ./monitoring/promtail/config.yml:/etc/promtail/config.yml
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - policycortex-monitoring
    restart: unless-stopped
    depends_on:
      - loki

  # PostgreSQL Exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: policycortex-postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@postgres:5432/policycortex?sslmode=disable"
    ports:
      - '9187:9187'
    networks:
      - policycortex-monitoring
      - policycortex-network
    restart: unless-stopped

  # Redis/DragonflyDB Exporter
  redis-exporter:
    image: oliver006/redis_exporter:v1.55.0
    container_name: policycortex-redis-exporter
    environment:
      REDIS_ADDR: "dragonfly:6379"
    ports:
      - '9121:9121'
    networks:
      - policycortex-monitoring
      - policycortex-network
    restart: unless-stopped

networks:
  policycortex-monitoring:
    driver: bridge
  policycortex-network:
    external: true

volumes:
  prometheus_data:
  grafana_data:
  alertmanager_data:
  jaeger_data:
  loki_data: