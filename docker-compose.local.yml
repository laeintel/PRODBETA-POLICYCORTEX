services:
  postgres:
    image: postgres:15-alpine
    container_name: pcx_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: policycortex
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d policycortex"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pcx_net

  redis:
    image: redis:7-alpine
    container_name: pcx_redis
    command: ["redis-server", "--save", "60", "1", "--loglevel", "notice"]
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pcx_net

  core:
    build:
      context: ./core
      dockerfile: Dockerfile
    container_name: pcx_core
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      ENVIRONMENT: dev
      SERVICE_VERSION: "local"
      ALLOWED_ORIGINS: http://localhost:3000,http://frontend:3000
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/policycortex
      REDIS_URL: redis://redis:6379
      RUST_LOG: policycortex_core=debug,tower_http=info
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pcx_net

  graphql:
    build:
      context: ./graphql
      dockerfile: Dockerfile
    container_name: pcx_graphql
    environment:
      NODE_ENV: production
      ALLOWED_ORIGINS: http://localhost:3000,http://frontend:3000
    depends_on:
      - core
    ports:
      - "4000:4000"
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4000/.well-known/apollo/server-health', r => { process.exit(r.statusCode===200?0:1) })"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pcx_net

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: pcx_frontend
    environment:
      NODE_ENV: production
      DOCKER: "true"
      IN_DOCKER: "true"
      BACKEND_SERVICE_NAME: core
      BACKEND_SERVICE_PORT: 8080
      NEXT_PUBLIC_API_URL: http://core:8080
      NEXT_PUBLIC_GRAPHQL_URL: http://graphql:4000/graphql
      NEXT_PUBLIC_GRAPHQL_ENDPOINT: http://graphql:4000/graphql
      NEXT_PUBLIC_USE_WS: "false"
      NEXT_PUBLIC_DEMO_MODE: "false"
    depends_on:
      - core
      - graphql
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', r => { process.exit(r.statusCode===200?0:1) })"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pcx_net

volumes:
  pg_data:

networks:
  pcx_net:
    name: pcx_net