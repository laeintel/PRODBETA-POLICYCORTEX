# PolicyCortex v2 Configuration Template
# Copy this file to .env.local (frontend) and .env (backend) and fill in your values

# ===========================================
# AZURE AD AUTHENTICATION (REQUIRED)
# ===========================================
# These values come from your Azure AD App Registration
# Go to Azure Portal > Azure Active Directory > App registrations

# Your Azure AD Tenant ID (Directory ID)
AZURE_TENANT_ID=9ef5b184-d371-462a-bc75-5024ce8baff7

# Your Azure AD Application (client) ID
AZURE_CLIENT_ID=1ecc95d1-e5bb-43e2-9324-30a17cb6b01c

# Your Azure AD Application Secret (create in Certificates & secrets)
# WARNING: Keep this secret secure and never commit to version control
AZURE_CLIENT_SECRET=your-client-secret-here

# Azure Subscription ID for resource access
AZURE_SUBSCRIPTION_ID=205b477d-17e7-4b3b-92c1-32cf02626b78

# ===========================================
# FRONTEND AUTHENTICATION CONFIG
# ===========================================
# These NEXT_PUBLIC_ variables are used by the frontend MSAL configuration

# Same as AZURE_CLIENT_ID above
NEXT_PUBLIC_AZURE_CLIENT_ID=1ecc95d1-e5bb-43e2-9324-30a17cb6b01c

# Same as AZURE_TENANT_ID above  
NEXT_PUBLIC_AZURE_TENANT_ID=9ef5b184-d371-462a-bc75-5024ce8baff7

# Redirect URI after login (must match App Registration)
# For local development, use: http://localhost:3000
# For production, use your actual domain
NEXT_PUBLIC_MSAL_REDIRECT_URI=http://localhost:3000

# Post-logout redirect URI
NEXT_PUBLIC_MSAL_POST_LOGOUT_REDIRECT_URI=http://localhost:3000

# API scope for your backend (optional, for strict API authentication)
# Format: api://{client-id}/access_as_user
NEXT_PUBLIC_CORE_API_SCOPE=api://1ecc95d1-e5bb-43e2-9324-30a17cb6b01c/access_as_user

# ===========================================
# BACKEND AUTHENTICATION CONFIG
# ===========================================

# Allow any audience for JWT validation (set to false in production)
ALLOW_ANY_AUDIENCE=false

# Require authentication for all API endpoints (recommended: true)
REQUIRE_AUTH=true

# ===========================================
# DATABASE CONFIGURATION
# ===========================================
DATABASE_URL=postgresql://postgres:postgres@localhost:5432/policycortex

# ===========================================
# REDIS/CACHE CONFIGURATION
# ===========================================
REDIS_URL=redis://localhost:6379

# ===========================================
# APPLICATION SETTINGS
# ===========================================

# Environment (development, staging, production)
NODE_ENV=development
RUST_ENV=development

# API URLs
NEXT_PUBLIC_API_URL=http://localhost:8080
NEXT_PUBLIC_GRAPHQL_ENDPOINT=http://localhost:4000/graphql

# Data mode (real or simulated)
USE_REAL_DATA=false

# Logging
RUST_LOG=debug
LOG_LEVEL=debug

# ===========================================
# AZURE AD APP REGISTRATION SETUP INSTRUCTIONS
# ===========================================
# 1. Go to Azure Portal > Azure Active Directory > App registrations
# 2. Click "New registration"
# 3. Name: PolicyCortex v2
# 4. Supported account types: Single tenant (or your preference)
# 5. Redirect URI: 
#    - Type: Single-page application
#    - URI: http://localhost:3000 (for development)
# 6. After creation, note the Application (client) ID and Directory (tenant) ID
# 7. Go to "Certificates & secrets" > "New client secret" to create AZURE_CLIENT_SECRET
# 8. Go to "API permissions" and add:
#    - Microsoft Graph:
#      - User.Read (delegated)
#      - Directory.Read.All (delegated)
#      - Policy.Read.All (delegated)
#    - Azure Service Management:
#      - user_impersonation (delegated)
# 9. Go to "Expose an API" and add a scope:
#    - Scope name: access_as_user
#    - Who can consent: Admins and users
#    - Admin consent display name: Access PolicyCortex API
#    - Admin consent description: Allows the app to access PolicyCortex API on behalf of the signed-in user
# 10. Grant admin consent for the permissions if required

# ===========================================
# SECURITY NOTES
# ===========================================
# - Never commit .env files with real secrets to version control
# - Use Azure Key Vault for production secrets
# - Rotate secrets regularly
# - Use managed identities when running in Azure
# - Enable MFA for all admin accounts