version: '3.8'

services:
  # Redis/DragonflyDB for caching
  redis:
    image: docker.dragonflydb.io/dragonflydb/dragonfly:latest
    container_name: policycortex-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: ["dragonfly", "--logtostderr", "--cache_mode"]
    networks:
      - policycortex-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # EventStore for event sourcing
  eventstore:
    image: eventstore/eventstore:latest
    container_name: policycortex-eventstore
    environment:
      - EVENTSTORE_CLUSTER_SIZE=1
      - EVENTSTORE_RUN_PROJECTIONS=All
      - EVENTSTORE_START_STANDARD_PROJECTIONS=true
      - EVENTSTORE_INSECURE=true
      - EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP=true
    ports:
      - "2113:2113"
      - "1113:1113"
    volumes:
      - eventstore-data:/var/lib/eventstore
    networks:
      - policycortex-network

  # ML Service
  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    container_name: policycortex-ml
    environment:
      - PYTHONUNBUFFERED=1
      - MODEL_PATH=/models
      - API_PORT=8090
      - REDIS_URL=redis://redis:6379
    ports:
      - "8090:8090"
    volumes:
      - ml-models:/models
      - ./ml-service:/app
    networks:
      - policycortex-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: policycortex-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - policycortex-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: policycortex-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    networks:
      - policycortex-network
    depends_on:
      - prometheus

  # Keycloak for authentication
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: policycortex-keycloak
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/keycloak
      - KC_DB_USERNAME=postgres
      - KC_DB_PASSWORD=postgres
    command: start-dev
    ports:
      - "8180:8080"
    networks:
      - policycortex-network
    depends_on:
      - postgres

  # WebSocket service
  websocket-service:
    build:
      context: ./core
      dockerfile: Dockerfile.websocket
    container_name: policycortex-websocket
    environment:
      - RUST_LOG=info
      - REDIS_URL=redis://redis:6379
      - PORT=8085
    ports:
      - "8085:8085"
    networks:
      - policycortex-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/health"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  redis-data:
  eventstore-data:
  ml-models:
  prometheus-data:
  grafana-data:

networks:
  policycortex-network:
    external: true