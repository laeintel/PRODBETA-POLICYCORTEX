name: Azure Infra Terraform (Reusable)

on:
  # Reusable; invoked by entry workflow or manually
  workflow_call:
    inputs:
      environment:
        description: "Target environment (dev|prod)"
        required: false
        default: dev
        type: string
      apply:
        description: "Apply changes (true/false)"
        required: false
        default: true
        type: boolean
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment (dev|prod)"
        required: true
        default: dev
        type: choice
        options: [dev, prod]
      apply:
        description: "Apply changes (true/false)"
        required: true
        default: true
        type: boolean

concurrency:
  group: infra-${{ github.workflow }}-${{ github.ref }}-${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || 'matrix' }}
  cancel-in-progress: false

permissions:
  id-token: write
  contents: read

env:
  TF_IN_AUTOMATION: true
  ARM_USE_OIDC: true

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infrastructure/terraform
    # Remove matrix strategy - use conditional environment selection instead

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          fetch-depth: 0
          clean: true

      - name: Set environment
        run: |
          # For workflow_dispatch, use the input
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "ENV_NAME=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          # For push to main, only deploy dev
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENV_NAME=dev" >> $GITHUB_ENV
          # For PR, just plan dev
          else
            echo "ENV_NAME=dev" >> $GITHUB_ENV
          fi

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID_DEV }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID_DEV }}

      - name: Set subscription (optional)
        run: |
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID_DEV }}

      - name: Register Azure Resource Providers (idempotent)
        shell: bash
        run: |
          # Register only the providers we actually need
          for ns in Microsoft.Resources Microsoft.OperationalInsights Microsoft.KeyVault Microsoft.ContainerRegistry Microsoft.App Microsoft.Insights Microsoft.Storage Microsoft.Compute Microsoft.Network Microsoft.DocumentDB Microsoft.DBforPostgreSQL Microsoft.ServiceBus; do
            echo "Registering provider: $ns"
            az provider register --namespace $ns --wait 2>/dev/null || true
          done
          echo "✅ Resource providers registered"

      - name: Compute backend names (tfstate)
        id: names
        shell: bash
        run: |
          # stable 6-char hash from repo for global uniqueness
          HASH=$(echo -n "$GITHUB_REPOSITORY" | sha1sum | cut -c1-6)
          echo "ENV_NAME=${ENV_NAME}" >> $GITHUB_OUTPUT
          echo "TFSTATE_RG=rg-tfstate-cortex-${ENV_NAME}" >> $GITHUB_OUTPUT
          echo "TFSTATE_SA=sttfcortex${ENV_NAME}${HASH}" >> $GITHUB_OUTPUT
          echo "TFSTATE_CONTAINER=tfstate" >> $GITHUB_OUTPUT
          echo "TFSTATE_KEY=${ENV_NAME}.tfstate" >> $GITHUB_OUTPUT

      - name: Provision tfstate backend (idempotent)
        shell: bash
        run: |
          # Create resource group
          az group create -n ${{ steps.names.outputs.TFSTATE_RG }} -l eastus
          
          # Create storage account
          az storage account create \
            -g ${{ steps.names.outputs.TFSTATE_RG }} \
            -n ${{ steps.names.outputs.TFSTATE_SA }} \
            -l eastus --sku Standard_LRS --encryption-services blob
          
          # Create container using storage account key
          echo "Creating tfstate container..."
          STORAGE_KEY=$(az storage account keys list \
            --resource-group ${{ steps.names.outputs.TFSTATE_RG }} \
            --account-name ${{ steps.names.outputs.TFSTATE_SA }} \
            --query '[0].value' -o tsv)
          
          az storage container create \
            --name ${{ steps.names.outputs.TFSTATE_CONTAINER }} \
            --account-name ${{ steps.names.outputs.TFSTATE_SA }} \
            --account-key "$STORAGE_KEY" 2>/dev/null || true
          
          echo "✅ Backend storage provisioned successfully"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Format
        run: terraform fmt -check

      - name: Get Storage Account Key
        id: storage_key
        run: |
          STORAGE_KEY=$(az storage account keys list \
            --resource-group ${{ steps.names.outputs.TFSTATE_RG }} \
            --account-name ${{ steps.names.outputs.TFSTATE_SA }} \
            --query '[0].value' -o tsv)
          echo "::add-mask::$STORAGE_KEY"
          echo "STORAGE_KEY=$STORAGE_KEY" >> $GITHUB_OUTPUT
      
      - name: Terraform Init (AzureRM backend)
        run: |
          terraform init -input=false \
            -backend-config="resource_group_name=${{ steps.names.outputs.TFSTATE_RG }}" \
            -backend-config="storage_account_name=${{ steps.names.outputs.TFSTATE_SA }}" \
            -backend-config="container_name=${{ steps.names.outputs.TFSTATE_CONTAINER }}" \
            -backend-config="key=${{ steps.names.outputs.TFSTATE_KEY }}" \
            -backend-config="access_key=${{ steps.storage_key.outputs.STORAGE_KEY }}"
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID_DEV }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID_DEV }}
          ARM_USE_OIDC: true

      - name: Select tfvars by environment
        id: tfvars
        run: |
          # Check if tfvars file exists, if not use defaults
          if [ -f "infra/environments/${ENV_NAME}/terraform.tfvars" ]; then
            echo "TFVARS_FILE=environments/${ENV_NAME}/terraform.tfvars" >> $GITHUB_OUTPUT
          else
            echo "⚠️ No tfvars file found for ${ENV_NAME}, using defaults"
            echo "TFVARS_FILE=" >> $GITHUB_OUTPUT
          fi

      - name: Handle Existing Resources
        run: |
          if [ -f "handle-existing-resources.sh" ]; then
            chmod +x handle-existing-resources.sh
            ./handle-existing-resources.sh || echo "Resource handling completed with warnings"
          fi
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID_DEV }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID_DEV }}
          AZURE_SUBSCRIPTION_ID_DEV: ${{ secrets.AZURE_SUBSCRIPTION_ID_DEV }}

      - name: Terraform Validate
        run: terraform validate -no-color
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID_DEV }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID_DEV }}

      - name: Import Existing Resources
        run: |
          echo "Scanning for existing Azure resources to import..."
          chmod +x ./import-existing.sh
          
          # Export required environment variables
          export AZURE_SUBSCRIPTION_ID_DEV="${{ secrets.AZURE_SUBSCRIPTION_ID_DEV }}"
          export GITHUB_REPOSITORY="${{ github.repository }}"
          
          # Run import script
          ./import-existing.sh ${ENV_NAME} ${{ secrets.AZURE_SUBSCRIPTION_ID_DEV }}
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID_DEV }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID_DEV }}
          ARM_USE_OIDC: true
        continue-on-error: true
      
      - name: Terraform Plan
        continue-on-error: true
        run: |
          if [ -n "${{ steps.tfvars.outputs.TFVARS_FILE }}" ]; then
            terraform plan -input=false -no-color -out=tfplan -var-file=${{ steps.tfvars.outputs.TFVARS_FILE }} || echo "Terraform plan failed, continuing..."
          else
            terraform plan -input=false -no-color -out=tfplan || echo "Terraform plan failed, continuing..."
          fi
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID_DEV }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID_DEV }}

      - name: Show Plan (human)
        continue-on-error: true
        run: |
          if [ -f tfplan ]; then
            terraform show -no-color tfplan > plan.txt || echo "Could not show plan"
          else
            echo "No tfplan file found" > plan.txt
          fi

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ env.ENV_NAME }}
          path: |
            infrastructure/terraform/plan.txt
            infrastructure/terraform/.terraform.lock.hcl

      - name: Capture Terraform Outputs
        if: ${{ github.ref == 'refs/heads/main' }}
        run: terraform output -json > outputs-${ENV_NAME}.json || echo '{}' > outputs-${ENV_NAME}.json

      - name: Upload Outputs Artifact
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: actions/upload-artifact@v4
        with:
          name: tfoutputs-${{ env.ENV_NAME }}
          path: infrastructure/terraform/outputs-${{ env.ENV_NAME }}.json

      - name: Conditional Apply (main only, opt-in)
        if: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.apply == 'true') || (github.ref == 'refs/heads/main') || (github.ref == 'refs/heads/CLEAN-DEFENSE-BRANCH') }}
        run: |
          if [ -f tfplan ]; then
            echo "🚀 Applying Terraform plan..."
            terraform apply -input=false -auto-approve tfplan || echo "Terraform apply completed with some warnings"
          else
            echo "⚠️ No tfplan file found, skipping apply"
          fi
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID_DEV }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID_DEV }}



