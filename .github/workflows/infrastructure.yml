name: Infrastructure Deployment

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'infrastructure/**'
      - '.github/workflows/infrastructure.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'infrastructure/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

# Permissions for GitHub Actions
permissions:
  contents: read

jobs:
  validate:
    name: Validate Infrastructure
    runs-on: windows-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        working-directory: ./infrastructure/terraform

      - name: Terraform Init
        run: terraform init
        working-directory: ./infrastructure/terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./infrastructure/terraform

      - name: Terraform Plan
        run: terraform plan -var-file="environments/dev/terraform.tfvars"
        working-directory: ./infrastructure/terraform

  security-scan:
    name: Security Scan Infrastructure
    runs-on: windows-latest
    needs: validate
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ./infrastructure
          framework: terraform,dockerfile
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov-results.sarif

      - name: Run Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: './infrastructure'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: trivy-results.sarif

  deploy-dev:
    name: Deploy to Development
    runs-on: windows-latest
    needs: [validate, security-scan]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment: development
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="storage_account_name=${{ secrets.TERRAFORM_BACKEND_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TERRAFORM_BACKEND_CONTAINER }}" \
            -backend-config="key=dev.terraform.tfstate" \
            -backend-config="resource_group_name=${{ secrets.TERRAFORM_BACKEND_RESOURCE_GROUP }}"
        working-directory: ./infrastructure/terraform

      - name: Terraform Plan
        run: terraform plan -var-file="environments/dev/terraform.tfvars" -out=tfplan
        working-directory: ./infrastructure/terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./infrastructure/terraform

      - name: Extract Outputs
        id: terraform-outputs
        run: |
          echo "container_registry=$(terraform output -raw container_registry)" >> $GITHUB_OUTPUT
          echo "resource_group=$(terraform output -raw resource_group)" >> $GITHUB_OUTPUT
          echo "aks_cluster=$(terraform output -raw aks_cluster_name)" >> $GITHUB_OUTPUT
        working-directory: ./infrastructure/terraform

    outputs:
      container_registry: ${{ steps.terraform-outputs.outputs.container_registry }}
      resource_group: ${{ steps.terraform-outputs.outputs.resource_group }}
      aks_cluster: ${{ steps.terraform-outputs.outputs.aks_cluster }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: windows-latest
    needs: [validate, security-scan]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="storage_account_name=${{ secrets.TERRAFORM_BACKEND_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TERRAFORM_BACKEND_CONTAINER }}" \
            -backend-config="key=staging.terraform.tfstate" \
            -backend-config="resource_group_name=${{ secrets.TERRAFORM_BACKEND_RESOURCE_GROUP }}"
        working-directory: ./infrastructure/terraform

      - name: Terraform Plan
        run: terraform plan -var-file="environments/staging/terraform.tfvars" -out=tfplan
        working-directory: ./infrastructure/terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./infrastructure/terraform

      - name: Extract Outputs
        id: terraform-outputs
        run: |
          echo "container_registry=$(terraform output -raw container_registry)" >> $GITHUB_OUTPUT
          echo "resource_group=$(terraform output -raw resource_group)" >> $GITHUB_OUTPUT
          echo "aks_cluster=$(terraform output -raw aks_cluster_name)" >> $GITHUB_OUTPUT
        working-directory: ./infrastructure/terraform

    outputs:
      container_registry: ${{ steps.terraform-outputs.outputs.container_registry }}
      resource_group: ${{ steps.terraform-outputs.outputs.resource_group }}
      aks_cluster: ${{ steps.terraform-outputs.outputs.aks_cluster }}

  deploy-prod:
    name: Deploy to Production
    runs-on: windows-latest
    needs: [validate, security-scan]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    environment: production
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="storage_account_name=${{ secrets.TERRAFORM_BACKEND_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TERRAFORM_BACKEND_CONTAINER }}" \
            -backend-config="key=prod.terraform.tfstate" \
            -backend-config="resource_group_name=${{ secrets.TERRAFORM_BACKEND_RESOURCE_GROUP }}"
        working-directory: ./infrastructure/terraform

      - name: Terraform Plan
        run: terraform plan -var-file="environments/prod/terraform.tfvars" -out=tfplan
        working-directory: ./infrastructure/terraform

      - name: Manual Approval Check
        run: |
          echo "üöÄ Production deployment requires manual approval"
          echo "Please review the Terraform plan before proceeding"

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./infrastructure/terraform

      - name: Extract Outputs
        id: terraform-outputs
        run: |
          echo "container_registry=$(terraform output -raw container_registry)" >> $GITHUB_OUTPUT
          echo "resource_group=$(terraform output -raw resource_group)" >> $GITHUB_OUTPUT
          echo "aks_cluster=$(terraform output -raw aks_cluster_name)" >> $GITHUB_OUTPUT
        working-directory: ./infrastructure/terraform

    outputs:
      container_registry: ${{ steps.terraform-outputs.outputs.container_registry }}
      resource_group: ${{ steps.terraform-outputs.outputs.resource_group }}
      aks_cluster: ${{ steps.terraform-outputs.outputs.aks_cluster }}

  notify:
    name: Notify Deployment Status
    runs-on: windows-latest
    needs: [deploy-dev, deploy-staging, deploy-prod]
    if: always()
    steps:
      - name: Notify Success
        if: ${{ needs.deploy-dev.result == 'success' || needs.deploy-staging.result == 'success' || needs.deploy-prod.result == 'success' }}
        run: |
          echo "‚úÖ Infrastructure deployment completed successfully"
          echo "Environment: ${{ github.event.inputs.environment || 'auto-detected' }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"

      - name: Notify Failure
        if: ${{ needs.deploy-dev.result == 'failure' || needs.deploy-staging.result == 'failure' || needs.deploy-prod.result == 'failure' }}
        run: |
          echo "‚ùå Infrastructure deployment failed"
          echo "Please check the logs and resolve any issues"
          exit 1