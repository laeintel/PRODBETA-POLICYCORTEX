name: PolicyCortex Complete CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  
jobs:
  # Job 1: Code Quality Checks
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache Node dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Python linting
      - name: Install Python linting tools
        run: |
          pip install flake8 black isort mypy bandit safety

      - name: Run Python linting
        run: |
          # Check each service
          for service in backend/services/*/; do
            echo "Linting $service"
            cd $service
            flake8 . --max-line-length=100 --exclude=venv
            black . --check --line-length=100
            isort . --check-only --profile black
            mypy . --ignore-missing-imports || true
            cd -
          done

      - name: Run security checks
        run: |
          # Security scanning
          for service in backend/services/*/; do
            echo "Security scan for $service"
            cd $service
            bandit -r . -ll
            safety check -r requirements.txt || true
            cd -
          done

      # Frontend linting
      - name: Install and run frontend linting
        working-directory: frontend
        run: |
          npm ci
          npm run lint
          npm run type-check

  # Job 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        service: [api_gateway, azure_integration, ai_engine, data_processing, conversation, notification]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        working-directory: backend/services/${{ matrix.service }}
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx

      - name: Run unit tests
        working-directory: backend/services/${{ matrix.service }}
        run: |
          pytest tests/unit -v --cov=. --cov-report=xml --cov-report=html

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: backend/services/${{ matrix.service }}/coverage.xml
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-coverage

  # Job 3: Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run unit tests
        working-directory: frontend
        run: npm run test:unit -- --coverage

      - name: Run component tests
        working-directory: frontend
        run: npm run test:components

      - name: Build frontend
        working-directory: frontend
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist

  # Job 4: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, frontend-tests]
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: policycortex_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Start services
        run: |
          # Create docker-compose override for CI
          cat > docker-compose.ci.yml << EOF
          version: '3.8'
          services:
            api-gateway:
              build:
                context: backend
                dockerfile: services/api_gateway/Dockerfile
              environment:
                - DATABASE_URL=postgresql://test_user:test_password@postgres:5432/policycortex_test
                - REDIS_URL=redis://redis:6379
              ports:
                - "8000:8000"
          EOF
          
          # Start services
          docker-compose -f docker-compose.yml -f docker-compose.ci.yml up -d

      - name: Wait for services
        run: |
          # Wait for services to be ready
          for i in {1..30}; do
            if curl -f http://localhost:8000/health; then
              echo "Services are ready"
              break
            fi
            echo "Waiting for services... ($i/30)"
            sleep 10
          done

      - name: Run integration tests
        run: |
          # Install test dependencies
          pip install pytest requests

          # Run integration tests
          pytest tests/integration -v

      - name: Collect logs
        if: failure()
        run: |
          docker-compose logs > docker-compose.log
          
      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-logs
          path: docker-compose.log

  # Job 5: E2E Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - uses: actions/checkout@v4

      - name: Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist

      - name: Set up test environment
        run: |
          # Start full stack
          docker-compose up -d
          
          # Wait for services
          sleep 30

      - name: Install Playwright
        working-directory: frontend
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Run E2E tests
        working-directory: frontend
        run: |
          npm run test:e2e

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-results
          path: frontend/test-results

  # Job 6: Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run OWASP dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'PolicyCortex'
          path: '.'
          format: 'HTML'

      - name: Upload OWASP results
        uses: actions/upload-artifact@v3
        with:
          name: owasp-results
          path: reports

  # Job 7: Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - uses: actions/checkout@v4

      - name: Set up K6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Start services
        run: |
          docker-compose up -d
          sleep 30

      - name: Run performance tests
        run: |
          k6 run tests/performance/load-test.js --out json=performance-results.json

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results.json

  # Job 8: Build Docker Images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security-scan]
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service: [api_gateway, azure_integration, ai_engine, data_processing, conversation, notification]
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: backend
          file: backend/services/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 9: Deploy to Environment
  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'staging' }}
    runs-on: ubuntu-latest
    needs: [build-images, e2e-tests, performance-tests]
    if: github.ref == 'refs/heads/main'
    environment: 
      name: ${{ github.event.inputs.environment || 'staging' }}
      url: ${{ steps.deploy.outputs.app-url }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Container Apps
        id: deploy
        run: |
          # Deploy each service
          for service in api_gateway azure_integration ai_engine data_processing conversation notification; do
            echo "Deploying $service"
            
            az containerapp update \
              --name ca-$service-${{ github.event.inputs.environment || 'staging' }} \
              --resource-group rg-policycortex-${{ github.event.inputs.environment || 'staging' }} \
              --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$service:${{ github.sha }}
          done
          
          # Get frontend URL
          FRONTEND_URL=$(az containerapp show \
            --name ca-frontend-${{ github.event.inputs.environment || 'staging' }} \
            --resource-group rg-policycortex-${{ github.event.inputs.environment || 'staging' }} \
            --query properties.configuration.ingress.fqdn -o tsv)
            
          echo "app-url=https://$FRONTEND_URL" >> $GITHUB_OUTPUT

      - name: Run smoke tests
        run: |
          # Wait for deployment
          sleep 60
          
          # Run smoke tests
          ./scripts/smoke-tests.sh ${{ steps.deploy.outputs.app-url }}

  # Job 10: Post-deployment verification
  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Health check all services
        run: |
          # Check each service health
          for service in api-gateway azure-integration ai-engine data-processing conversation notification; do
            echo "Checking $service health"
            curl -f https://$service-${{ github.event.inputs.environment || 'staging' }}.azurecontainerapps.io/health || exit 1
          done

      - name: Run synthetic monitoring
        run: |
          # Run synthetic user journeys
          npm install -g @datadog/synthetics-ci-cli
          datadog-ci synthetics run-tests --config synthetics.config.json

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment to ${{ github.event.inputs.environment || 'staging' }} ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Job 11: Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [verify-deployment]
    if: always()
    steps:
      - name: Clean up test resources
        run: |
          # Clean up any test resources created during CI/CD
          echo "Cleaning up test resources"
          
      - name: Prune old images
        run: |
          # Prune old container images
          echo "Pruning old images"