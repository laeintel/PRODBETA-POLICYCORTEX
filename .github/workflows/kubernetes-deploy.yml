name: Deploy Applications to Kubernetes

defaults:
  run:
    shell: bash

permissions:
  contents: read
  actions: read
  security-events: write

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      force_redeploy:
        description: 'Force redeploy all services'
        required: false
        default: false
        type: boolean

env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}

jobs:
  deploy-to-kubernetes:
    name: Deploy to AKS
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.3'

      - name: Get AKS cluster info
        id: aks-info
        run: |
          # Get cluster info from resource group
          RESOURCE_GROUP="policycortex-rg-${{ env.ENVIRONMENT }}"
          CLUSTER_NAME="policycortex-aks-${{ env.ENVIRONMENT }}"
          ACR_NAME="policycortex${{ env.ENVIRONMENT }}acr"
          
          echo "resource_group=$RESOURCE_GROUP" >> $GITHUB_OUTPUT
          echo "cluster_name=$CLUSTER_NAME" >> $GITHUB_OUTPUT
          echo "acr_name=$ACR_NAME" >> $GITHUB_OUTPUT
          
          # Check if cluster exists
          if az aks show --resource-group "$RESOURCE_GROUP" --name "$CLUSTER_NAME" &>/dev/null; then
            echo "cluster_exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ AKS cluster found: $CLUSTER_NAME"
          else
            echo "cluster_exists=false" >> $GITHUB_OUTPUT
            echo "‚ùå AKS cluster not found: $CLUSTER_NAME"
          fi

      - name: Configure kubectl
        if: steps.aks-info.outputs.cluster_exists == 'true'
        run: |
          echo "Configuring kubectl for cluster: ${{ steps.aks-info.outputs.cluster_name }}"
          az aks get-credentials \
            --resource-group "${{ steps.aks-info.outputs.resource_group }}" \
            --name "${{ steps.aks-info.outputs.cluster_name }}" \
            --overwrite-existing
          
          # Verify connection
          kubectl cluster-info
          kubectl get nodes

      - name: Build and Push Images
        if: steps.aks-info.outputs.cluster_exists == 'true'
        run: |
          echo "Building and pushing container images..."
          ACR_NAME="${{ steps.aks-info.outputs.acr_name }}"
          
          # Login to ACR
          az acr login --name "$ACR_NAME"
          
          # Build and push all service images
          services=("api-gateway" "azure-integration" "ai-engine" "data-processing" "conversation" "notification")
          
          for service in "${services[@]}"; do
            echo "Building $service..."
            service_dir="backend/services/${service//-/_}"  # Replace hyphens with underscores for directory names
            
            if [ -f "$service_dir/Dockerfile" ]; then
              docker build -t "$ACR_NAME.azurecr.io/policycortex-$service:latest" \
                --build-arg SERVICE_NAME="$service" \
                -f "$service_dir/Dockerfile" backend/
              
              docker push "$ACR_NAME.azurecr.io/policycortex-$service:latest"
              echo "‚úÖ $service image pushed successfully"
            else
              echo "‚ö†Ô∏è Dockerfile not found for $service at $service_dir/Dockerfile"
            fi
          done

      - name: Create Kubernetes Secrets
        if: steps.aks-info.outputs.cluster_exists == 'true'
        run: |
          echo "Creating Kubernetes secrets..."
          
          # Create namespace if it doesn't exist
          kubectl create namespace policycortex --dry-run=client -o yaml | kubectl apply -f -
          
          # Create secrets from Azure Key Vault or environment variables
          kubectl create secret generic policycortex-secrets \
            --from-literal=database-url="${{ secrets.DATABASE_URL }}" \
            --from-literal=redis-url="${{ secrets.REDIS_URL }}" \
            --from-literal=jwt-secret-key="${{ secrets.JWT_SECRET_KEY }}" \
            --from-literal=azure-client-id="${{ secrets.AZURE_CLIENT_ID }}" \
            --from-literal=azure-client-secret="${{ secrets.AZURE_CLIENT_SECRET }}" \
            --from-literal=azure-tenant-id="${{ secrets.AZURE_TENANT_ID }}" \
            --from-literal=azure-subscription-id="${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            --from-literal=azure-openai-endpoint="${{ secrets.AZURE_OPENAI_ENDPOINT }}" \
            --from-literal=azure-openai-key="${{ secrets.AZURE_OPENAI_KEY }}" \
            --from-literal=azure-cognitive-services-key="${{ secrets.AZURE_COGNITIVE_SERVICES_KEY }}" \
            --from-literal=azure-cognitive-services-endpoint="${{ secrets.AZURE_COGNITIVE_SERVICES_ENDPOINT }}" \
            --from-literal=azure-storage-connection-string="${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
            --from-literal=cosmos-db-connection-string="${{ secrets.COSMOS_DB_CONNECTION_STRING }}" \
            --namespace=policycortex \
            --dry-run=client -o yaml | kubectl apply -f -
          
          echo "‚úÖ Secrets created successfully"

      - name: Deploy Applications
        if: steps.aks-info.outputs.cluster_exists == 'true'
        run: |
          echo "Deploying applications to Kubernetes..."
          
          export ACR_NAME="${{ steps.aks-info.outputs.acr_name }}"
          export ENVIRONMENT="${{ env.ENVIRONMENT }}"
          
          cd infrastructure/kubernetes
          
          # Make deployment script executable
          chmod +x deploy.sh
          
          # Deploy all services
          ./deploy.sh
          
          echo "‚úÖ Applications deployed successfully"

      - name: Verify Deployment
        if: steps.aks-info.outputs.cluster_exists == 'true'
        run: |
          echo "Verifying deployment..."
          
          # Wait for deployments to be ready
          kubectl wait --for=condition=available --timeout=300s deployment --all -n policycortex
          
          # Show deployment status
          echo "=== Deployment Status ==="
          kubectl get deployments -n policycortex
          
          echo "=== Pod Status ==="
          kubectl get pods -n policycortex
          
          echo "=== Service Status ==="
          kubectl get services -n policycortex
          
          echo "=== Ingress Status ==="
          kubectl get ingress -n policycortex
          
          echo "‚úÖ All deployments are ready"

      - name: Get Access Information
        if: steps.aks-info.outputs.cluster_exists == 'true'
        run: |
          echo "=================================="
          echo "üéâ Kubernetes Deployment Complete!"
          echo "=================================="
          echo "‚úÖ All services deployed to AKS cluster:"
          echo "   ‚Ä¢ Cluster: ${{ steps.aks-info.outputs.cluster_name }}"
          echo "   ‚Ä¢ Namespace: policycortex"
          echo "   ‚Ä¢ Registry: ${{ steps.aks-info.outputs.acr_name }}.azurecr.io"
          echo ""
          echo "üîó Access Commands:"
          echo "   kubectl config get-contexts"
          echo "   kubectl get pods -n policycortex"
          echo "   kubectl logs -f deployment/api-gateway -n policycortex"
          echo ""
          echo "üåê Services:"
          kubectl get services -n policycortex -o wide
          echo ""
          echo "üì± Access URLs:"
          kubectl get ingress -n policycortex
          echo "=================================="

      - name: Handle Missing Cluster
        if: steps.aks-info.outputs.cluster_exists == 'false'
        run: |
          echo "‚ùå AKS cluster not found!"
          echo "Please deploy the infrastructure first using the Terraform pipeline:"
          echo "1. Go to Actions"
          echo "2. Run 'Terraform Infrastructure Deployment'"
          echo "3. Select environment: ${{ env.ENVIRONMENT }}"
          echo "4. Select action: apply"
          echo ""
          echo "Expected cluster: ${{ steps.aks-info.outputs.cluster_name }}"
          echo "Expected resource group: ${{ steps.aks-info.outputs.resource_group }}"
          exit 1