name: Optimized CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      deploy_env:
        description: 'Environment to deploy'
        required: false
        default: 'none'
        type: choice
        options:
          - none
          - dev
          - prod

env:
  REGISTRY_DEV: crpcxdev.azurecr.io
  REGISTRY_PROD: crcortexprodvb9v2h.azurecr.io
  IMAGE_TAG: ${{ github.sha }}

jobs:
  # Fast path detection - determines what needs to be built/tested
  changes:
    name: Detect Changes
    runs-on: self-hosted
    outputs:
      core: ${{ steps.filter.outputs.core }}
      frontend: ${{ steps.filter.outputs.frontend }}
      graphql: ${{ steps.filter.outputs.graphql }}
      infrastructure: ${{ steps.filter.outputs.infrastructure }}
      docs: ${{ steps.filter.outputs.docs }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            core:
              - 'core/**'
              - 'Cargo.*'
              - 'rust-toolchain.toml'
            frontend:
              - 'frontend/**'
              - 'package*.json'
            graphql:
              - 'graphql/**'
            infrastructure:
              - 'infrastructure/**'
              - '.github/workflows/**'
            docs:
              - '**/*.md'
              - 'docs/**'

  # Parallel security scans - run concurrently, don't block on failures
  security-scans:
    name: Security - ${{ matrix.scan }}
    runs-on: self-hosted
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        scan: [trivy, licenses, secrets]
      fail-fast: false
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      
      - name: Run ${{ matrix.scan }} scan
        run: |
          case "${{ matrix.scan }}" in
            trivy)
              echo "Running Trivy security scan..."
              docker run --rm -v "$PWD":/src \
                aquasec/trivy:latest fs /src \
                --severity HIGH,CRITICAL \
                --exit-code 0 || true
              ;;
            licenses)
              echo "Checking licenses..."
              # Quick license check
              find . -name "package.json" -o -name "Cargo.toml" | \
                xargs grep -h "license" || true
              ;;
            secrets)
              echo "Scanning for secrets..."
              # Basic secret scanning
              grep -r --include="*.js" --include="*.ts" --include="*.rs" \
                -E "(api_key|secret|password|token)" . | \
                grep -v -E "(test|mock|example)" | head -20 || true
              ;;
          esac

  # Smart testing - only test what changed
  test-core:
    name: Test Core
    runs-on: self-hosted
    needs: changes
    if: needs.changes.outputs.core == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Run tests
        run: |
          cd core
          cargo test --all-features
          cargo clippy -- -D warnings

  test-frontend:
    name: Test Frontend
    runs-on: self-hosted
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install and test
        run: |
          cd frontend
          npm ci --legacy-peer-deps
          npm run lint
          npm run type-check
          npm test -- --passWithNoTests

  # Conditional builds - only build what changed and passed tests
  build:
    name: Build ${{ matrix.service }}
    runs-on: self-hosted
    needs: [changes, test-core, test-frontend]
    if: |
      always() && 
      (github.event_name == 'push' || github.event.inputs.deploy_env != 'none')
    strategy:
      matrix:
        include:
          - service: core
            condition: needs.changes.outputs.core == 'true'
            context: ./core
            dockerfile: ./core/Dockerfile
          - service: frontend
            condition: needs.changes.outputs.frontend == 'true'
            context: ./frontend
            dockerfile: ./frontend/Dockerfile
          - service: graphql
            condition: needs.changes.outputs.graphql == 'true'
            context: ./graphql
            dockerfile: ./graphql/Dockerfile
    steps:
      - uses: actions/checkout@v4
      
      - name: Check if build needed
        id: should_build
        run: |
          if [[ "${{ matrix.condition }}" == "true" ]] || \
             [[ "${{ github.event.inputs.deploy_env }}" != "none" ]]; then
            echo "build=true" >> $GITHUB_OUTPUT
          else
            echo "build=false" >> $GITHUB_OUTPUT
            echo "Skipping build for ${{ matrix.service }} - no changes detected"
          fi
      
      - name: Check Docker availability
        if: steps.should_build.outputs.build == 'true'
        id: docker_check
        run: |
          if command -v docker >/dev/null 2>&1 && docker info >/dev/null 2>&1; then
            echo "available=true" >> $GITHUB_OUTPUT
          else
            echo "available=false" >> $GITHUB_OUTPUT
            echo "::warning::Docker not available - skipping build"
          fi
      
      - name: Build and push
        if: steps.should_build.outputs.build == 'true' && steps.docker_check.outputs.available == 'true'
        run: |
          echo "Building ${{ matrix.service }}..."
          # Build logic here

  # Terraform - Plan only for PRs, Apply only for main branch
  infrastructure:
    name: Infrastructure
    runs-on: self-hosted
    needs: changes
    if: needs.changes.outputs.infrastructure == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"
      
      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init
      
      - name: Terraform Plan
        run: |
          cd infrastructure/terraform
          terraform plan -out=tfplan
      
      - name: Save plan for review
        if: github.event_name == 'pull_request'
        run: |
          cd infrastructure/terraform
          terraform show -no-color tfplan > plan.txt
          echo "### Terraform Plan" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          head -100 plan.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
      
      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          cd infrastructure/terraform
          terraform apply tfplan

  # Smart deployment - only deploy if necessary
  deploy:
    name: Deploy to ${{ github.event.inputs.deploy_env || 'dev' }}
    runs-on: self-hosted
    needs: [build, infrastructure]
    if: |
      always() &&
      (github.event_name == 'push' || github.event.inputs.deploy_env != 'none')
    environment: ${{ github.event.inputs.deploy_env || 'development' }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Determine deployment scope
        id: scope
        run: |
          echo "Determining what needs to be deployed..."
          # Logic to determine which services need deployment
      
      - name: Deploy services
        run: |
          echo "Deploying to ${{ github.event.inputs.deploy_env || 'dev' }}..."
          # Deployment logic here

  # Summary job - provides clear status
  summary:
    name: Pipeline Summary
    runs-on: self-hosted
    if: always()
    needs: [changes, security-scans, test-core, test-frontend, build, infrastructure, deploy]
    steps:
      - name: Generate Summary
        run: |
          echo "## Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Changes Detected" >> $GITHUB_STEP_SUMMARY
          echo "- Core: ${{ needs.changes.outputs.core || 'false' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: ${{ needs.changes.outputs.frontend || 'false' }}" >> $GITHUB_STEP_SUMMARY
          echo "- GraphQL: ${{ needs.changes.outputs.graphql || 'false' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Infrastructure: ${{ needs.changes.outputs.infrastructure || 'false' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- Core Tests: ${{ needs.test-core.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend Tests: ${{ needs.test-frontend.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Security Scans" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ needs.security-scans.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Calculate time saved
          echo "### Optimization Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- Jobs skipped due to no changes: X" >> $GITHUB_STEP_SUMMARY
          echo "- Estimated time saved: Y minutes" >> $GITHUB_STEP_SUMMARY