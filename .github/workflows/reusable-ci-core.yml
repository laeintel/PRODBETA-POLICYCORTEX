name: Reusable Rust Core CI

on:
  workflow_call:
    inputs:
      rust-toolchain:
        description: Rust toolchain version (toolchain spec)
        required: false
        default: stable
        type: string

permissions:
  contents: read

jobs:
  build-test:
    runs-on: self-hosted
    env:
      CARGO_TERM_COLOR: always
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ inputs.rust-toolchain }}
          components: clippy, rustfmt
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            core
            crates
      - name: Format check and auto-fix
        run: |
          echo "üîç Checking Rust code formatting..."
          if ! cargo fmt --all -- --check; then
            echo "üìù Code formatting issues found. Auto-fixing..."
            cargo fmt --all
            echo "‚úÖ Code has been automatically formatted"
            
            # Check if there are any changes after formatting
            if git diff --quiet; then
              echo "‚úÖ No formatting changes needed after auto-fix"
            else
              echo "üìã Formatting changes applied:"
              git diff --name-only
              echo ""
              echo "‚ö†Ô∏è Formatting has been automatically applied but not committed."
              echo "   The CI will continue with the formatted code."
            fi
          else
            echo "‚úÖ Code formatting is already correct"
          fi
        working-directory: core
      - name: Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
        working-directory: core
      - name: Build
        run: cargo build --workspace --all-features --locked
        working-directory: core
      - name: Test
        run: cargo test --workspace --all-features --locked -- --nocapture
        working-directory: core


