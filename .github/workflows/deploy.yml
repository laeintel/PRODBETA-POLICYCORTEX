name: Deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and push Docker images
  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      # Build Frontend
      - name: Build and push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:buildcache,mode=max
          build-args: |
            NEXT_PUBLIC_DEMO_MODE=false
            USE_REAL_DATA=true

      # Build Mock Server (as backup)
      - name: Build and push Mock Server
        run: |
          cat > Dockerfile.mock << 'EOF'
          FROM node:20-alpine
          WORKDIR /app
          COPY mock-server.js .
          COPY mock-server-pcg.js .
          RUN npm init -y && npm install express cors body-parser
          EXPOSE 8080
          CMD ["node", "mock-server.js"]
          EOF
          
          docker build -f Dockerfile.mock -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/mock-server:latest .
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/mock-server:latest

  # Deploy to environment
  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'staging' }}
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to environment
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"
          echo "Deploying to ${ENVIRONMENT} environment"
          
          # Here you would add actual deployment commands
          # For now, just echo what would be deployed
          echo "Would deploy:"
          echo "- Frontend: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest"
          echo "- Mock Server: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/mock-server:latest"
          
          # Example deployment commands (uncomment when ready):
          # kubectl apply -f k8s/${ENVIRONMENT}/
          # helm upgrade --install policycortex ./charts/policycortex --namespace ${ENVIRONMENT}
          # az webapp deployment container config --name policycortex-${ENVIRONMENT} --resource-group rg-policycortex

      - name: Verify deployment
        run: |
          echo "Deployment verification would happen here"
          # curl -f https://policycortex-${ENVIRONMENT}.azurewebsites.net/api/healthz

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
          fi