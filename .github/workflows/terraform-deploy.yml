name: Terraform Infrastructure Deployment

defaults:
  run:
    shell: bash

permissions:
  contents: read
  actions: read
  security-events: write
  issues: write
  pull-requests: write

on:
  # Manual trigger only - Terraform deployments require manual approval
  workflow_dispatch:  # Manual trigger only
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Terraform action'
        required: true
        default: 'apply'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  TF_VAR_environment: ${{ github.event.inputs.environment || 'dev' }}
  TF_VAR_deploy_kubernetes: true
  TF_VAR_deploy_container_apps: false
  TF_VAR_kubernetes_enable_auto_scaling: true
  TF_VAR_kubernetes_enable_ai_node_pool: true

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.3'

      - name: Terraform Init
        id: tf-init
        run: |
          cd infrastructure/terraform
          terraform init \
            -backend-config="resource_group_name=rg-policycortex-tfstate" \
            -backend-config="storage_account_name=stpolicycortextfstate" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=terraform.tfstate"

      - name: Terraform Validate
        id: tf-validate
        run: |
          cd infrastructure/terraform
          terraform validate

      - name: Terraform Plan
        id: tf-plan
        run: |
          cd infrastructure/terraform
          export exitcode=0
          terraform plan -detailed-exitcode -no-color -out tfplan \
            -var="deploy_kubernetes=true" \
            -var="deploy_container_apps=false" \
            -var="kubernetes_enable_auto_scaling=true" \
            -var="kubernetes_node_count=3" \
            -var="kubernetes_min_node_count=2" \
            -var="kubernetes_max_node_count=10" \
            -var="kubernetes_enable_ai_node_pool=true" \
            || export exitcode=$?
          
          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
          
          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else 
            exit 0
          fi

      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: infrastructure/terraform/tfplan

      - name: Create String Output
        id: tf-plan-string
        run: |
          cd infrastructure/terraform
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)
          
          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

      - name: Comment PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const run_url = process.env.GITHUB_SERVER_URL + '/' + process.env.GITHUB_REPOSITORY + '/actions/runs/' + process.env.GITHUB_RUN_ID
            const run_link = '<a href="' + run_url + '">Actions</a>.'
            const fs = require('fs')
            const plan_file = fs.readFileSync('infrastructure/terraform/tfplan.txt', 'utf8')
            const plan = plan_file.length > 65000 ? plan_file.toString().substring(0, 65000) + " ..." : plan_file
            const truncated_message = plan_file.length > 65000 ? "Output is too long and was truncated. You can read full Plan in " + run_link + "<br /><br />" : ""
            const output = `#### Terraform Format and Style üñå\`${{ steps.tf-fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.tf-init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.tf-validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.tf-validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.tf-plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${plan}
            \`\`\`
            
            </details>
            ${truncated_message}
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`infrastructure/terraform\`, Workflow: \`${{ github.workflow }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [terraform-plan]
    if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplanExitCode == 2
    environment: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.3'

      - name: Terraform Init
        id: tf-init
        run: |
          cd infrastructure/terraform
          terraform init \
            -backend-config="resource_group_name=rg-policycortex-tfstate" \
            -backend-config="storage_account_name=stpolicycortextfstate" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=terraform.tfstate"

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: infrastructure/terraform/

      - name: Terraform Apply
        run: |
          cd infrastructure/terraform
          echo "Applying Terraform changes to deploy AKS cluster and infrastructure..."
          terraform apply -auto-approve tfplan
          echo "‚úÖ Terraform apply completed - AKS cluster and Kubernetes infrastructure deployed"

      - name: Display Deployment Summary
        run: |
          echo "=================================="
          echo "üéâ Kubernetes Infrastructure Deployment Complete!"
          echo "=================================="
          echo "‚úÖ AKS cluster deployed with:"
          echo "   ‚Ä¢ Auto-scaling enabled (2-10 nodes)"
          echo "   ‚Ä¢ AI node pool with GPU support"
          echo "   ‚Ä¢ Integration with ACR and Key Vault"
          echo "   ‚Ä¢ Log Analytics monitoring"
          echo ""
          echo "üìù Next Steps:"
          echo "   1. Configure kubectl: az aks get-credentials --resource-group <rg> --name <cluster>"
          echo "   2. Deploy applications: cd infrastructure/kubernetes && ./deploy.sh"
          echo "   3. Set environment variables: export ACR_NAME=<your-acr>"
          echo ""
          echo "üîó Infrastructure Ready For:"
          echo "   ‚Ä¢ API Gateway deployment"
          echo "   ‚Ä¢ Azure Integration service" 
          echo "   ‚Ä¢ AI Engine with GPU support"
          echo "   ‚Ä¢ Data Processing pipelines"
          echo "   ‚Ä¢ Conversation service"
          echo "   ‚Ä¢ Notification service"
          echo "=================================="

      - name: Get AKS Credentials
        run: |
          echo "Getting AKS cluster credentials..."
          cd infrastructure/terraform
          CLUSTER_NAME=$(terraform output -raw kubernetes_cluster_name 2>/dev/null || echo "")
          RESOURCE_GROUP=$(terraform output -raw resource_group_name 2>/dev/null || echo "")
          
          if [ -n "$CLUSTER_NAME" ] && [ -n "$RESOURCE_GROUP" ]; then
            echo "Configuring kubectl for cluster: $CLUSTER_NAME in RG: $RESOURCE_GROUP"
            az aks get-credentials --resource-group "$RESOURCE_GROUP" --name "$CLUSTER_NAME" --overwrite-existing
            kubectl cluster-info
            kubectl get nodes
          else
            echo "Unable to retrieve cluster information from Terraform outputs"
          fi

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.3'

      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init \
            -backend-config="resource_group_name=rg-policycortex-tfstate" \
            -backend-config="storage_account_name=stpolicycortextfstate" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=terraform.tfstate"

      - name: Terraform Destroy
        run: |
          cd infrastructure/terraform
          terraform destroy -auto-approve