name: Monorepo CI Entry

# SMART CI/CD PIPELINE WITH SELECTIVE TESTING
# This workflow runs components based on:
# 1. Changed files (automatic detection)
# 2. Manual switches (workflow_dispatch inputs)
# 3. Security checks always run for safety
# 4. Full pipeline available via "full_run" option

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      full_run:
        description: 'Run entire pipeline (ignore path filters and include app pipeline)'
        required: false
        default: false
        type: boolean
      test_frontend:
        description: 'Run Frontend CI testing (Next.js build, test, lint)'
        required: false
        default: false
        type: boolean
      test_core:
        description: 'Run Core CI testing (Rust build, test, fmt, clippy)'
        required: false
        default: false
        type: boolean
      test_graphql:
        description: 'Run GraphQL gateway testing'
        required: false
        default: false
        type: boolean
      test_backend:
        description: 'Run Backend services testing (Python)'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  actions: write
  security-events: write
  id-token: write
  packages: write

concurrency:
  group: monorepo-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  runner-setup:
    name: Configure runner environment
    runs-on: self-hosted
    steps:
      - name: Check and configure passwordless sudo
        run: |
          echo "🔧 Checking runner sudo configuration..."
          
          if sudo -n true 2>/dev/null; then
            echo "✅ Passwordless sudo already configured"
          else
            echo "⚠️ Passwordless sudo not configured"
            echo "🔧 Attempting to configure passwordless sudo for runner..."
            
            # Try to add runner to sudoers without password
            echo "runner ALL=(ALL) NOPASSWD:ALL" | sudo tee -a /etc/sudoers.d/runner 2>/dev/null || {
              echo "❌ Cannot configure passwordless sudo automatically"
              echo "📋 Manual setup required:"
              echo "   1. Run: sudo visudo"
              echo "   2. Add: runner ALL=(ALL) NOPASSWD:ALL"
              echo "   Or run: echo 'runner ALL=(ALL) NOPASSWD:ALL' | sudo tee /etc/sudoers.d/runner"
              echo ""
              echo "🔄 Continuing without sudo for now..."
            }
            
            # Verify sudo configuration
            if sudo -n true 2>/dev/null; then
              echo "✅ Passwordless sudo now configured"
            else
              echo "⚠️ Still no passwordless sudo - will attempt fixes without elevated privileges"
            fi
          fi

  docker-health-check:
    name: Docker health check and auto-fix
    runs-on: self-hosted
    needs: runner-setup
    steps:
      - name: Check Docker repository health
        id: docker_check
        continue-on-error: true
        run: |
          echo "🔍 Checking Docker repository configuration..."
          
          # Check for corrupted entries with pipe characters
          if grep -r "download\.docker\.com.*|" /etc/apt/sources.list* 2>/dev/null; then
            echo "❌ Found corrupted Docker repository entries with pipe characters"
            echo "corrupted=true" >> $GITHUB_OUTPUT
          else
            echo "✅ No corrupted pipe entries found"
            echo "corrupted=false" >> $GITHUB_OUTPUT
          fi
          
          # Also check for any docker.com entries that might be malformed
          if grep -r "download\.docker\.com" /etc/apt/sources.list* 2>/dev/null | grep "|"; then
            echo "❌ Found malformed Docker repository entries"
            echo "corrupted=true" >> $GITHUB_OUTPUT
          fi
          
          # Try to update package list
          if ! sudo apt-get update 2>&1; then
            echo "❌ apt-get update failed"
            echo "update_failed=true" >> $GITHUB_OUTPUT
          else
            echo "✅ apt-get update succeeded" 
            echo "update_failed=false" >> $GITHUB_OUTPUT
          fi

      - name: Auto-fix Docker repository issues
        if: steps.docker_check.outputs.corrupted == 'true' || steps.docker_check.outputs.update_failed == 'true'
        run: |
          echo "🔧 Auto-fixing Docker repository issues..."
          
          # Check if we have sudo access without password
          if ! sudo -n true 2>/dev/null; then
            echo "⚠️ No passwordless sudo access. Checking if we can fix files with current permissions..."
            
            # Try to fix files that are writable by current user
            if [ -w /etc/apt/sources.list.d/ ] 2>/dev/null; then
              echo "✅ Have write access to sources.list.d"
            else
              echo "❌ No write access to APT configuration. Manual intervention required."
              echo "   The self-hosted runner needs passwordless sudo configured."
              echo "   Run: sudo visudo and add: runner ALL=(ALL) NOPASSWD:ALL"
              exit 1
            fi
          else
            echo "✅ Passwordless sudo access confirmed"
          fi
          
          # Show current problematic entries
          echo "🔍 Current problematic entries:"
          grep -r "docker.com" /etc/apt/sources.list* 2>/dev/null | grep "|" || echo "No pipe entries found in grep"
          
          # Function to run command with or without sudo
          run_cmd() {
            if sudo -n true 2>/dev/null; then
              sudo "$@"
            else
              "$@"
            fi
          }
          
          # Remove all Docker-related repository files
          echo "🧹 Removing ALL Docker repository configurations..."
          run_cmd rm -f /etc/apt/sources.list.d/docker*.list || true
          run_cmd rm -f /etc/apt/keyrings/docker*.gpg || true
          run_cmd rm -f /etc/apt/trusted.gpg.d/docker*.gpg || true
          run_cmd rm -f /usr/share/keyrings/docker*.gpg || true
          
          # More aggressive pipe character removal
          echo "🧹 Removing corrupted entries from all sources..."
          
          # Target the specific malformed URL pattern
          run_cmd sed -i '/https:\/\/download\.docker\.com\/linux\/ubuntu.*|/d' /etc/apt/sources.list || true
          run_cmd sed -i '/download\.docker\.com.*|/d' /etc/apt/sources.list || true
          run_cmd sed -i '/docker\.com.*|/d' /etc/apt/sources.list || true
          
          # Clean all sources.list.d files more aggressively
          for file in /etc/apt/sources.list.d/*.list; do
            if [ -f "$file" ]; then
              echo "Cleaning $file..."
              # Multiple patterns to catch all variations
              run_cmd sed -i '/https:\/\/download\.docker\.com\/linux\/ubuntu.*|/d' "$file" || true
              run_cmd sed -i '/download\.docker\.com.*|/d' "$file" || true
              run_cmd sed -i '/docker\.com.*|/d' "$file" || true
              run_cmd sed -i '/docker.*|.*noble/d' "$file" || true
              # Remove any line containing both docker and pipe character
              run_cmd sed -i '/docker.*|/d' "$file" || true
              run_cmd sed -i '/|.*docker/d' "$file" || true
            fi
          done
          
          # Clean package cache completely
          echo "🧹 Cleaning package cache completely..."
          run_cmd apt-get clean || true
          run_cmd rm -rf /var/lib/apt/lists/* || true
          run_cmd rm -rf /var/cache/apt/archives/* || true
          
          # Verify problematic entries are gone
          echo "🔍 Verifying cleanup..."
          if grep -r "docker.*|" /etc/apt/sources.list* 2>/dev/null; then
            echo "❌ Still found problematic entries, trying nuclear option..."
            
            # Nuclear option: completely remove the problematic file
            if [ -f "/etc/apt/sources.list.d/docker.list" ]; then
              echo "🗑️ Completely removing /etc/apt/sources.list.d/docker.list"
              run_cmd rm -f /etc/apt/sources.list.d/docker.list
            fi
            
            # Remove any file containing the pipe character pattern
            for file in /etc/apt/sources.list.d/*.list; do
              if [ -f "$file" ] && grep -q "docker.*|" "$file" 2>/dev/null; then
                echo "🗑️ Removing corrupted file: $file"
                run_cmd rm -f "$file"
              fi
            done
          else
            echo "✅ No more pipe character entries found"
          fi
          
          # Update package index
          echo "📦 Updating package index..."
          if run_cmd apt-get update; then
            echo "✅ Package index updated successfully"
          else
            echo "❌ Package index update still failing"
            echo "🔍 Checking remaining issues..."
            run_cmd apt-get update 2>&1 | head -10
          fi
          
          echo "✅ Docker repository auto-fix completed"

  detect-changes:
    name: Detect changed areas
    runs-on: self-hosted
    needs: [runner-setup, docker-health-check]
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      rust_core: ${{ steps.filter.outputs.rust_core }}
      graphql: ${{ steps.filter.outputs.graphql }}
      backend: ${{ steps.filter.outputs.backend }}
      infrastructure: ${{ steps.filter.outputs.infrastructure }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Paths filter
        id: filter
        uses: dorny/paths-filter@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            frontend:
              - 'frontend/**'
            rust_core:
              - 'core/**'
              - 'crates/**'
            graphql:
              - 'graphql/**'
            backend:
              - 'backend/**'
            infrastructure:
              - 'infrastructure/**'

  frontend:
    name: Frontend CI
    needs: [runner-setup, docker-health-check, detect-changes]
    # Only run if explicitly requested via workflow_dispatch or on push/PR when frontend files changed
    if: (github.event_name == 'workflow_dispatch' && (inputs.full_run || inputs.test_frontend)) || (github.event_name != 'workflow_dispatch' && needs.detect-changes.outputs.frontend == 'true')
    uses: ./.github/workflows/reusable-ci-frontend.yml
    secrets: inherit
    with:
      node-version: '20'
      working-directory: 'frontend'

  core:
    name: Core (Rust) CI
    needs: [runner-setup, docker-health-check, detect-changes]
    # Only run if explicitly requested via workflow_dispatch or on push/PR when core files changed
    if: (github.event_name == 'workflow_dispatch' && (inputs.full_run || inputs.test_core)) || (github.event_name != 'workflow_dispatch' && needs.detect-changes.outputs.rust_core == 'true')
    uses: ./.github/workflows/reusable-ci-core.yml
    secrets: inherit

  graphql:
    name: GraphQL gateway CI
    needs: [runner-setup, docker-health-check, detect-changes]
    # Only run if explicitly requested via workflow_dispatch or on push/PR when graphql files changed
    if: (github.event_name == 'workflow_dispatch' && (inputs.full_run || inputs.test_graphql)) || (github.event_name != 'workflow_dispatch' && needs.detect-changes.outputs.graphql == 'true')
    uses: ./.github/workflows/reusable-ci-frontend.yml
    with:
      node-version: '20'
      working-directory: 'graphql'
    secrets: inherit

  backend:
    name: Backend Services CI
    needs: [runner-setup, docker-health-check, detect-changes]
    # Only run if explicitly requested via workflow_dispatch or on push/PR when backend files changed
    if: (github.event_name == 'workflow_dispatch' && (inputs.full_run || inputs.test_backend)) || (github.event_name != 'workflow_dispatch' && needs.detect-changes.outputs.backend == 'true')
    uses: ./.github/workflows/reusable-ci-frontend.yml
    with:
      node-version: '20'
      working-directory: 'backend'
    secrets: inherit

  security:
    name: Security & Secrets
    needs: [runner-setup, docker-health-check, detect-changes]
    # ALWAYS RUN - Complete pipeline from A-Z
    if: always()
    uses: ./.github/workflows/reusable-security.yml
    permissions:
      contents: read
      security-events: write
    secrets: inherit

  supply_chain:
    name: Supply Chain Security
    needs: [runner-setup, docker-health-check, detect-changes]
    # ALWAYS RUN - Complete pipeline from A-Z
    if: always()
    uses: ./.github/workflows/supply-chain.yml
    permissions:
      contents: read
      actions: write
      security-events: write
    secrets: inherit

  secret_scan:
    name: Secret Scan (Gitleaks)
    needs: [runner-setup, docker-health-check, detect-changes]
    # ALWAYS RUN - Complete pipeline from A-Z
    if: always()
    uses: ./.github/workflows/secret-scan.yml
    permissions:
      contents: read
      security-events: write
    secrets: inherit

  infra:
    name: Azure Infrastructure
    needs: [runner-setup, docker-health-check, detect-changes]
    # ALWAYS RUN - Complete pipeline from A-Z
    if: always()
    uses: ./.github/workflows/azure-infra.yml
    permissions:
      contents: read
      id-token: write
    with:
      environment: 'dev'
      apply: true
    secrets: inherit

  app_pipeline:
    name: Application CI/CD
    needs: [frontend, core, graphql, backend, security, supply_chain, secret_scan, infra]
    # Run when full_run is requested or on main branch pushes (but only if security checks pass)
    if: (github.event_name == 'workflow_dispatch' && inputs.full_run) || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    uses: ./.github/workflows/application.yml
    permissions:
      contents: read
      actions: read
      packages: write
    with:
      target_env: 'dev'
      run_tests: true
      force_deploy: false
      full_run: ${{ inputs.full_run || 'false' }}
    secrets: inherit

  deploy_tag:
    name: Deploy from Tag
    needs: [frontend, core, graphql, backend, security, supply_chain, secret_scan, infra, app_pipeline]
    # Only deploy for tags - but ensure all previous steps ran
    if: startsWith(github.ref, 'refs/tags/v')
    uses: ./.github/workflows/deploy.yml
    with:
      from_tag: ${{ github.ref_name }}
    secrets: inherit


