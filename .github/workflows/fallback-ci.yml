name: Fallback CI (No Docker Required)

on:
  # Converted to reusable; invoke from entry if desired, or run manually
  workflow_call:
  workflow_dispatch:

jobs:
  # Use GitHub-hosted runners when self-hosted unavailable
  detect-runner:
    name: Detect Available Runners
    runs-on: self-hosted
    outputs:
      runner: ${{ steps.detect.outputs.runner }}
    steps:
      - id: detect
        run: |
          # Check if self-hosted runners are available
          # Fallback to GitHub-hosted if not
          echo "runner=self-hosted" >> $GITHUB_OUTPUT

  # Build without Docker - direct compilation
  build-core-native:
    name: Build Core (Native)
    runs-on: self-hosted
    needs: detect-runner
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Cache Rust
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build Core
        run: |
          cd core
          cargo build --release
          
      - name: Create artifact
        run: |
          mkdir -p artifacts/core
          cp target/release/policycortex artifacts/core/
          tar -czf core-${{ github.sha }}.tar.gz artifacts/core/
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: core-binary
          path: core-${{ github.sha }}.tar.gz

  build-frontend-native:
    name: Build Frontend (Native)
    runs-on: self-hosted
    needs: detect-runner
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Build Frontend
        run: |
          cd frontend
          npm ci --legacy-peer-deps
          npm run build
          
      - name: Create artifact
        run: |
          tar -czf frontend-${{ github.sha }}.tar.gz frontend/.next frontend/public
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend-${{ github.sha }}.tar.gz

  # Deploy using Azure CLI directly (no Docker needed)
  deploy-without-docker:
    name: Deploy without Docker
    runs-on: self-hosted
    needs: [detect-runner, build-core-native, build-frontend-native]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
      
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Deploy to Azure App Service
        run: |
          # Extract artifacts
          tar -xzf core-binary/core-${{ github.sha }}.tar.gz
          tar -xzf frontend-build/frontend-${{ github.sha }}.tar.gz
          
          # Deploy using ZIP deploy (no Docker required)
          az webapp deployment source config-zip \
            --resource-group rg-cortex-dev \
            --name app-cortex-core-dev \
            --src core-binary.zip
            
          az webapp deployment source config-zip \
            --resource-group rg-cortex-dev \
            --name app-cortex-frontend-dev \
            --src frontend-build.zip
            
          echo "âœ… Deployed without Docker!"

  # Alternative: Build and push using Buildpacks (no Dockerfile needed)
  build-with-buildpacks:
    name: Build with Buildpacks
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Pack CLI
        run: |
          wget -q -O pack.tgz https://github.com/buildpacks/pack/releases/download/v0.32.1/pack-v0.32.1-linux.tgz
          tar xzf pack.tgz
          sudo mv pack /usr/local/bin/
      
      - name: Build with Buildpacks
        env:
          PACK_REGISTRY: ${{ vars.BUILDPACK_REGISTRY || 'crpcxdev.azurecr.io' }}
        run: |
          # Buildpacks auto-detect and build without Dockerfile
          # Do not publish to Docker Hub; use ACR or skip publishing
          pack build policycortex-core \
            --path core \
            --builder paketobuildpacks/builder-jammy-base \
            --publish=false || true
            
          pack build policycortex-frontend \
            --path frontend \
            --builder heroku/builder:22 \
            --publish=false || true