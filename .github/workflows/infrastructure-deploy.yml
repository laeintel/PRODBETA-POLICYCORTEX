name: Infrastructure Deployment

permissions:
  contents: read
  actions: read
  security-events: write
  issues: write
  pull-requests: write

on:
  push:
    branches: [ main ]
    paths:
      - 'infrastructure/**'
      - '.github/workflows/infrastructure-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'infrastructure/**'
      - '.github/workflows/infrastructure-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      terraform_action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.8.0'
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: infrastructure/terraform
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -backend=false
        working-directory: infrastructure/terraform

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: infrastructure/terraform

      - name: Comment PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          FMT: "terraform fmt ${{ steps.fmt.outcome }}"
          INIT: "terraform init ${{ steps.init.outcome }}"
          VALIDATE: "terraform validate ${{ steps.validate.outcome }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            
            <details><summary>Validation Output</summary>
            
            \`\`\`
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infrastructure/terraform
          framework: terraform
          soft_fail: true
        continue-on-error: true

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: results.sarif
        continue-on-error: true

  plan-dev:
    name: Plan Dev Environment
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch') && success()
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="storage_account_name=${{ secrets.TERRAFORM_BACKEND_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TERRAFORM_BACKEND_CONTAINER }}" \
            -backend-config="key=dev/terraform.tfstate" \
            -backend-config="resource_group_name=${{ secrets.TERRAFORM_BACKEND_RESOURCE_GROUP }}"
        working-directory: infrastructure/terraform

      - name: Import Existing Resource Groups
        run: |
          echo "Checking and importing existing resource groups..."
          
          # Get subscription ID
          SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          
          # Check and import Network Resource Group
          NETWORK_RG="rg-policycortex-network-dev"
          if az group show --name "$NETWORK_RG" &>/dev/null; then
            echo "Resource group $NETWORK_RG exists in Azure"
            if ! terraform state show azurerm_resource_group.network &>/dev/null; then
              echo "Importing $NETWORK_RG into Terraform state..."
              terraform import azurerm_resource_group.network "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$NETWORK_RG" || {
                echo "Failed to import $NETWORK_RG - it may already be in state or not exist"
              }
            else
              echo "$NETWORK_RG already in Terraform state"
            fi
          fi
          
          # Check and import Application Resource Group
          APP_RG="rg-policycortex-app-dev"
          if az group show --name "$APP_RG" &>/dev/null; then
            echo "Resource group $APP_RG exists in Azure"
            if ! terraform state show azurerm_resource_group.app &>/dev/null; then
              echo "Importing $APP_RG into Terraform state..."
              terraform import azurerm_resource_group.app "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$APP_RG" || {
                echo "Failed to import $APP_RG - it may already be in state or not exist"
              }
            else
              echo "$APP_RG already in Terraform state"
            fi
          fi
        working-directory: infrastructure/terraform

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -var-file="environments/dev/terraform.tfvars" \
            -out=dev.tfplan \
            -detailed-exitcode
        working-directory: infrastructure/terraform

      - name: Save Plan
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: dev-terraform-plan
          path: infrastructure/terraform/dev.tfplan

      - name: Comment PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform plan ${{ steps.plan.outcome }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  apply-dev:
    name: Apply Dev Environment
    runs-on: ubuntu-latest
    needs: plan-dev
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.terraform_action == 'apply')) && success()
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Download Plan
        uses: actions/download-artifact@v4
        with:
          name: dev-terraform-plan
          path: infrastructure/terraform/
        continue-on-error: true

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="storage_account_name=${{ secrets.TERRAFORM_BACKEND_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TERRAFORM_BACKEND_CONTAINER }}" \
            -backend-config="key=dev/terraform.tfstate" \
            -backend-config="resource_group_name=${{ secrets.TERRAFORM_BACKEND_RESOURCE_GROUP }}"
        working-directory: infrastructure/terraform

      - name: Import Existing Resource Groups
        run: |
          echo "Checking and importing existing resource groups..."
          
          # Get subscription ID
          SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          
          # Check and import Network Resource Group
          NETWORK_RG="rg-policycortex-network-dev"
          if az group show --name "$NETWORK_RG" &>/dev/null; then
            echo "Resource group $NETWORK_RG exists in Azure"
            if ! terraform state show azurerm_resource_group.network &>/dev/null; then
              echo "Importing $NETWORK_RG into Terraform state..."
              terraform import azurerm_resource_group.network "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$NETWORK_RG" || {
                echo "Failed to import $NETWORK_RG - it may already be in state or not exist"
              }
            else
              echo "$NETWORK_RG already in Terraform state"
            fi
          fi
          
          # Check and import Application Resource Group
          APP_RG="rg-policycortex-app-dev"
          if az group show --name "$APP_RG" &>/dev/null; then
            echo "Resource group $APP_RG exists in Azure"
            if ! terraform state show azurerm_resource_group.app &>/dev/null; then
              echo "Importing $APP_RG into Terraform state..."
              terraform import azurerm_resource_group.app "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$APP_RG" || {
                echo "Failed to import $APP_RG - it may already be in state or not exist"
              }
            else
              echo "$APP_RG already in Terraform state"
            fi
          fi
        working-directory: infrastructure/terraform

      - name: Import Existing Resources
        run: |
          # Make import script executable
          chmod +x scripts/import-existing-resources.sh
          
          # Run import script
          ./scripts/import-existing-resources.sh dev
        working-directory: infrastructure/terraform
        continue-on-error: true

      - name: Check if plan exists
        id: check_plan
        run: |
          if [ -f "infrastructure/terraform/dev.tfplan" ]; then
            echo "plan_exists=true" >> $GITHUB_OUTPUT
          else
            echo "plan_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Apply
        if: steps.check_plan.outputs.plan_exists == 'true'
        run: |
          # Try to apply the saved plan, but fall back to regular apply if it's stale
          terraform apply -auto-approve dev.tfplan || {
            echo "Plan is stale or invalid. Running fresh apply..."
            terraform apply \
              -var-file="environments/dev/terraform.tfvars" \
              -auto-approve
          }
        working-directory: infrastructure/terraform
        
      - name: Terraform Apply (no plan)
        if: steps.check_plan.outputs.plan_exists == 'false'
        run: |
          terraform apply \
            -var-file="environments/dev/terraform.tfvars" \
            -auto-approve
        working-directory: infrastructure/terraform

      - name: Output Infrastructure Details
        id: tf_output
        run: |
          terraform output -json > terraform_outputs.json
          cat terraform_outputs.json
        working-directory: infrastructure/terraform

      - name: Get Container Registry Details
        id: acr_details
        run: |
          ACR_LOGIN_SERVER=$(terraform output -raw container_registry_login_server)
          echo "acr_login_server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT
        working-directory: infrastructure/terraform

      - name: Build and Push Placeholder Images
        run: |
          # Login to ACR
          az acr login --name $(terraform output -raw container_registry_name)
          
          # Build and push placeholder images for each service
          services=("api_gateway" "azure_integration" "ai_engine" "data_processing" "conversation" "notification" "frontend")
          
          for service in "${services[@]}"; do
            echo "Building placeholder for $service..."
            
            # Create a simple placeholder Dockerfile
            mkdir -p /tmp/$service
            cat > /tmp/$service/Dockerfile << EOF
          FROM nginx:alpine
          RUN echo "<h1>PolicyCortex $service - Coming Soon</h1><p>Infrastructure deployed successfully. Waiting for application deployment.</p>" > /usr/share/nginx/html/index.html
          EXPOSE 80
          EOF
            
            # Build and push
            docker build -t ${{ steps.acr_details.outputs.acr_login_server }}/policycortex-$service:latest /tmp/$service
            docker push ${{ steps.acr_details.outputs.acr_login_server }}/policycortex-$service:latest
          done
        working-directory: infrastructure/terraform
        
      - name: Deploy Container Apps
        run: |
          echo "Deploying Container Apps with images available..."
          
          # Wait for all Azure resources to be fully provisioned
          echo "Waiting for Azure resources to be fully online..."
          sleep 60
          
          # Verify critical resources are ready before deploying container apps
          echo "Verifying resource readiness..."
          
          # Check Cosmos DB is fully online
          echo "Checking Cosmos DB account status..."
          RESOURCE_GROUP=$(terraform output -raw resource_group_name)
          COSMOS_STATUS=$(az cosmosdb show --name policycortex-cosmos-dev --resource-group "$RESOURCE_GROUP" --query "properties.provisioningState" -o tsv 2>/dev/null || echo "NotFound")
          
          if [ "$COSMOS_STATUS" != "NotFound" ]; then
            while [ "$COSMOS_STATUS" != "Succeeded" ]; do
              echo "Cosmos DB status: $COSMOS_STATUS - waiting..."
              sleep 30
              COSMOS_STATUS=$(az cosmosdb show --name policycortex-cosmos-dev --resource-group "$RESOURCE_GROUP" --query "properties.provisioningState" -o tsv 2>/dev/null || echo "NotFound")
            done
            echo "Cosmos DB is ready: $COSMOS_STATUS"
          else
            echo "Cosmos DB not found - will be created by Terraform"
          fi
          
          # Check Redis Cache is ready
          echo "Checking Redis Cache status..."
          REDIS_STATUS=$(az redis show --name policycortex-redis-dev --resource-group "$RESOURCE_GROUP" --query "properties.provisioningState" -o tsv 2>/dev/null || echo "NotFound")
          
          if [ "$REDIS_STATUS" != "NotFound" ]; then
            while [ "$REDIS_STATUS" != "Succeeded" ]; do
              echo "Redis status: $REDIS_STATUS - waiting..."
              sleep 30
              REDIS_STATUS=$(az redis show --name policycortex-redis-dev --resource-group "$RESOURCE_GROUP" --query "properties.provisioningState" -o tsv 2>/dev/null || echo "NotFound")
            done
            echo "Redis Cache is ready: $REDIS_STATUS"
          else
            echo "Redis Cache not found - will be created by Terraform"
          fi
          
          # Check Cognitive Services is ready
          echo "Checking Cognitive Services status..."
          COGNITIVE_STATUS=$(az cognitiveservices account show --name policycortex-cognitive-dev --resource-group "$RESOURCE_GROUP" --query "properties.provisioningState" -o tsv 2>/dev/null || echo "NotFound")
          
          if [ "$COGNITIVE_STATUS" != "NotFound" ]; then
            while [ "$COGNITIVE_STATUS" != "Succeeded" ]; do
              echo "Cognitive Services status: $COGNITIVE_STATUS - waiting..."
              sleep 30
              COGNITIVE_STATUS=$(az cognitiveservices account show --name policycortex-cognitive-dev --resource-group "$RESOURCE_GROUP" --query "properties.provisioningState" -o tsv 2>/dev/null || echo "NotFound")
            done
            echo "Cognitive Services is ready: $COGNITIVE_STATUS"
          else
            echo "Cognitive Services not found - will be created by Terraform"
          fi
          
          # Additional wait to ensure all backend operations are complete
          echo "Final wait for backend operations to complete..."
          sleep 60
          
          # Now deploy Container Apps with Terraform
          echo "Deploying Container Apps with Terraform..."
          
          # Create a targeted tfvars file with container apps enabled
          cat > environments/dev/terraform-with-apps.tfvars << EOF
          # Include base configuration
          $(cat environments/dev/terraform.tfvars)
          
          # Override to enable container apps
          deploy_container_apps = true
          EOF
          
          # Run terraform apply with container apps enabled
          terraform apply \
            -var-file="environments/dev/terraform-with-apps.tfvars" \
            -auto-approve \
            -parallelism=5
        working-directory: infrastructure/terraform

      - name: Verify Container Apps Deployment
        run: |
          echo "Verifying Container Apps are running..."
          
          RESOURCE_GROUP=$(terraform output -raw resource_group_name)
          
          # Wait for Container Apps to be ready
          sleep 30
          
          # Check each Container App status
          services=("api-gateway" "azure-integration" "ai-engine" "data-processing" "conversation" "notification" "frontend")
          
          for service in "${services[@]}"; do
            echo "Checking ca-$service-dev..."
            status=$(az containerapp show --name ca-$service-dev --resource-group $RESOURCE_GROUP --query "properties.provisioningState" -o tsv 2>/dev/null || echo "NotFound")
            echo "  Status: $status"
            
            if [ "$status" = "Succeeded" ]; then
              fqdn=$(az containerapp show --name ca-$service-dev --resource-group $RESOURCE_GROUP --query "properties.configuration.ingress.fqdn" -o tsv 2>/dev/null || echo "No ingress")
              if [ "$fqdn" != "No ingress" ] && [ "$fqdn" != "" ]; then
                echo "  URL: https://$fqdn"
              fi
            fi
          done
        working-directory: infrastructure/terraform

      - name: Display Deployment Summary
        run: |
          echo "=================================="
          echo "üéâ Infrastructure Deployment Complete!"
          echo "=================================="
          echo "Environment: dev"
          echo ""
          echo "üìã Resources Created:"
          echo "‚úÖ App Resource Group: $(terraform output -raw resource_group_name)"
          echo "‚úÖ Network Resource Group: $(terraform output -raw network_resource_group_name)"
          echo "‚úÖ Container Registry: $(terraform output -raw container_registry_name)"
          echo "‚úÖ Storage Account: $(terraform output -raw storage_account_name)"
          echo "‚úÖ Key Vault: $(terraform output -raw key_vault_name)"
          echo "‚úÖ Container Apps Environment: $(terraform output -raw container_app_environment_name)"
          echo "‚úÖ Log Analytics Workspace: $(terraform output -raw log_analytics_workspace_id | cut -d'/' -f9)"
          echo ""
          echo "üåê Application URLs:"
          API_URL=$(terraform output -raw api_gateway_url 2>/dev/null || echo "Not yet available")
          FRONTEND_URL=$(terraform output -raw frontend_url 2>/dev/null || echo "Not yet available")
          echo "üîå API Gateway: $API_URL"
          echo "üåç Frontend: $FRONTEND_URL"
          echo ""
          echo "üìù Next Steps:"
          echo "1. Run application deployment to deploy your actual services"
          echo "2. Access the frontend URL above to verify deployment"
          echo "3. Check Azure Portal for detailed resource information"
          echo "=================================="
        working-directory: infrastructure/terraform

  plan-staging:
    name: Plan Staging Environment
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: github.ref == 'refs/heads/main' && (github.event_name == 'workflow_dispatch' && contains(fromJson('["staging", "prod"]'), github.event.inputs.environment))
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="storage_account_name=${{ secrets.TERRAFORM_BACKEND_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TERRAFORM_BACKEND_CONTAINER }}" \
            -backend-config="key=staging/terraform.tfstate" \
            -backend-config="resource_group_name=${{ secrets.TERRAFORM_BACKEND_RESOURCE_GROUP }}"
        working-directory: infrastructure/terraform

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -var-file="environments/staging/terraform.tfvars" \
            -out=staging.tfplan \
            -detailed-exitcode
        working-directory: infrastructure/terraform

      - name: Save Plan
        uses: actions/upload-artifact@v4
        with:
          name: staging-terraform-plan
          path: infrastructure/terraform/staging.tfplan

  apply-staging:
    name: Apply Staging Environment
    runs-on: ubuntu-latest
    needs: plan-staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging' && github.event.inputs.terraform_action == 'apply'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Download Plan
        uses: actions/download-artifact@v4
        with:
          name: staging-terraform-plan
          path: infrastructure/terraform/

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="storage_account_name=${{ secrets.TERRAFORM_BACKEND_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TERRAFORM_BACKEND_CONTAINER }}" \
            -backend-config="key=staging/terraform.tfstate" \
            -backend-config="resource_group_name=${{ secrets.TERRAFORM_BACKEND_RESOURCE_GROUP }}"
        working-directory: infrastructure/terraform

      - name: Import Existing Resources
        run: |
          # Make import script executable
          chmod +x scripts/import-existing-resources.sh
          
          # Run import script
          ./scripts/import-existing-resources.sh staging
        working-directory: infrastructure/terraform
        continue-on-error: true

      - name: Terraform Apply
        run: |
          # Try to apply the saved plan, but fall back to regular apply if it's stale
          terraform apply -auto-approve staging.tfplan || {
            echo "Plan is stale or invalid. Running fresh apply..."
            terraform apply \
              -var-file="environments/staging/terraform.tfvars" \
              -auto-approve
          }
        working-directory: infrastructure/terraform

      - name: Output Infrastructure Details
        id: tf_output
        run: |
          terraform output -json > terraform_outputs.json
          cat terraform_outputs.json
        working-directory: infrastructure/terraform

      - name: Get Container Registry Details
        id: acr_details
        run: |
          ACR_LOGIN_SERVER=$(terraform output -raw container_registry_login_server)
          echo "acr_login_server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT
        working-directory: infrastructure/terraform

      - name: Build and Push Placeholder Images
        run: |
          # Login to ACR
          az acr login --name $(terraform output -raw container_registry_name)
          
          # Build and push placeholder images for each service
          services=("api_gateway" "azure_integration" "ai_engine" "data_processing" "conversation" "notification" "frontend")
          
          for service in "${services[@]}"; do
            echo "Building placeholder for $service..."
            
            # Create a simple placeholder Dockerfile
            mkdir -p /tmp/$service
            cat > /tmp/$service/Dockerfile << EOF
          FROM nginx:alpine
          RUN echo "<h1>PolicyCortex $service - Coming Soon</h1><p>Infrastructure deployed successfully. Waiting for application deployment.</p>" > /usr/share/nginx/html/index.html
          EXPOSE 80
          EOF
            
            # Build and push
            docker build -t ${{ steps.acr_details.outputs.acr_login_server }}/policycortex-$service:latest /tmp/$service
            docker push ${{ steps.acr_details.outputs.acr_login_server }}/policycortex-$service:latest
          done
        working-directory: infrastructure/terraform
        
      - name: Deploy Container Apps
        run: |
          echo "Deploying Container Apps with images available..."
          
          # First, prepare Terraform configuration with Container Apps enabled
          echo "Preparing Terraform configuration..."
          terraform plan \
            -var-file="environments/staging/terraform.tfvars" \
            -var="deploy_container_apps=true" \
            -out=container_apps.tfplan || true
          
          # Force import existing Container Apps - use more aggressive approach
          echo "Force importing existing Container Apps..."
          services=("api_gateway" "azure_integration" "ai_engine" "data_processing" "conversation" "notification" "frontend")
          
          # First, remove any existing state for these resources to avoid conflicts
          for service in "${services[@]}"; do
            echo "Removing $service from state to avoid conflicts..."
            terraform state rm "azurerm_container_app.${service}[0]" 2>/dev/null || true
            terraform state rm "azurerm_container_app.${service}" 2>/dev/null || true
          done
          
          # Now import the existing resources
          RESOURCE_GROUP=$(terraform output -raw resource_group_name)
          for service in "${services[@]}"; do
            terraform_name=$(echo $service | tr '_' '-')
            echo "Checking Container App: ca-$terraform_name-staging"
            if az containerapp show --name "ca-$terraform_name-staging" --resource-group "$RESOURCE_GROUP" &>/dev/null; then
              echo "Importing $service into state..."
              terraform import "azurerm_container_app.${service}[0]" \
                "/subscriptions/$(az account show --query id -o tsv)/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.App/containerApps/ca-$terraform_name-staging" || echo "Import failed for $service - will be created"
            else
              echo "Container App ca-$terraform_name-staging does not exist - will be created"
            fi
          done
          
          # Run Terraform apply again with Container Apps enabled
          terraform apply \
            -var-file="environments/staging/terraform.tfvars" \
            -var="deploy_container_apps=true" \
            -auto-approve
        working-directory: infrastructure/terraform

      - name: Verify Container Apps Deployment
        run: |
          echo "Verifying Container Apps are running..."
          
          RESOURCE_GROUP=$(terraform output -raw resource_group_name)
          
          # Wait for Container Apps to be ready
          sleep 60
          
          # Check each Container App status
          services=("api-gateway" "azure-integration" "ai-engine" "data-processing" "conversation" "notification" "frontend")
          
          for service in "${services[@]}"; do
            echo "Checking ca-$service-staging..."
            status=$(az containerapp show --name ca-$service-staging --resource-group $RESOURCE_GROUP --query "properties.provisioningState" -o tsv 2>/dev/null || echo "NotFound")
            echo "  Status: $status"
            
            if [ "$status" = "Succeeded" ]; then
              fqdn=$(az containerapp show --name ca-$service-staging --resource-group $RESOURCE_GROUP --query "properties.configuration.ingress.fqdn" -o tsv 2>/dev/null || echo "No ingress")
              if [ "$fqdn" != "No ingress" ]; then
                echo "  URL: https://$fqdn"
              fi
            fi
          done
        working-directory: infrastructure/terraform

      - name: Display Deployment Summary
        run: |
          echo "=================================="
          echo "üéâ Infrastructure Deployment Complete!"
          echo "=================================="
          echo "Environment: staging"
          echo ""
          echo "üìã Resources Created:"
          echo "‚úÖ App Resource Group: $(terraform output -raw resource_group_name)"
          echo "‚úÖ Network Resource Group: $(terraform output -raw network_resource_group_name)"
          echo "‚úÖ Container Registry: $(terraform output -raw container_registry_name)"
          echo "‚úÖ Storage Account: $(terraform output -raw storage_account_name)"
          echo "‚úÖ Key Vault: $(terraform output -raw key_vault_name)"
          echo "‚úÖ Container Apps Environment: $(terraform output -raw container_app_environment_name)"
          echo "‚úÖ Log Analytics Workspace: $(terraform output -raw log_analytics_workspace_id | cut -d'/' -f9)"
          echo ""
          echo "üåê Application URLs:"
          API_URL=$(terraform output -raw api_gateway_url 2>/dev/null || echo "Not yet available")
          FRONTEND_URL=$(terraform output -raw frontend_url 2>/dev/null || echo "Not yet available")
          echo "üîå API Gateway: $API_URL"
          echo "üåç Frontend: $FRONTEND_URL"
          echo ""
          echo "üìù Next Steps:"
          echo "1. Run application deployment to deploy your actual services"
          echo "2. Access the frontend URL above to verify deployment"
          echo "3. Check Azure Portal for detailed resource information"
          echo "=================================="
        working-directory: infrastructure/terraform

  plan-prod:
    name: Plan Production Environment
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    environment: prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="storage_account_name=${{ secrets.TERRAFORM_BACKEND_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TERRAFORM_BACKEND_CONTAINER }}" \
            -backend-config="key=prod/terraform.tfstate" \
            -backend-config="resource_group_name=${{ secrets.TERRAFORM_BACKEND_RESOURCE_GROUP }}"
        working-directory: infrastructure/terraform

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -var-file="environments/prod/terraform.tfvars" \
            -out=prod.tfplan \
            -detailed-exitcode
        working-directory: infrastructure/terraform

      - name: Save Plan
        uses: actions/upload-artifact@v4
        with:
          name: prod-terraform-plan
          path: infrastructure/terraform/prod.tfplan

  apply-prod:
    name: Apply Production Environment
    runs-on: ubuntu-latest
    needs: plan-prod
    if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod' && github.event.inputs.terraform_action == 'apply'
    environment: prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Download Plan
        uses: actions/download-artifact@v4
        with:
          name: prod-terraform-plan
          path: infrastructure/terraform/

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="storage_account_name=${{ secrets.TERRAFORM_BACKEND_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TERRAFORM_BACKEND_CONTAINER }}" \
            -backend-config="key=prod/terraform.tfstate" \
            -backend-config="resource_group_name=${{ secrets.TERRAFORM_BACKEND_RESOURCE_GROUP }}"
        working-directory: infrastructure/terraform

      - name: Import Existing Resources
        run: |
          # Make import script executable
          chmod +x scripts/import-existing-resources.sh
          
          # Run import script
          ./scripts/import-existing-resources.sh prod
        working-directory: infrastructure/terraform
        continue-on-error: true

      - name: Terraform Apply
        run: |
          # Try to apply the saved plan, but fall back to regular apply if it's stale
          terraform apply -auto-approve prod.tfplan || {
            echo "Plan is stale or invalid. Running fresh apply..."
            terraform apply \
              -var-file="environments/prod/terraform.tfvars" \
              -auto-approve
          }
        working-directory: infrastructure/terraform

      - name: Output Infrastructure Details
        id: tf_output
        run: |
          terraform output -json > terraform_outputs.json
          cat terraform_outputs.json
        working-directory: infrastructure/terraform

      - name: Get Container Registry Details
        id: acr_details
        run: |
          ACR_LOGIN_SERVER=$(terraform output -raw container_registry_login_server)
          echo "acr_login_server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT
        working-directory: infrastructure/terraform

      - name: Build and Push Placeholder Images
        run: |
          # Login to ACR
          az acr login --name $(terraform output -raw container_registry_name)
          
          # Build and push placeholder images for each service
          services=("api_gateway" "azure_integration" "ai_engine" "data_processing" "conversation" "notification" "frontend")
          
          for service in "${services[@]}"; do
            echo "Building placeholder for $service..."
            
            # Create a simple placeholder Dockerfile
            mkdir -p /tmp/$service
            cat > /tmp/$service/Dockerfile << EOF
          FROM nginx:alpine
          RUN echo "<h1>PolicyCortex $service - Coming Soon</h1><p>Infrastructure deployed successfully. Waiting for application deployment.</p>" > /usr/share/nginx/html/index.html
          EXPOSE 80
          EOF
            
            # Build and push
            docker build -t ${{ steps.acr_details.outputs.acr_login_server }}/policycortex-$service:latest /tmp/$service
            docker push ${{ steps.acr_details.outputs.acr_login_server }}/policycortex-$service:latest
          done
        working-directory: infrastructure/terraform
        
      - name: Deploy Container Apps
        run: |
          echo "Deploying Container Apps with images available..."
          
          # First, prepare Terraform configuration with Container Apps enabled
          echo "Preparing Terraform configuration..."
          terraform plan \
            -var-file="environments/prod/terraform.tfvars" \
            -var="deploy_container_apps=true" \
            -out=container_apps.tfplan || true
          
          # Force import existing Container Apps - use more aggressive approach
          echo "Force importing existing Container Apps..."
          services=("api_gateway" "azure_integration" "ai_engine" "data_processing" "conversation" "notification" "frontend")
          
          # First, remove any existing state for these resources to avoid conflicts
          for service in "${services[@]}"; do
            echo "Removing $service from state to avoid conflicts..."
            terraform state rm "azurerm_container_app.${service}[0]" 2>/dev/null || true
            terraform state rm "azurerm_container_app.${service}" 2>/dev/null || true
          done
          
          # Now import the existing resources
          RESOURCE_GROUP=$(terraform output -raw resource_group_name)
          for service in "${services[@]}"; do
            terraform_name=$(echo $service | tr '_' '-')
            echo "Checking Container App: ca-$terraform_name-prod"
            if az containerapp show --name "ca-$terraform_name-prod" --resource-group "$RESOURCE_GROUP" &>/dev/null; then
              echo "Importing $service into state..."
              terraform import "azurerm_container_app.${service}[0]" \
                "/subscriptions/$(az account show --query id -o tsv)/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.App/containerApps/ca-$terraform_name-prod" || echo "Import failed for $service - will be created"
            else
              echo "Container App ca-$terraform_name-prod does not exist - will be created"
            fi
          done
          
          # Run Terraform apply again with Container Apps enabled
          terraform apply \
            -var-file="environments/prod/terraform.tfvars" \
            -var="deploy_container_apps=true" \
            -auto-approve
        working-directory: infrastructure/terraform

      - name: Verify Container Apps Deployment
        run: |
          echo "Verifying Container Apps are running..."
          
          RESOURCE_GROUP=$(terraform output -raw resource_group_name)
          
          # Wait for Container Apps to be ready
          sleep 60
          
          # Check each Container App status
          services=("api-gateway" "azure-integration" "ai-engine" "data-processing" "conversation" "notification" "frontend")
          
          for service in "${services[@]}"; do
            echo "Checking ca-$service-prod..."
            status=$(az containerapp show --name ca-$service-prod --resource-group $RESOURCE_GROUP --query "properties.provisioningState" -o tsv 2>/dev/null || echo "NotFound")
            echo "  Status: $status"
            
            if [ "$status" = "Succeeded" ]; then
              fqdn=$(az containerapp show --name ca-$service-prod --resource-group $RESOURCE_GROUP --query "properties.configuration.ingress.fqdn" -o tsv 2>/dev/null || echo "No ingress")
              if [ "$fqdn" != "No ingress" ]; then
                echo "  URL: https://$fqdn"
              fi
            fi
          done
        working-directory: infrastructure/terraform

      - name: Display Deployment Summary
        run: |
          echo "=================================="
          echo "üéâ Infrastructure Deployment Complete!"
          echo "=================================="
          echo "Environment: production"
          echo ""
          echo "üìã Resources Created:"
          echo "‚úÖ App Resource Group: $(terraform output -raw resource_group_name)"
          echo "‚úÖ Network Resource Group: $(terraform output -raw network_resource_group_name)"
          echo "‚úÖ Container Registry: $(terraform output -raw container_registry_name)"
          echo "‚úÖ Storage Account: $(terraform output -raw storage_account_name)"
          echo "‚úÖ Key Vault: $(terraform output -raw key_vault_name)"
          echo "‚úÖ Container Apps Environment: $(terraform output -raw container_app_environment_name)"
          echo "‚úÖ Log Analytics Workspace: $(terraform output -raw log_analytics_workspace_id | cut -d'/' -f9)"
          echo ""
          echo "üåê Application URLs:"
          API_URL=$(terraform output -raw api_gateway_url 2>/dev/null || echo "Not yet available")
          FRONTEND_URL=$(terraform output -raw frontend_url 2>/dev/null || echo "Not yet available")
          echo "üîå API Gateway: $API_URL"
          echo "üåç Frontend: $FRONTEND_URL"
          echo ""
          echo "üìù Next Steps:"
          echo "1. Run application deployment to deploy your actual services"
          echo "2. Access the frontend URL above to verify deployment"
          echo "3. Check Azure Portal for detailed resource information"
          echo "=================================="
        working-directory: infrastructure/terraform

  destroy:
    name: Destroy Environment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.terraform_action == 'destroy'
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="storage_account_name=${{ secrets.TERRAFORM_BACKEND_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TERRAFORM_BACKEND_CONTAINER }}" \
            -backend-config="key=${{ github.event.inputs.environment }}/terraform.tfstate" \
            -backend-config="resource_group_name=${{ secrets.TERRAFORM_BACKEND_RESOURCE_GROUP }}"
        working-directory: infrastructure/terraform

      - name: Terraform Destroy
        run: |
          terraform destroy \
            -var-file="environments/${{ github.event.inputs.environment }}/terraform.tfvars" \
            -auto-approve
        working-directory: infrastructure/terraform