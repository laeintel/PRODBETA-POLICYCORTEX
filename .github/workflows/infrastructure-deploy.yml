name: Infrastructure Deployment

permissions:
  contents: read
  actions: read
  security-events: write
  issues: write
  pull-requests: write

on:
  push:
    branches: [ main ]
    paths:
      - 'infrastructure/**'
      - '.github/workflows/infrastructure-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'infrastructure/**'
      - '.github/workflows/infrastructure-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      terraform_action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.8.0'
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: infrastructure/terraform
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -backend=false
        working-directory: infrastructure/terraform

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: infrastructure/terraform

      - name: Comment PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          FMT: "terraform fmt ${{ steps.fmt.outcome }}"
          INIT: "terraform init ${{ steps.init.outcome }}"
          VALIDATE: "terraform validate ${{ steps.validate.outcome }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            
            <details><summary>Validation Output</summary>
            
            \`\`\`
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infrastructure/terraform
          framework: terraform
          soft_fail: true
        continue-on-error: true

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: results.sarif
        continue-on-error: true

  plan-dev:
    name: Plan Dev Environment
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch') && success()
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="storage_account_name=${{ secrets.TERRAFORM_BACKEND_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TERRAFORM_BACKEND_CONTAINER }}" \
            -backend-config="key=dev/terraform.tfstate" \
            -backend-config="resource_group_name=${{ secrets.TERRAFORM_BACKEND_RESOURCE_GROUP }}"
        working-directory: infrastructure/terraform

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -var-file="environments/dev/terraform.tfvars" \
            -out=dev.tfplan \
            -detailed-exitcode
        working-directory: infrastructure/terraform

      - name: Save Plan
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: dev-terraform-plan
          path: infrastructure/terraform/dev.tfplan

      - name: Comment PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform plan ${{ steps.plan.outcome }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  apply-dev:
    name: Apply Dev Environment
    runs-on: ubuntu-latest
    needs: plan-dev
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.terraform_action == 'apply')) && success()
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Download Plan
        uses: actions/download-artifact@v4
        with:
          name: dev-terraform-plan
          path: infrastructure/terraform/
        continue-on-error: true

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="storage_account_name=${{ secrets.TERRAFORM_BACKEND_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TERRAFORM_BACKEND_CONTAINER }}" \
            -backend-config="key=dev/terraform.tfstate" \
            -backend-config="resource_group_name=${{ secrets.TERRAFORM_BACKEND_RESOURCE_GROUP }}"
        working-directory: infrastructure/terraform

      - name: Check if plan exists
        id: check_plan
        run: |
          if [ -f "infrastructure/terraform/dev.tfplan" ]; then
            echo "plan_exists=true" >> $GITHUB_OUTPUT
          else
            echo "plan_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Apply
        if: steps.check_plan.outputs.plan_exists == 'true'
        run: terraform apply -auto-approve dev.tfplan
        working-directory: infrastructure/terraform
        
      - name: Terraform Apply (no plan)
        if: steps.check_plan.outputs.plan_exists == 'false'
        run: |
          terraform apply \
            -var-file="environments/dev/terraform.tfvars" \
            -auto-approve
        working-directory: infrastructure/terraform

      - name: Output Infrastructure Details
        id: tf_output
        run: |
          terraform output -json > terraform_outputs.json
          cat terraform_outputs.json
        working-directory: infrastructure/terraform

      - name: Get Container Registry Details
        id: acr_details
        run: |
          ACR_LOGIN_SERVER=$(terraform output -raw container_registry_login_server)
          echo "acr_login_server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT
        working-directory: infrastructure/terraform

      - name: Build and Push Placeholder Images
        run: |
          # Login to ACR
          az acr login --name $(terraform output -raw container_registry_name)
          
          # Build and push placeholder images for each service
          services=("api_gateway" "azure_integration" "ai_engine" "data_processing" "conversation" "notification" "frontend")
          
          for service in "${services[@]}"; do
            echo "Building placeholder for $service..."
            
            # Create a simple placeholder Dockerfile
            mkdir -p /tmp/$service
            cat > /tmp/$service/Dockerfile << EOF
          FROM nginx:alpine
          RUN echo "<h1>PolicyCortex $service - Coming Soon</h1><p>Infrastructure deployed successfully. Waiting for application deployment.</p>" > /usr/share/nginx/html/index.html
          EXPOSE 80
          EOF
            
            # Build and push
            docker build -t ${{ steps.acr_details.outputs.acr_login_server }}/policycortex-$service:latest /tmp/$service
            docker push ${{ steps.acr_details.outputs.acr_login_server }}/policycortex-$service:latest
          done
        working-directory: infrastructure/terraform

      - name: Verify Container Apps Deployment
        run: |
          echo "Verifying Container Apps are running..."
          
          RESOURCE_GROUP=$(terraform output -raw resource_group_name)
          
          # Wait for Container Apps to be ready
          sleep 60
          
          # Check each Container App status
          services=("api-gateway" "azure-integration" "ai-engine" "data-processing" "conversation" "notification" "frontend")
          
          for service in "${services[@]}"; do
            echo "Checking ca-$service-dev..."
            status=$(az containerapp show --name ca-$service-dev --resource-group $RESOURCE_GROUP --query "properties.provisioningState" -o tsv 2>/dev/null || echo "NotFound")
            echo "  Status: $status"
            
            if [ "$status" = "Succeeded" ]; then
              fqdn=$(az containerapp show --name ca-$service-dev --resource-group $RESOURCE_GROUP --query "properties.configuration.ingress.fqdn" -o tsv 2>/dev/null || echo "No ingress")
              if [ "$fqdn" != "No ingress" ]; then
                echo "  URL: https://$fqdn"
              fi
            fi
          done
        working-directory: infrastructure/terraform

      - name: Display Deployment Summary
        run: |
          echo "=================================="
          echo "üéâ Infrastructure Deployment Complete!"
          echo "=================================="
          echo "Environment: dev"
          echo ""
          echo "üìã Resources Created:"
          echo "‚úÖ Resource Group: $(terraform output -raw resource_group_name)"
          echo "‚úÖ Container Registry: $(terraform output -raw container_registry_name)"
          echo "‚úÖ Storage Account: $(terraform output -raw storage_account_name)"
          echo "‚úÖ Key Vault: $(terraform output -raw key_vault_name)"
          echo "‚úÖ Container Apps Environment: $(terraform output -raw container_app_environment_name)"
          echo "‚úÖ Log Analytics Workspace: $(terraform output -raw log_analytics_workspace_id | cut -d'/' -f9)"
          echo ""
          echo "üåê Application URLs:"
          API_URL=$(terraform output -raw api_gateway_url 2>/dev/null || echo "Not yet available")
          FRONTEND_URL=$(terraform output -raw frontend_url 2>/dev/null || echo "Not yet available")
          echo "üîå API Gateway: $API_URL"
          echo "üåç Frontend: $FRONTEND_URL"
          echo ""
          echo "üìù Next Steps:"
          echo "1. Run application deployment to deploy your actual services"
          echo "2. Access the frontend URL above to verify deployment"
          echo "3. Check Azure Portal for detailed resource information"
          echo "=================================="
        working-directory: infrastructure/terraform

  plan-staging:
    name: Plan Staging Environment
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: github.ref == 'refs/heads/main' && (github.event_name == 'workflow_dispatch' && contains(fromJson('["staging", "prod"]'), github.event.inputs.environment))
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="storage_account_name=${{ secrets.TERRAFORM_BACKEND_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TERRAFORM_BACKEND_CONTAINER }}" \
            -backend-config="key=staging/terraform.tfstate" \
            -backend-config="resource_group_name=${{ secrets.TERRAFORM_BACKEND_RESOURCE_GROUP }}"
        working-directory: infrastructure/terraform

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -var-file="environments/staging/terraform.tfvars" \
            -out=staging.tfplan \
            -detailed-exitcode
        working-directory: infrastructure/terraform

      - name: Save Plan
        uses: actions/upload-artifact@v4
        with:
          name: staging-terraform-plan
          path: infrastructure/terraform/staging.tfplan

  apply-staging:
    name: Apply Staging Environment
    runs-on: ubuntu-latest
    needs: plan-staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging' && github.event.inputs.terraform_action == 'apply'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Download Plan
        uses: actions/download-artifact@v4
        with:
          name: staging-terraform-plan
          path: infrastructure/terraform/

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="storage_account_name=${{ secrets.TERRAFORM_BACKEND_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TERRAFORM_BACKEND_CONTAINER }}" \
            -backend-config="key=staging/terraform.tfstate" \
            -backend-config="resource_group_name=${{ secrets.TERRAFORM_BACKEND_RESOURCE_GROUP }}"
        working-directory: infrastructure/terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve staging.tfplan
        working-directory: infrastructure/terraform

      - name: Output Infrastructure Details
        id: tf_output
        run: |
          terraform output -json > terraform_outputs.json
          cat terraform_outputs.json
        working-directory: infrastructure/terraform

      - name: Get Container Registry Details
        id: acr_details
        run: |
          ACR_LOGIN_SERVER=$(terraform output -raw container_registry_login_server)
          echo "acr_login_server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT
        working-directory: infrastructure/terraform

      - name: Build and Push Placeholder Images
        run: |
          # Login to ACR
          az acr login --name $(terraform output -raw container_registry_name)
          
          # Build and push placeholder images for each service
          services=("api_gateway" "azure_integration" "ai_engine" "data_processing" "conversation" "notification" "frontend")
          
          for service in "${services[@]}"; do
            echo "Building placeholder for $service..."
            
            # Create a simple placeholder Dockerfile
            mkdir -p /tmp/$service
            cat > /tmp/$service/Dockerfile << EOF
          FROM nginx:alpine
          RUN echo "<h1>PolicyCortex $service - Coming Soon</h1><p>Infrastructure deployed successfully. Waiting for application deployment.</p>" > /usr/share/nginx/html/index.html
          EXPOSE 80
          EOF
            
            # Build and push
            docker build -t ${{ steps.acr_details.outputs.acr_login_server }}/policycortex-$service:latest /tmp/$service
            docker push ${{ steps.acr_details.outputs.acr_login_server }}/policycortex-$service:latest
          done
        working-directory: infrastructure/terraform

      - name: Verify Container Apps Deployment
        run: |
          echo "Verifying Container Apps are running..."
          
          RESOURCE_GROUP=$(terraform output -raw resource_group_name)
          
          # Wait for Container Apps to be ready
          sleep 60
          
          # Check each Container App status
          services=("api-gateway" "azure-integration" "ai-engine" "data-processing" "conversation" "notification" "frontend")
          
          for service in "${services[@]}"; do
            echo "Checking ca-$service-staging..."
            status=$(az containerapp show --name ca-$service-staging --resource-group $RESOURCE_GROUP --query "properties.provisioningState" -o tsv 2>/dev/null || echo "NotFound")
            echo "  Status: $status"
            
            if [ "$status" = "Succeeded" ]; then
              fqdn=$(az containerapp show --name ca-$service-staging --resource-group $RESOURCE_GROUP --query "properties.configuration.ingress.fqdn" -o tsv 2>/dev/null || echo "No ingress")
              if [ "$fqdn" != "No ingress" ]; then
                echo "  URL: https://$fqdn"
              fi
            fi
          done
        working-directory: infrastructure/terraform

      - name: Display Deployment Summary
        run: |
          echo "=================================="
          echo "üéâ Infrastructure Deployment Complete!"
          echo "=================================="
          echo "Environment: staging"
          echo ""
          echo "üìã Resources Created:"
          echo "‚úÖ Resource Group: $(terraform output -raw resource_group_name)"
          echo "‚úÖ Container Registry: $(terraform output -raw container_registry_name)"
          echo "‚úÖ Storage Account: $(terraform output -raw storage_account_name)"
          echo "‚úÖ Key Vault: $(terraform output -raw key_vault_name)"
          echo "‚úÖ Container Apps Environment: $(terraform output -raw container_app_environment_name)"
          echo "‚úÖ Log Analytics Workspace: $(terraform output -raw log_analytics_workspace_id | cut -d'/' -f9)"
          echo ""
          echo "üåê Application URLs:"
          API_URL=$(terraform output -raw api_gateway_url 2>/dev/null || echo "Not yet available")
          FRONTEND_URL=$(terraform output -raw frontend_url 2>/dev/null || echo "Not yet available")
          echo "üîå API Gateway: $API_URL"
          echo "üåç Frontend: $FRONTEND_URL"
          echo ""
          echo "üìù Next Steps:"
          echo "1. Run application deployment to deploy your actual services"
          echo "2. Access the frontend URL above to verify deployment"
          echo "3. Check Azure Portal for detailed resource information"
          echo "=================================="
        working-directory: infrastructure/terraform

  plan-prod:
    name: Plan Production Environment
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    environment: prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="storage_account_name=${{ secrets.TERRAFORM_BACKEND_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TERRAFORM_BACKEND_CONTAINER }}" \
            -backend-config="key=prod/terraform.tfstate" \
            -backend-config="resource_group_name=${{ secrets.TERRAFORM_BACKEND_RESOURCE_GROUP }}"
        working-directory: infrastructure/terraform

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -var-file="environments/prod/terraform.tfvars" \
            -out=prod.tfplan \
            -detailed-exitcode
        working-directory: infrastructure/terraform

      - name: Save Plan
        uses: actions/upload-artifact@v4
        with:
          name: prod-terraform-plan
          path: infrastructure/terraform/prod.tfplan

  apply-prod:
    name: Apply Production Environment
    runs-on: ubuntu-latest
    needs: plan-prod
    if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod' && github.event.inputs.terraform_action == 'apply'
    environment: prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Download Plan
        uses: actions/download-artifact@v4
        with:
          name: prod-terraform-plan
          path: infrastructure/terraform/

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="storage_account_name=${{ secrets.TERRAFORM_BACKEND_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TERRAFORM_BACKEND_CONTAINER }}" \
            -backend-config="key=prod/terraform.tfstate" \
            -backend-config="resource_group_name=${{ secrets.TERRAFORM_BACKEND_RESOURCE_GROUP }}"
        working-directory: infrastructure/terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve prod.tfplan
        working-directory: infrastructure/terraform

      - name: Output Infrastructure Details
        id: tf_output
        run: |
          terraform output -json > terraform_outputs.json
          cat terraform_outputs.json
        working-directory: infrastructure/terraform

      - name: Get Container Registry Details
        id: acr_details
        run: |
          ACR_LOGIN_SERVER=$(terraform output -raw container_registry_login_server)
          echo "acr_login_server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT
        working-directory: infrastructure/terraform

      - name: Build and Push Placeholder Images
        run: |
          # Login to ACR
          az acr login --name $(terraform output -raw container_registry_name)
          
          # Build and push placeholder images for each service
          services=("api_gateway" "azure_integration" "ai_engine" "data_processing" "conversation" "notification" "frontend")
          
          for service in "${services[@]}"; do
            echo "Building placeholder for $service..."
            
            # Create a simple placeholder Dockerfile
            mkdir -p /tmp/$service
            cat > /tmp/$service/Dockerfile << EOF
          FROM nginx:alpine
          RUN echo "<h1>PolicyCortex $service - Coming Soon</h1><p>Infrastructure deployed successfully. Waiting for application deployment.</p>" > /usr/share/nginx/html/index.html
          EXPOSE 80
          EOF
            
            # Build and push
            docker build -t ${{ steps.acr_details.outputs.acr_login_server }}/policycortex-$service:latest /tmp/$service
            docker push ${{ steps.acr_details.outputs.acr_login_server }}/policycortex-$service:latest
          done
        working-directory: infrastructure/terraform

      - name: Verify Container Apps Deployment
        run: |
          echo "Verifying Container Apps are running..."
          
          RESOURCE_GROUP=$(terraform output -raw resource_group_name)
          
          # Wait for Container Apps to be ready
          sleep 60
          
          # Check each Container App status
          services=("api-gateway" "azure-integration" "ai-engine" "data-processing" "conversation" "notification" "frontend")
          
          for service in "${services[@]}"; do
            echo "Checking ca-$service-prod..."
            status=$(az containerapp show --name ca-$service-prod --resource-group $RESOURCE_GROUP --query "properties.provisioningState" -o tsv 2>/dev/null || echo "NotFound")
            echo "  Status: $status"
            
            if [ "$status" = "Succeeded" ]; then
              fqdn=$(az containerapp show --name ca-$service-prod --resource-group $RESOURCE_GROUP --query "properties.configuration.ingress.fqdn" -o tsv 2>/dev/null || echo "No ingress")
              if [ "$fqdn" != "No ingress" ]; then
                echo "  URL: https://$fqdn"
              fi
            fi
          done
        working-directory: infrastructure/terraform

      - name: Display Deployment Summary
        run: |
          echo "=================================="
          echo "üéâ Infrastructure Deployment Complete!"
          echo "=================================="
          echo "Environment: production"
          echo ""
          echo "üìã Resources Created:"
          echo "‚úÖ Resource Group: $(terraform output -raw resource_group_name)"
          echo "‚úÖ Container Registry: $(terraform output -raw container_registry_name)"
          echo "‚úÖ Storage Account: $(terraform output -raw storage_account_name)"
          echo "‚úÖ Key Vault: $(terraform output -raw key_vault_name)"
          echo "‚úÖ Container Apps Environment: $(terraform output -raw container_app_environment_name)"
          echo "‚úÖ Log Analytics Workspace: $(terraform output -raw log_analytics_workspace_id | cut -d'/' -f9)"
          echo ""
          echo "üåê Application URLs:"
          API_URL=$(terraform output -raw api_gateway_url 2>/dev/null || echo "Not yet available")
          FRONTEND_URL=$(terraform output -raw frontend_url 2>/dev/null || echo "Not yet available")
          echo "üîå API Gateway: $API_URL"
          echo "üåç Frontend: $FRONTEND_URL"
          echo ""
          echo "üìù Next Steps:"
          echo "1. Run application deployment to deploy your actual services"
          echo "2. Access the frontend URL above to verify deployment"
          echo "3. Check Azure Portal for detailed resource information"
          echo "=================================="
        working-directory: infrastructure/terraform

  destroy:
    name: Destroy Environment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.terraform_action == 'destroy'
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="storage_account_name=${{ secrets.TERRAFORM_BACKEND_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TERRAFORM_BACKEND_CONTAINER }}" \
            -backend-config="key=${{ github.event.inputs.environment }}/terraform.tfstate" \
            -backend-config="resource_group_name=${{ secrets.TERRAFORM_BACKEND_RESOURCE_GROUP }}"
        working-directory: infrastructure/terraform

      - name: Terraform Destroy
        run: |
          terraform destroy \
            -var-file="environments/${{ github.event.inputs.environment }}/terraform.tfvars" \
            -auto-approve
        working-directory: infrastructure/terraform