/**
 * PATENT NOTICE: This code implements methods covered by:
 * - US Patent Application 17/123,458 - Unified AI-Driven Cloud Governance Platform
 * Unauthorized use, reproduction, or distribution may constitute patent infringement.
 * Â© 2026 PolicyCortex. All rights reserved.
 */

'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import {
  Shield,
  AlertTriangle,
  AlertCircle,
  CheckCircle,
  XCircle,
  Search,
  Activity,
  Clock,
  TrendingUp,
  Server,
  Database,
  Globe,
  Package,
  Zap,
  Play,
  Download,
  RefreshCw,
  ChevronRight,
  Filter,
  Target,
  Bug,
  Eye,
  Settings,
  BarChart3,
  PieChart,
  Calendar,
  FileText,
  Users,
  Layers,
  Code,
  History,
  Scan,
  AlertOctagon,
  ThumbsUp,
  ThumbsDown
} from 'lucide-react'

interface Vulnerability {
  id: string
  cveId: string
  name: string
  description: string
  severity: 'critical' | 'high' | 'medium' | 'low'
  cvssScore: number
  affectedResources: string[]
  exploitAvailable: boolean
  patchAvailable: boolean
  discoveredAt: string
  status: 'open' | 'patching' | 'mitigated' | 'accepted'
  remediationSteps: string[]
  category: string
  firstDetected: string
  lastUpdated: string
  environment: 'production' | 'staging' | 'development'
  riskScore: number
  priority: 'critical' | 'high' | 'medium' | 'low'
}

interface ScanHistory {
  id: string
  timestamp: string
  type: 'full' | 'incremental' | 'targeted'
  duration: string
  vulnerabilitiesFound: number
  status: 'completed' | 'running' | 'failed'
  coverage: number
}

interface SecurityMetrics {
  totalVulnerabilities: number
  criticalVulnerabilities: number
  highVulnerabilities: number
  mediumVulnerabilities: number
  lowVulnerabilities: number
  openVulnerabilities: number
  patchingInProgress: number
  mitigatedVulnerabilities: number
  acceptedRisk: number
  exploitableVulns: number
  patchableVulns: number
  averageTimeToRemediate: number
  securityScore: number
  trendDirection: 'up' | 'down' | 'stable'
}

export default function VulnerabilityScanPage() {
  const [selectedTab, setSelectedTab] = useState<'overview' | 'vulnerabilities' | 'scans' | 'reports' | 'settings' | 'analytics'>('overview')
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([])
  const [scanHistory, setScanHistory] = useState<ScanHistory[]>([])
  const [metrics, setMetrics] = useState<SecurityMetrics>({
    totalVulnerabilities: 0,
    criticalVulnerabilities: 0,
    highVulnerabilities: 0,
    mediumVulnerabilities: 0,
    lowVulnerabilities: 0,
    openVulnerabilities: 0,
    patchingInProgress: 0,
    mitigatedVulnerabilities: 0,
    acceptedRisk: 0,
    exploitableVulns: 0,
    patchableVulns: 0,
    averageTimeToRemediate: 0,
    securityScore: 0,
    trendDirection: 'stable'
  })
  const [scanStatus, setScanStatus] = useState<'idle' | 'scanning' | 'completed'>('idle')
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [severityFilter, setSeverityFilter] = useState<string>('all')
  const [statusFilter, setStatusFilter] = useState<string>('all')
  const [environmentFilter, setEnvironmentFilter] = useState<string>('all')

  useEffect(() => {
    // Simulate data loading
    setTimeout(() => {
      const mockVulnerabilities: Vulnerability[] = [
        {
          id: 'VUL-001',
          cveId: 'CVE-2024-1234',
          name: 'Remote Code Execution in Log4j',
          description: 'Critical vulnerability allowing remote code execution through log injection',
          severity: 'critical',
          cvssScore: 9.8,
          affectedResources: ['api-server-01', 'api-server-02', 'logging-service'],
          exploitAvailable: true,
          patchAvailable: true,
          discoveredAt: '2 hours ago',
          status: 'open',
          remediationSteps: [
            'Update Log4j to version 2.17.1 or later',
            'Apply WAF rules to block exploit attempts',
            'Review logs for exploitation attempts'
          ],
          category: 'Application Security',
          firstDetected: '2024-01-15T10:30:00Z',
          lastUpdated: '2024-01-15T14:30:00Z',
          environment: 'production',
          riskScore: 95,
          priority: 'critical'
        },
        {
          id: 'VUL-002',
          cveId: 'CVE-2024-5678',
          name: 'SQL Injection in Web Application',
          description: 'Input validation bypass allowing SQL injection attacks',
          severity: 'high',
          cvssScore: 8.2,
          affectedResources: ['web-app-prod', 'web-app-staging'],
          exploitAvailable: true,
          patchAvailable: false,
          discoveredAt: '1 day ago',
          status: 'patching',
          remediationSteps: [
            'Implement parameterized queries',
            'Add input validation',
            'Deploy WAF with SQL injection rules'
          ],
          category: 'Application Security',
          firstDetected: '2024-01-14T09:15:00Z',
          lastUpdated: '2024-01-15T11:20:00Z',
          environment: 'production',
          riskScore: 88,
          priority: 'high'
        },
        {
          id: 'VUL-003',
          cveId: 'CVE-2024-9012',
          name: 'Privilege Escalation in Container Runtime',
          description: 'Local privilege escalation vulnerability in container runtime',
          severity: 'high',
          cvssScore: 7.8,
          affectedResources: ['k8s-node-01', 'k8s-node-02', 'k8s-node-03'],
          exploitAvailable: false,
          patchAvailable: true,
          discoveredAt: '3 days ago',
          status: 'mitigated',
          remediationSteps: [
            'Update container runtime to latest version',
            'Apply security policies',
            'Enable audit logging'
          ],
          category: 'Infrastructure',
          firstDetected: '2024-01-12T16:45:00Z',
          lastUpdated: '2024-01-15T08:30:00Z',
          environment: 'production',
          riskScore: 75,
          priority: 'high'
        },
        {
          id: 'VUL-004',
          cveId: 'CVE-2024-3456',
          name: 'Cross-Site Scripting (XSS)',
          description: 'Stored XSS vulnerability in user input fields',
          severity: 'medium',
          cvssScore: 6.1,
          affectedResources: ['frontend-app', 'admin-portal'],
          exploitAvailable: true,
          patchAvailable: true,
          discoveredAt: '1 week ago',
          status: 'open',
          remediationSteps: [
            'Sanitize user inputs',
            'Implement Content Security Policy',
            'Update frontend framework'
          ],
          category: 'Application Security',
          firstDetected: '2024-01-08T14:20:00Z',
          lastUpdated: '2024-01-15T09:15:00Z',
          environment: 'staging',
          riskScore: 62,
          priority: 'medium'
        },
        {
          id: 'VUL-005',
          cveId: 'CVE-2024-7890',
          name: 'Weak TLS Configuration',
          description: 'Services using outdated TLS versions and weak cipher suites',
          severity: 'medium',
          cvssScore: 5.3,
          affectedResources: ['legacy-api', 'ftp-server'],
          exploitAvailable: false,
          patchAvailable: true,
          discoveredAt: '2 weeks ago',
          status: 'accepted',
          remediationSteps: [
            'Disable TLS 1.0 and 1.1',
            'Configure strong cipher suites',
            'Enable HSTS'
          ],
          category: 'Network Security',
          firstDetected: '2024-01-01T12:00:00Z',
          lastUpdated: '2024-01-15T10:45:00Z',
          environment: 'production',
          riskScore: 45,
          priority: 'low'
        },
        {
          id: 'VUL-006',
          cveId: 'CVE-2024-1111',
          name: 'Buffer Overflow in Network Service',
          description: 'Stack-based buffer overflow in network daemon',
          severity: 'critical',
          cvssScore: 9.3,
          affectedResources: ['network-daemon-01', 'network-daemon-02'],
          exploitAvailable: true,
          patchAvailable: true,
          discoveredAt: '4 hours ago',
          status: 'open',
          remediationSteps: [
            'Apply security patch immediately',
            'Restart affected services',
            'Implement network segmentation'
          ],
          category: 'Network Security',
          firstDetected: '2024-01-15T08:00:00Z',
          lastUpdated: '2024-01-15T12:00:00Z',
          environment: 'production',
          riskScore: 92,
          priority: 'critical'
        },
        {
          id: 'VUL-007',
          cveId: 'CVE-2024-2222',
          name: 'Authentication Bypass',
          description: 'Authentication mechanism can be bypassed through crafted requests',
          severity: 'high',
          cvssScore: 8.5,
          affectedResources: ['auth-service', 'api-gateway'],
          exploitAvailable: false,
          patchAvailable: true,
          discoveredAt: '6 hours ago',
          status: 'patching',
          remediationSteps: [
            'Update authentication library',
            'Review authentication flow',
            'Enable additional logging'
          ],
          category: 'Access Control',
          firstDetected: '2024-01-15T06:30:00Z',
          lastUpdated: '2024-01-15T13:15:00Z',
          environment: 'production',
          riskScore: 85,
          priority: 'high'
        },
        {
          id: 'VUL-008',
          cveId: 'CVE-2024-3333',
          name: 'Information Disclosure in API',
          description: 'Sensitive information exposed through API error messages',
          severity: 'medium',
          cvssScore: 5.8,
          affectedResources: ['user-api', 'profile-service'],
          exploitAvailable: false,
          patchAvailable: false,
          discoveredAt: '2 days ago',
          status: 'open',
          remediationSteps: [
            'Implement proper error handling',
            'Remove sensitive data from error messages',
            'Add response sanitization'
          ],
          category: 'Data Security',
          firstDetected: '2024-01-13T11:45:00Z',
          lastUpdated: '2024-01-15T07:30:00Z',
          environment: 'development',
          riskScore: 55,
          priority: 'medium'
        }
      ]

      const mockScanHistory: ScanHistory[] = [
        {
          id: 'SCAN-001',
          timestamp: '2024-01-15T14:00:00Z',
          type: 'full',
          duration: '2h 15m',
          vulnerabilitiesFound: 8,
          status: 'completed',
          coverage: 98.5
        },
        {
          id: 'SCAN-002',
          timestamp: '2024-01-14T08:00:00Z',
          type: 'incremental',
          duration: '45m',
          vulnerabilitiesFound: 3,
          status: 'completed',
          coverage: 100
        },
        {
          id: 'SCAN-003',
          timestamp: '2024-01-13T20:00:00Z',
          type: 'targeted',
          duration: '1h 30m',
          vulnerabilitiesFound: 2,
          status: 'completed',
          coverage: 85
        },
        {
          id: 'SCAN-004',
          timestamp: '2024-01-12T16:00:00Z',
          type: 'full',
          duration: '2h 45m',
          vulnerabilitiesFound: 12,
          status: 'completed',
          coverage: 97.8
        }
      ]

      setVulnerabilities(mockVulnerabilities)
      setScanHistory(mockScanHistory)
      
      // Calculate metrics
      const critical = mockVulnerabilities.filter(v => v.severity === 'critical').length
      const high = mockVulnerabilities.filter(v => v.severity === 'high').length
      const medium = mockVulnerabilities.filter(v => v.severity === 'medium').length
      const low = mockVulnerabilities.filter(v => v.severity === 'low').length
      const open = mockVulnerabilities.filter(v => v.status === 'open').length
      const patching = mockVulnerabilities.filter(v => v.status === 'patching').length
      const mitigated = mockVulnerabilities.filter(v => v.status === 'mitigated').length
      const accepted = mockVulnerabilities.filter(v => v.status === 'accepted').length
      const exploitable = mockVulnerabilities.filter(v => v.exploitAvailable).length
      const patchable = mockVulnerabilities.filter(v => v.patchAvailable).length

      setMetrics({
        totalVulnerabilities: mockVulnerabilities.length,
        criticalVulnerabilities: critical,
        highVulnerabilities: high,
        mediumVulnerabilities: medium,
        lowVulnerabilities: low,
        openVulnerabilities: open,
        patchingInProgress: patching,
        mitigatedVulnerabilities: mitigated,
        acceptedRisk: accepted,
        exploitableVulns: exploitable,
        patchableVulns: patchable,
        averageTimeToRemediate: 4.2,
        securityScore: 78,
        trendDirection: 'up'
      })

      setScanStatus('completed')
      setLoading(false)
    }, 1000)

    // Real-time updates
    const interval = setInterval(() => {
      setMetrics(prev => ({
        ...prev,
        securityScore: prev.securityScore + (Math.random() - 0.5) * 2,
        trendDirection: Math.random() > 0.5 ? 'up' : 'down'
      }))
    }, 5000)

    return () => clearInterval(interval)
  }, [])

  // Filter vulnerabilities based on search and filters
  const filteredVulnerabilities = vulnerabilities.filter(vuln => {
    const matchesSearch = vuln.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         vuln.cveId.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         vuln.description.toLowerCase().includes(searchTerm.toLowerCase())
    
    const matchesSeverity = severityFilter === 'all' || vuln.severity === severityFilter
    const matchesStatus = statusFilter === 'all' || vuln.status === statusFilter
    const matchesEnvironment = environmentFilter === 'all' || vuln.environment === environmentFilter
    
    return matchesSearch && matchesSeverity && matchesStatus && matchesEnvironment
  })

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-500/20 text-red-400 border-red-500/30'
      case 'high': return 'bg-orange-500/20 text-orange-400 border-orange-500/30'
      case 'medium': return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30'
      case 'low': return 'bg-blue-500/20 text-blue-400 border-blue-500/30'
      default: return 'bg-gray-500/20 text-gray-400 border-gray-500/30'
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'open': return 'text-red-400'
      case 'patching': return 'text-yellow-400'
      case 'mitigated': return 'text-green-400'
      case 'accepted': return 'text-gray-400'
      default: return 'text-gray-400'
    }
  }

  const startScan = () => {
    setScanStatus('scanning')
    setTimeout(() => setScanStatus('completed'), 3000)
  }

  const tabs = [
    { id: 'overview', label: 'Overview', icon: Eye },
    { id: 'vulnerabilities', label: 'Vulnerabilities', icon: Bug },
    { id: 'scans', label: 'Scan History', icon: History },
    { id: 'reports', label: 'Reports', icon: FileText },
    { id: 'settings', label: 'Settings', icon: Settings },
    { id: 'analytics', label: 'Analytics', icon: BarChart3 }
  ]

  return (
    <div className="min-h-screen bg-black p-8">
      {/* Header */}
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        className="mb-8"
      >
        <div className="flex items-center gap-4 mb-6">
          <div className="p-3 bg-gradient-to-br from-orange-500 to-red-500 rounded-xl">
            <Scan className="w-8 h-8 text-white" />
          </div>
          <div>
            <h1 className="text-4xl font-bold text-white">Vulnerability Scan</h1>
            <p className="text-gray-400 mt-1">Comprehensive security vulnerability assessment and remediation</p>
          </div>
        </div>

        {/* Tab Navigation */}
        <div className="flex space-x-1 bg-white/10 backdrop-blur-xl rounded-xl p-1 border border-white/20">
          {tabs.map((tab) => {
            const Icon = tab.icon
            return (
              <button
                key={tab.id}
                onClick={() => setSelectedTab(tab.id as any)}
                className={`flex items-center gap-2 px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                  selectedTab === tab.id
                    ? 'bg-purple-600 text-white shadow-lg'
                    : 'text-gray-300 hover:text-white hover:bg-white/10'
                }`}
              >
                <Icon className="w-4 h-4" />
                {tab.label}
              </button>
            )
          })}
        </div>
      </motion.div>

      {/* Tab Content */}
      {selectedTab === 'overview' && (
        <div className="space-y-8">
          {/* Stats Cards */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 xl:grid-cols-6 gap-4">
            <motion.div
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ delay: 0.1 }}
              className="bg-white/10 backdrop-blur-xl rounded-xl p-4 border border-white/20"
            >
              <div className="flex items-center justify-between mb-2">
                <AlertTriangle className="w-6 h-6 text-purple-400" />
                <span className="text-xl font-bold text-white">{metrics.totalVulnerabilities}</span>
              </div>
              <p className="text-gray-400 text-sm">Total Vulnerabilities</p>
            </motion.div>

            <motion.div
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ delay: 0.2 }}
              className="bg-white/10 backdrop-blur-xl rounded-xl p-4 border border-white/20"
            >
              <div className="flex items-center justify-between mb-2">
                <AlertOctagon className="w-6 h-6 text-red-400" />
                <span className="text-xl font-bold text-white">{metrics.criticalVulnerabilities}</span>
              </div>
              <p className="text-gray-400 text-sm">Critical</p>
            </motion.div>

            <motion.div
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ delay: 0.3 }}
              className="bg-white/10 backdrop-blur-xl rounded-xl p-4 border border-white/20"
            >
              <div className="flex items-center justify-between mb-2">
                <AlertCircle className="w-6 h-6 text-orange-400" />
                <span className="text-xl font-bold text-white">{metrics.highVulnerabilities}</span>
              </div>
              <p className="text-gray-400 text-sm">High</p>
            </motion.div>

            <motion.div
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ delay: 0.4 }}
              className="bg-white/10 backdrop-blur-xl rounded-xl p-4 border border-white/20"
            >
              <div className="flex items-center justify-between mb-2">
                <XCircle className="w-6 h-6 text-red-400" />
                <span className="text-xl font-bold text-white">{metrics.openVulnerabilities}</span>
              </div>
              <p className="text-gray-400 text-sm">Open</p>
            </motion.div>

            <motion.div
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ delay: 0.5 }}
              className="bg-white/10 backdrop-blur-xl rounded-xl p-4 border border-white/20"
            >
              <div className="flex items-center justify-between mb-2">
                <Target className="w-6 h-6 text-yellow-400" />
                <span className="text-xl font-bold text-white">{metrics.exploitableVulns}</span>
              </div>
              <p className="text-gray-400 text-sm">Exploitable</p>
            </motion.div>

            <motion.div
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ delay: 0.6 }}
              className="bg-white/10 backdrop-blur-xl rounded-xl p-4 border border-white/20"
            >
              <div className="flex items-center justify-between mb-2">
                <Shield className="w-6 h-6 text-green-400" />
                <span className="text-xl font-bold text-white">{Math.round(metrics.securityScore)}</span>
              </div>
              <p className="text-gray-400 text-sm">Security Score</p>
            </motion.div>
          </div>

          {/* Security Overview Charts */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.3 }}
              className="bg-white/10 backdrop-blur-xl rounded-xl p-6 border border-white/20"
            >
              <h3 className="text-lg font-semibold text-white mb-4 flex items-center gap-2">
                <PieChart className="w-5 h-5 text-purple-400" />
                Vulnerability Distribution by Severity
              </h3>
              <div className="space-y-4">
                {['critical', 'high', 'medium', 'low'].map((severity, index) => {
                  const count = metrics[`${severity}Vulnerabilities` as keyof SecurityMetrics] as number
                  const percentage = Math.round((count / metrics.totalVulnerabilities) * 100)
                  const colors = {
                    critical: 'bg-red-500',
                    high: 'bg-orange-500',
                    medium: 'bg-yellow-500',
                    low: 'bg-blue-500'
                  }
                  return (
                    <div key={severity} className="space-y-2">
                      <div className="flex justify-between">
                        <span className="text-gray-300 capitalize">{severity}</span>
                        <span className="text-white font-medium">{count} ({percentage}%)</span>
                      </div>
                      <div className="w-full bg-gray-700 rounded-full h-2">
                        <motion.div
                          initial={{ width: 0 }}
                          animate={{ width: `${percentage}%` }}
                          transition={{ delay: 0.5 + index * 0.1, duration: 0.8 }}
                          className={`h-2 rounded-full ${colors[severity as keyof typeof colors]}`}
                        />
                      </div>
                    </div>
                  )
                })}
              </div>
            </motion.div>

            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.4 }}
              className="bg-white/10 backdrop-blur-xl rounded-xl p-6 border border-white/20"
            >
              <h3 className="text-lg font-semibold text-white mb-4 flex items-center gap-2">
                <BarChart3 className="w-5 h-5 text-purple-400" />
                Remediation Status
              </h3>
              <div className="space-y-4">
                {[
                  { key: 'openVulnerabilities', label: 'Open', color: 'bg-red-500' },
                  { key: 'patchingInProgress', label: 'Patching', color: 'bg-yellow-500' },
                  { key: 'mitigatedVulnerabilities', label: 'Mitigated', color: 'bg-green-500' },
                  { key: 'acceptedRisk', label: 'Risk Accepted', color: 'bg-gray-500' }
                ].map((item, index) => {
                  const count = metrics[item.key as keyof SecurityMetrics] as number
                  const percentage = Math.round((count / metrics.totalVulnerabilities) * 100)
                  return (
                    <div key={item.key} className="space-y-2">
                      <div className="flex justify-between">
                        <span className="text-gray-300">{item.label}</span>
                        <span className="text-white font-medium">{count} ({percentage}%)</span>
                      </div>
                      <div className="w-full bg-gray-700 rounded-full h-2">
                        <motion.div
                          initial={{ width: 0 }}
                          animate={{ width: `${percentage}%` }}
                          transition={{ delay: 0.7 + index * 0.1, duration: 0.8 }}
                          className={`h-2 rounded-full ${item.color}`}
                        />
                      </div>
                    </div>
                  )
                })}
              </div>
            </motion.div>
          </div>

          {/* Recent Vulnerabilities */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.5 }}
            className="bg-white/10 backdrop-blur-xl rounded-xl p-6 border border-white/20"
          >
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-white flex items-center gap-2">
                <AlertTriangle className="w-5 h-5 text-purple-400" />
                Recent Critical Vulnerabilities
              </h3>
              <button
                onClick={startScan}
                disabled={scanStatus === 'scanning'}
                className={`px-4 py-2 rounded-lg transition-colors flex items-center gap-2 text-sm ${
                  scanStatus === 'scanning'
                    ? 'bg-gray-600 cursor-not-allowed'
                    : 'bg-purple-600 hover:bg-purple-700'
                } text-white`}
              >
                {scanStatus === 'scanning' ? (
                  <>
                    <RefreshCw className="w-4 h-4 animate-spin" />
                    Scanning...
                  </>
                ) : (
                  <>
                    <Play className="w-4 h-4" />
                    Start Scan
                  </>
                )}
              </button>
            </div>
            
            <div className="space-y-3">
              {vulnerabilities
                .filter(v => v.severity === 'critical' || v.severity === 'high')
                .slice(0, 5)
                .map((vuln, index) => (
                  <motion.div
                    key={vuln.id}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: 0.1 + index * 0.05 }}
                    className="flex items-center justify-between p-3 bg-black/20 rounded-lg hover:bg-black/30 transition-colors"
                  >
                    <div className="flex items-center gap-3">
                      <span className={`px-2 py-1 rounded-full text-xs font-medium border ${getSeverityColor(vuln.severity)}`}>
                        {vuln.severity.toUpperCase()}
                      </span>
                      <div>
                        <p className="text-white font-medium">{vuln.name}</p>
                        <p className="text-gray-400 text-sm">{vuln.cveId} â¢ CVSS {vuln.cvssScore}</p>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <span className={`text-sm ${getStatusColor(vuln.status)}`}>
                        {vuln.status.charAt(0).toUpperCase() + vuln.status.slice(1)}
                      </span>
                      <ChevronRight className="w-4 h-4 text-gray-400" />
                    </div>
                  </motion.div>
                ))}
            </div>
          </motion.div>
        </div>
      )}

      {selectedTab === 'vulnerabilities' && (
        <div className="space-y-6">
          {/* Search and Filters */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="bg-white/10 backdrop-blur-xl rounded-xl p-4 border border-white/20"
          >
            <div className="flex flex-wrap gap-4">
              <div className="flex-1 min-w-64">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                  <input
                    type="text"
                    placeholder="Search vulnerabilities..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="w-full pl-10 pr-4 py-2 bg-black/20 border border-white/20 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-purple-500"
                  />
                </div>
              </div>
              
              <select
                value={severityFilter}
                onChange={(e) => setSeverityFilter(e.target.value)}
                className="px-4 py-2 bg-black/20 border border-white/20 rounded-lg text-white focus:outline-none focus:border-purple-500"
              >
                <option value="all">All Severities</option>
                <option value="critical">Critical</option>
                <option value="high">High</option>
                <option value="medium">Medium</option>
                <option value="low">Low</option>
              </select>

              <select
                value={statusFilter}
                onChange={(e) => setStatusFilter(e.target.value)}
                className="px-4 py-2 bg-black/20 border border-white/20 rounded-lg text-white focus:outline-none focus:border-purple-500"
              >
                <option value="all">All Statuses</option>
                <option value="open">Open</option>
                <option value="patching">Patching</option>
                <option value="mitigated">Mitigated</option>
                <option value="accepted">Risk Accepted</option>
              </select>

              <select
                value={environmentFilter}
                onChange={(e) => setEnvironmentFilter(e.target.value)}
                className="px-4 py-2 bg-black/20 border border-white/20 rounded-lg text-white focus:outline-none focus:border-purple-500"
              >
                <option value="all">All Environments</option>
                <option value="production">Production</option>
                <option value="staging">Staging</option>
                <option value="development">Development</option>
              </select>

              <button className="px-4 py-2 bg-purple-600 hover:bg-purple-700 rounded-lg text-white transition-colors flex items-center gap-2">
                <Download className="w-4 h-4" />
                Export
              </button>
            </div>
          </motion.div>

          {/* Vulnerabilities List */}
          <div className="space-y-4">
            {loading ? (
              <div className="flex items-center justify-center py-12">
                <div className="w-12 h-12 border-4 border-purple-400 border-t-transparent rounded-full animate-spin" />
              </div>
            ) : (
              filteredVulnerabilities.map((vuln, index) => (
                <motion.div
                  key={vuln.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.05 }}
                  className="bg-white/10 backdrop-blur-xl rounded-xl border border-white/20 overflow-hidden hover:bg-white/15 transition-colors"
                >
                  <div className="p-6">
                    <div className="flex items-start justify-between mb-4">
                      <div className="flex-1">
                        <div className="flex items-center gap-3 mb-2">
                          <h3 className="text-lg font-semibold text-white">{vuln.name}</h3>
                          <span className={`px-3 py-1 rounded-full text-xs font-medium border ${getSeverityColor(vuln.severity)}`}>
                            {vuln.severity.toUpperCase()}
                          </span>
                          <span className={`text-sm font-medium ${getStatusColor(vuln.status)}`}>
                            {vuln.status.charAt(0).toUpperCase() + vuln.status.slice(1)}
                          </span>
                        </div>
                        <div className="flex items-center gap-4 text-sm text-gray-400 mb-2">
                          <span>{vuln.cveId}</span>
                          <span>CVSS {vuln.cvssScore}</span>
                          <span>Risk Score: {vuln.riskScore}</span>
                          <span className="capitalize">{vuln.environment}</span>
                          <span>{vuln.category}</span>
                        </div>
                        <p className="text-gray-300">{vuln.description}</p>
                      </div>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-4">
                      <div className="bg-black/20 rounded-lg p-3">
                        <p className="text-xs text-gray-400 mb-1">Affected Resources</p>
                        <p className="text-sm text-white font-medium">{vuln.affectedResources.length} resources</p>
                        <p className="text-xs text-gray-500 truncate">{vuln.affectedResources[0]}</p>
                      </div>
                      <div className="bg-black/20 rounded-lg p-3">
                        <p className="text-xs text-gray-400 mb-1">Exploit Status</p>
                        <div className="flex items-center gap-2">
                          {vuln.exploitAvailable ? (
                            <ThumbsDown className="w-4 h-4 text-red-400" />
                          ) : (
                            <ThumbsUp className="w-4 h-4 text-green-400" />
                          )}
                          <p className={`text-sm ${vuln.exploitAvailable ? 'text-red-400' : 'text-green-400'}`}>
                            {vuln.exploitAvailable ? 'Exploit Available' : 'No Known Exploit'}
                          </p>
                        </div>
                      </div>
                      <div className="bg-black/20 rounded-lg p-3">
                        <p className="text-xs text-gray-400 mb-1">Patch Status</p>
                        <p className={`text-sm ${vuln.patchAvailable ? 'text-green-400' : 'text-yellow-400'}`}>
                          {vuln.patchAvailable ? 'Patch Available' : 'No Patch Yet'}
                        </p>
                      </div>
                      <div className="bg-black/20 rounded-lg p-3">
                        <p className="text-xs text-gray-400 mb-1">Priority</p>
                        <span className={`px-2 py-1 rounded-full text-xs font-medium border ${getSeverityColor(vuln.priority)}`}>
                          {vuln.priority.toUpperCase()}
                        </span>
                      </div>
                    </div>

                    <div className="border-t border-white/10 pt-4">
                      <h4 className="text-sm font-medium text-white mb-2">Remediation Steps</h4>
                      <div className="space-y-1 mb-4">
                        {vuln.remediationSteps.map((step, idx) => (
                          <div key={idx} className="flex items-start gap-2">
                            <ChevronRight className="w-4 h-4 text-purple-400 mt-0.5 flex-shrink-0" />
                            <p className="text-sm text-gray-300">{step}</p>
                          </div>
                        ))}
                      </div>
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-4 text-xs text-gray-400">
                          <span>Discovered {vuln.discoveredAt}</span>
                          <span>First Detected: {new Date(vuln.firstDetected).toLocaleDateString()}</span>
                          <span>Last Updated: {new Date(vuln.lastUpdated).toLocaleDateString()}</span>
                        </div>
                        <div className="flex gap-2">
                          {vuln.patchAvailable && vuln.status === 'open' && (
                            <button className="px-3 py-1.5 bg-green-600 hover:bg-green-700 rounded-lg text-white text-sm transition-colors flex items-center gap-1">
                              <Zap className="w-3 h-3" />
                              Apply Patch
                            </button>
                          )}
                          <button className="px-3 py-1.5 bg-purple-600 hover:bg-purple-700 rounded-lg text-white text-sm transition-colors">
                            View Details
                          </button>
                          <button className="px-3 py-1.5 bg-white/10 hover:bg-white/20 border border-white/20 rounded-lg text-white text-sm transition-colors">
                            Create Ticket
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                </motion.div>
              ))
            )}
          </div>

          {filteredVulnerabilities.length === 0 && !loading && (
            <div className="text-center py-12">
              <Bug className="w-16 h-16 text-gray-600 mx-auto mb-4" />
              <h3 className="text-xl font-semibold text-gray-400 mb-2">No vulnerabilities found</h3>
              <p className="text-gray-500">Try adjusting your search criteria or filters.</p>
            </div>
          )}
        </div>
      )}

      {selectedTab === 'scans' && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="space-y-6"
        >
          <div className="flex items-center justify-between">
            <h2 className="text-2xl font-bold text-white">Scan History</h2>
            <button
              onClick={startScan}
              disabled={scanStatus === 'scanning'}
              className={`px-6 py-2 rounded-lg transition-colors flex items-center gap-2 ${
                scanStatus === 'scanning'
                  ? 'bg-gray-600 cursor-not-allowed'
                  : 'bg-purple-600 hover:bg-purple-700'
              } text-white`}
            >
              {scanStatus === 'scanning' ? (
                <>
                  <RefreshCw className="w-4 h-4 animate-spin" />
                  Scanning...
                </>
              ) : (
                <>
                  <Play className="w-4 h-4" />
                  Start New Scan
                </>
              )}
            </button>
          </div>

          <div className="grid gap-4">
            {scanHistory.map((scan, index) => (
              <motion.div
                key={scan.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.1 }}
                className="bg-white/10 backdrop-blur-xl rounded-xl p-6 border border-white/20 hover:bg-white/15 transition-colors"
              >
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center gap-3 mb-2">
                      <h3 className="text-lg font-semibold text-white">
                        {scan.type.charAt(0).toUpperCase() + scan.type.slice(1)} Scan
                      </h3>
                      <span className={`px-3 py-1 rounded-full text-xs font-medium ${
                        scan.status === 'completed' ? 'bg-green-500/20 text-green-400 border border-green-500/30' :
                        scan.status === 'running' ? 'bg-yellow-500/20 text-yellow-400 border border-yellow-500/30' :
                        'bg-red-500/20 text-red-400 border border-red-500/30'
                      }`}>
                        {scan.status.toUpperCase()}
                      </span>
                    </div>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                      <div>
                        <p className="text-gray-400">Started</p>
                        <p className="text-white">{new Date(scan.timestamp).toLocaleString()}</p>
                      </div>
                      <div>
                        <p className="text-gray-400">Duration</p>
                        <p className="text-white">{scan.duration}</p>
                      </div>
                      <div>
                        <p className="text-gray-400">Vulnerabilities Found</p>
                        <p className="text-white">{scan.vulnerabilitiesFound}</p>
                      </div>
                      <div>
                        <p className="text-gray-400">Coverage</p>
                        <p className="text-white">{scan.coverage}%</p>
                      </div>
                    </div>
                  </div>
                  <div className="flex gap-2">
                    <button className="px-3 py-1.5 bg-purple-600 hover:bg-purple-700 rounded-lg text-white text-sm transition-colors">
                      View Report
                    </button>
                    <button className="px-3 py-1.5 bg-white/10 hover:bg-white/20 border border-white/20 rounded-lg text-white text-sm transition-colors">
                      Download
                    </button>
                  </div>
                </div>
              </motion.div>
            ))}
          </div>
        </motion.div>
      )}

      {selectedTab === 'reports' && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="space-y-6"
        >
          <div className="flex items-center justify-between">
            <h2 className="text-2xl font-bold text-white">Security Reports</h2>
            <button className="px-6 py-2 bg-purple-600 hover:bg-purple-700 rounded-lg text-white transition-colors flex items-center gap-2">
              <Download className="w-4 h-4" />
              Generate Report
            </button>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {[
              { title: 'Executive Summary', description: 'High-level security posture overview', icon: FileText },
              { title: 'Technical Report', description: 'Detailed technical vulnerability analysis', icon: Code },
              { title: 'Compliance Report', description: 'Security compliance status and gaps', icon: CheckCircle },
              { title: 'Remediation Plan', description: 'Prioritized remediation roadmap', icon: Target },
              { title: 'Trend Analysis', description: 'Security trends and improvements', icon: TrendingUp },
              { title: 'Asset Inventory', description: 'Scanned assets and coverage', icon: Database }
            ].map((report, index) => {
              const Icon = report.icon
              return (
                <motion.div
                  key={report.title}
                  initial={{ opacity: 0, scale: 0.9 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ delay: index * 0.1 }}
                  className="bg-white/10 backdrop-blur-xl rounded-xl p-6 border border-white/20 hover:bg-white/15 transition-colors cursor-pointer group"
                >
                  <div className="flex items-center gap-3 mb-3">
                    <div className="p-2 bg-purple-500/20 rounded-lg group-hover:bg-purple-500/30 transition-colors">
                      <Icon className="w-5 h-5 text-purple-400" />
                    </div>
                    <h3 className="text-lg font-semibold text-white">{report.title}</h3>
                  </div>
                  <p className="text-gray-400 text-sm mb-4">{report.description}</p>
                  <div className="flex gap-2">
                    <button className="flex-1 px-3 py-2 bg-purple-600 hover:bg-purple-700 rounded-lg text-white text-sm transition-colors">
                      Generate
                    </button>
                    <button className="px-3 py-2 bg-white/10 hover:bg-white/20 border border-white/20 rounded-lg text-white text-sm transition-colors">
                      <Download className="w-4 h-4" />
                    </button>
                  </div>
                </motion.div>
              )
            })}
          </div>
        </motion.div>
      )}

      {selectedTab === 'settings' && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="space-y-6"
        >
          <h2 className="text-2xl font-bold text-white">Scan Settings</h2>

          <div className="grid gap-6">
            <div className="bg-white/10 backdrop-blur-xl rounded-xl p-6 border border-white/20">
              <h3 className="text-lg font-semibold text-white mb-4">Scan Configuration</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-gray-300 text-sm mb-2">Scan Frequency</label>
                  <select className="w-full px-4 py-2 bg-black/20 border border-white/20 rounded-lg text-white focus:outline-none focus:border-purple-500">
                    <option>Daily</option>
                    <option>Weekly</option>
                    <option>Monthly</option>
                  </select>
                </div>
                <div>
                  <label className="block text-gray-300 text-sm mb-2">Scan Type</label>
                  <select className="w-full px-4 py-2 bg-black/20 border border-white/20 rounded-lg text-white focus:outline-none focus:border-purple-500">
                    <option>Full Scan</option>
                    <option>Incremental Scan</option>
                    <option>Targeted Scan</option>
                  </select>
                </div>
              </div>
            </div>

            <div className="bg-white/10 backdrop-blur-xl rounded-xl p-6 border border-white/20">
              <h3 className="text-lg font-semibold text-white mb-4">Notification Settings</h3>
              <div className="space-y-4">
                {[
                  'Critical vulnerabilities detected',
                  'Scan completion',
                  'Patch availability',
                  'Weekly summary reports'
                ].map((setting, index) => (
                  <label key={index} className="flex items-center gap-3">
                    <input
                      type="checkbox"
                      defaultChecked
                      className="w-4 h-4 text-purple-600 bg-black/20 border-white/20 rounded focus:ring-purple-500"
                    />
                    <span className="text-gray-300">{setting}</span>
                  </label>
                ))}
              </div>
            </div>

            <div className="bg-white/10 backdrop-blur-xl rounded-xl p-6 border border-white/20">
              <h3 className="text-lg font-semibold text-white mb-4">Integration Settings</h3>
              <div className="space-y-4">
                <div className="flex items-center justify-between p-3 bg-black/20 rounded-lg">
                  <div className="flex items-center gap-3">
                    <div className="w-8 h-8 bg-green-500 rounded-lg flex items-center justify-center">
                      <CheckCircle className="w-4 h-4 text-white" />
                    </div>
                    <div>
                      <p className="text-white font-medium">JIRA Integration</p>
                      <p className="text-gray-400 text-sm">Auto-create tickets for vulnerabilities</p>
                    </div>
                  </div>
                  <button className="px-3 py-1.5 bg-green-600/20 text-green-400 rounded-lg text-sm border border-green-500/30">
                    Connected
                  </button>
                </div>
                <div className="flex items-center justify-between p-3 bg-black/20 rounded-lg">
                  <div className="flex items-center gap-3">
                    <div className="w-8 h-8 bg-gray-500 rounded-lg flex items-center justify-center">
                      <XCircle className="w-4 h-4 text-white" />
                    </div>
                    <div>
                      <p className="text-white font-medium">Slack Integration</p>
                      <p className="text-gray-400 text-sm">Send notifications to security channels</p>
                    </div>
                  </div>
                  <button className="px-3 py-1.5 bg-purple-600 hover:bg-purple-700 rounded-lg text-white text-sm transition-colors">
                    Connect
                  </button>
                </div>
              </div>
            </div>
          </div>
        </motion.div>
      )}

      {selectedTab === 'analytics' && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="space-y-6"
        >
          <h2 className="text-2xl font-bold text-white">Security Analytics</h2>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div className="bg-white/10 backdrop-blur-xl rounded-xl p-6 border border-white/20">
              <h3 className="text-lg font-semibold text-white mb-4 flex items-center gap-2">
                <TrendingUp className="w-5 h-5 text-purple-400" />
                Security Trends (Last 30 Days)
              </h3>
              <div className="space-y-4">
                <div className="flex justify-between items-center p-3 bg-black/20 rounded-lg">
                  <span className="text-gray-300">New Vulnerabilities</span>
                  <div className="flex items-center gap-2">
                    <span className="text-white font-medium">+12</span>
                    <TrendingUp className="w-4 h-4 text-red-400" />
                  </div>
                </div>
                <div className="flex justify-between items-center p-3 bg-black/20 rounded-lg">
                  <span className="text-gray-300">Patched Vulnerabilities</span>
                  <div className="flex items-center gap-2">
                    <span className="text-white font-medium">18</span>
                    <TrendingUp className="w-4 h-4 text-green-400" />
                  </div>
                </div>
                <div className="flex justify-between items-center p-3 bg-black/20 rounded-lg">
                  <span className="text-gray-300">Mean Time to Remediate</span>
                  <div className="flex items-center gap-2">
                    <span className="text-white font-medium">4.2 days</span>
                    <TrendingUp className="w-4 h-4 text-green-400 rotate-180" />
                  </div>
                </div>
                <div className="flex justify-between items-center p-3 bg-black/20 rounded-lg">
                  <span className="text-gray-300">Security Score</span>
                  <div className="flex items-center gap-2">
                    <span className="text-white font-medium">{Math.round(metrics.securityScore)}</span>
                    <TrendingUp className={`w-4 h-4 ${metrics.trendDirection === 'up' ? 'text-green-400' : 'text-red-400'} ${metrics.trendDirection === 'down' ? 'rotate-180' : ''}`} />
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-white/10 backdrop-blur-xl rounded-xl p-6 border border-white/20">
              <h3 className="text-lg font-semibold text-white mb-4 flex items-center gap-2">
                <BarChart3 className="w-5 h-5 text-purple-400" />
                Risk Distribution by Category
              </h3>
              <div className="space-y-4">
                {[
                  { category: 'Application Security', count: 4, risk: 'High' },
                  { category: 'Network Security', count: 2, risk: 'Critical' },
                  { category: 'Infrastructure', count: 1, risk: 'High' },
                  { category: 'Access Control', count: 1, risk: 'High' },
                  { category: 'Data Security', count: 1, risk: 'Medium' }
                ].map((item, index) => (
                  <div key={item.category} className="flex items-center justify-between p-3 bg-black/20 rounded-lg">
                    <div>
                      <p className="text-white font-medium">{item.category}</p>
                      <p className="text-gray-400 text-sm">{item.count} vulnerabilities</p>
                    </div>
                    <span className={`px-2 py-1 rounded-full text-xs font-medium border ${getSeverityColor(item.risk.toLowerCase())}`}>
                      {item.risk.toUpperCase()}
                    </span>
                  </div>
                ))}
              </div>
            </div>
          </div>

          <div className="bg-white/10 backdrop-blur-xl rounded-xl p-6 border border-white/20">
            <h3 className="text-lg font-semibold text-white mb-4 flex items-center gap-2">
              <Calendar className="w-5 h-5 text-purple-400" />
              Vulnerability Timeline
            </h3>
            <div className="space-y-3">
              {vulnerabilities.slice(0, 8).map((vuln, index) => (
                <div key={vuln.id} className="flex items-center gap-4 p-3 bg-black/20 rounded-lg">
                  <div className="text-gray-400 text-sm min-w-20">
                    {new Date(vuln.firstDetected).toLocaleDateString()}
                  </div>
                  <span className={`px-2 py-1 rounded-full text-xs font-medium border ${getSeverityColor(vuln.severity)}`}>
                    {vuln.severity.toUpperCase()}
                  </span>
                  <div className="flex-1">
                    <p className="text-white font-medium">{vuln.name}</p>
                    <p className="text-gray-400 text-sm">{vuln.cveId}</p>
                  </div>
                  <span className={`text-sm ${getStatusColor(vuln.status)}`}>
                    {vuln.status.charAt(0).toUpperCase() + vuln.status.slice(1)}
                  </span>
                </div>
              ))}
            </div>
          </div>
        </motion.div>
      )}
    </div>
  )
}