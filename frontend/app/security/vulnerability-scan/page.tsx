/**
 * PATENT NOTICE: This code implements methods covered by:
 * - US Patent Application 17/123,458 - Unified AI-Driven Cloud Governance Platform
 * Unauthorized use, reproduction, or distribution may constitute patent infringement.
 * Â© 2026 PolicyCortex. All rights reserved.
 */

'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import {
  Shield,
  AlertTriangle,
  CheckCircle,
  XCircle,
  Search,
  Activity,
  Clock,
  TrendingUp,
  Server,
  Database,
  Globe,
  Package,
  Zap,
  Play,
  Download,
  RefreshCw,
  ChevronRight
} from 'lucide-react'

interface Vulnerability {
  id: string
  cveId: string
  name: string
  description: string
  severity: 'critical' | 'high' | 'medium' | 'low'
  cvssScore: number
  affectedResources: string[]
  exploitAvailable: boolean
  patchAvailable: boolean
  discoveredAt: string
  status: 'open' | 'patching' | 'mitigated' | 'accepted'
  remediationSteps: string[]
}

export default function VulnerabilityScanPage() {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([])
  const [scanStatus, setScanStatus] = useState<'idle' | 'scanning' | 'completed'>('idle')
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    setTimeout(() => {
      setVulnerabilities([
        {
          id: 'VUL-001',
          cveId: 'CVE-2024-1234',
          name: 'Remote Code Execution in Log4j',
          description: 'Critical vulnerability allowing remote code execution through log injection',
          severity: 'critical',
          cvssScore: 9.8,
          affectedResources: ['api-server-01', 'api-server-02', 'logging-service'],
          exploitAvailable: true,
          patchAvailable: true,
          discoveredAt: '2 hours ago',
          status: 'open',
          remediationSteps: [
            'Update Log4j to version 2.17.1 or later',
            'Apply WAF rules to block exploit attempts',
            'Review logs for exploitation attempts'
          ]
        },
        {
          id: 'VUL-002',
          cveId: 'CVE-2024-5678',
          name: 'SQL Injection in Web Application',
          description: 'Input validation bypass allowing SQL injection attacks',
          severity: 'high',
          cvssScore: 8.2,
          affectedResources: ['web-app-prod', 'web-app-staging'],
          exploitAvailable: true,
          patchAvailable: false,
          discoveredAt: '1 day ago',
          status: 'patching',
          remediationSteps: [
            'Implement parameterized queries',
            'Add input validation',
            'Deploy WAF with SQL injection rules'
          ]
        },
        {
          id: 'VUL-003',
          cveId: 'CVE-2024-9012',
          name: 'Privilege Escalation in Container Runtime',
          description: 'Local privilege escalation vulnerability in container runtime',
          severity: 'high',
          cvssScore: 7.8,
          affectedResources: ['k8s-node-01', 'k8s-node-02', 'k8s-node-03'],
          exploitAvailable: false,
          patchAvailable: true,
          discoveredAt: '3 days ago',
          status: 'mitigated',
          remediationSteps: [
            'Update container runtime to latest version',
            'Apply security policies',
            'Enable audit logging'
          ]
        },
        {
          id: 'VUL-004',
          cveId: 'CVE-2024-3456',
          name: 'Cross-Site Scripting (XSS)',
          description: 'Stored XSS vulnerability in user input fields',
          severity: 'medium',
          cvssScore: 6.1,
          affectedResources: ['frontend-app', 'admin-portal'],
          exploitAvailable: true,
          patchAvailable: true,
          discoveredAt: '1 week ago',
          status: 'open',
          remediationSteps: [
            'Sanitize user inputs',
            'Implement Content Security Policy',
            'Update frontend framework'
          ]
        },
        {
          id: 'VUL-005',
          cveId: 'CVE-2024-7890',
          name: 'Weak TLS Configuration',
          description: 'Services using outdated TLS versions and weak cipher suites',
          severity: 'medium',
          cvssScore: 5.3,
          affectedResources: ['legacy-api', 'ftp-server'],
          exploitAvailable: false,
          patchAvailable: true,
          discoveredAt: '2 weeks ago',
          status: 'accepted',
          remediationSteps: [
            'Disable TLS 1.0 and 1.1',
            'Configure strong cipher suites',
            'Enable HSTS'
          ]
        }
      ])
      setScanStatus('completed')
      setLoading(false)
    }, 1000)
  }, [])

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-500/20 text-red-400 border-red-500/30'
      case 'high': return 'bg-orange-500/20 text-orange-400 border-orange-500/30'
      case 'medium': return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30'
      case 'low': return 'bg-blue-500/20 text-blue-400 border-blue-500/30'
      default: return 'bg-gray-500/20 text-gray-400 border-gray-500/30'
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'open': return 'text-red-400'
      case 'patching': return 'text-yellow-400'
      case 'mitigated': return 'text-green-400'
      case 'accepted': return 'text-gray-400'
      default: return 'text-gray-400'
    }
  }

  const criticalCount = vulnerabilities.filter(v => v.severity === 'critical').length
  const highCount = vulnerabilities.filter(v => v.severity === 'high').length
  const openCount = vulnerabilities.filter(v => v.status === 'open').length

  const startScan = () => {
    setScanStatus('scanning')
    setTimeout(() => setScanStatus('completed'), 3000)
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-8">
      {/* Header */}
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        className="mb-8"
      >
        <div className="flex items-center gap-4 mb-2">
          <div className="p-3 bg-gradient-to-br from-orange-500 to-red-500 rounded-xl">
            <Search className="w-8 h-8 text-white" />
          </div>
          <div>
            <h1 className="text-4xl font-bold text-white">Vulnerability Scan</h1>
            <p className="text-gray-400 mt-1">Security vulnerability assessment and remediation</p>
          </div>
        </div>
      </motion.div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-5 gap-4 mb-8">
        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 0.1 }}
          className="bg-white/10 backdrop-blur-xl rounded-xl p-4 border border-white/20"
        >
          <div className="flex items-center justify-between mb-2">
            <AlertTriangle className="w-6 h-6 text-purple-400" />
            <span className="text-xl font-bold text-white">{vulnerabilities.length}</span>
          </div>
          <p className="text-gray-400 text-sm">Total Found</p>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 0.2 }}
          className="bg-white/10 backdrop-blur-xl rounded-xl p-4 border border-white/20"
        >
          <div className="flex items-center justify-between mb-2">
            <XCircle className="w-6 h-6 text-red-400" />
            <span className="text-xl font-bold text-white">{criticalCount}</span>
          </div>
          <p className="text-gray-400 text-sm">Critical</p>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 0.3 }}
          className="bg-white/10 backdrop-blur-xl rounded-xl p-4 border border-white/20"
        >
          <div className="flex items-center justify-between mb-2">
            <AlertCircle className="w-6 h-6 text-orange-400" />
            <span className="text-xl font-bold text-white">{highCount}</span>
          </div>
          <p className="text-gray-400 text-sm">High</p>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 0.4 }}
          className="bg-white/10 backdrop-blur-xl rounded-xl p-4 border border-white/20"
        >
          <div className="flex items-center justify-between mb-2">
            <Shield className="w-6 h-6 text-yellow-400" />
            <span className="text-xl font-bold text-white">{openCount}</span>
          </div>
          <p className="text-gray-400 text-sm">Open</p>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 0.5 }}
          className="bg-white/10 backdrop-blur-xl rounded-xl p-4 border border-white/20"
        >
          <div className="flex items-center justify-between mb-2">
            <Clock className="w-6 h-6 text-gray-400" />
            <span className="text-sm text-white">2h ago</span>
          </div>
          <p className="text-gray-400 text-sm">Last Scan</p>
        </motion.div>
      </div>

      {/* Scan Controls */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex gap-4">
          <button
            onClick={startScan}
            disabled={scanStatus === 'scanning'}
            className={`px-6 py-2 rounded-lg transition-colors flex items-center gap-2 ${
              scanStatus === 'scanning'
                ? 'bg-gray-600 cursor-not-allowed'
                : 'bg-purple-600 hover:bg-purple-700'
            } text-white`}
          >
            {scanStatus === 'scanning' ? (
              <>
                <RefreshCw className="w-4 h-4 animate-spin" />
                Scanning...
              </>
            ) : (
              <>
                <Play className="w-4 h-4" />
                Start New Scan
              </>
            )}
          </button>
          <button className="px-4 py-2 bg-white/10 hover:bg-white/20 border border-white/20 rounded-lg text-white transition-colors flex items-center gap-2">
            <Download className="w-4 h-4" />
            Export Report
          </button>
        </div>
        {scanStatus === 'scanning' && (
          <div className="flex items-center gap-2">
            <Activity className="w-4 h-4 text-purple-400 animate-pulse" />
            <span className="text-sm text-gray-400">Scanning 1,247 resources...</span>
          </div>
        )}
      </div>

      {/* Vulnerabilities List */}
      <div className="space-y-4">
        {loading ? (
          <div className="flex items-center justify-center py-12">
            <div className="w-12 h-12 border-4 border-purple-400 border-t-transparent rounded-full animate-spin" />
          </div>
        ) : (
          vulnerabilities.map((vuln, index) => (
            <motion.div
              key={vuln.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.1 }}
              className="bg-white/10 backdrop-blur-xl rounded-xl border border-white/20 overflow-hidden hover:bg-white/15 transition-colors"
            >
              <div className="p-6">
                <div className="flex items-start justify-between mb-4">
                  <div>
                    <h3 className="text-lg font-semibold text-white mb-1">{vuln.name}</h3>
                    <p className="text-sm text-gray-400 mb-2">{vuln.cveId} â¢ CVSS {vuln.cvssScore}</p>
                    <p className="text-gray-300">{vuln.description}</p>
                  </div>
                  <div className="flex flex-col items-end gap-2">
                    <span className={`px-3 py-1 rounded-full text-xs font-medium border ${getSeverityColor(vuln.severity)}`}>
                      {vuln.severity.toUpperCase()}
                    </span>
                    <span className={`text-sm font-medium ${getStatusColor(vuln.status)}`}>
                      {vuln.status.charAt(0).toUpperCase() + vuln.status.slice(1)}
                    </span>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                  <div className="bg-black/20 rounded-lg p-3">
                    <p className="text-xs text-gray-400 mb-1">Affected Resources</p>
                    <p className="text-sm text-white">{vuln.affectedResources.length} resources</p>
                    <p className="text-xs text-gray-500 truncate">{vuln.affectedResources[0]}</p>
                  </div>
                  <div className="bg-black/20 rounded-lg p-3">
                    <p className="text-xs text-gray-400 mb-1">Exploit Status</p>
                    <p className={`text-sm ${vuln.exploitAvailable ? 'text-red-400' : 'text-green-400'}`}>
                      {vuln.exploitAvailable ? 'Exploit Available' : 'No Known Exploit'}
                    </p>
                  </div>
                  <div className="bg-black/20 rounded-lg p-3">
                    <p className="text-xs text-gray-400 mb-1">Patch Status</p>
                    <p className={`text-sm ${vuln.patchAvailable ? 'text-green-400' : 'text-yellow-400'}`}>
                      {vuln.patchAvailable ? 'Patch Available' : 'No Patch Yet'}
                    </p>
                  </div>
                </div>

                <div className="border-t border-white/10 pt-4">
                  <h4 className="text-sm font-medium text-white mb-2">Remediation Steps</h4>
                  <div className="space-y-1 mb-4">
                    {vuln.remediationSteps.map((step, idx) => (
                      <div key={idx} className="flex items-start gap-2">
                        <ChevronRight className="w-4 h-4 text-purple-400 mt-0.5" />
                        <p className="text-sm text-gray-300">{step}</p>
                      </div>
                    ))}
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-xs text-gray-400">Discovered {vuln.discoveredAt}</span>
                    <div className="flex gap-2">
                      {vuln.patchAvailable && vuln.status === 'open' && (
                        <button className="px-3 py-1.5 bg-green-600 hover:bg-green-700 rounded-lg text-white text-sm transition-colors flex items-center gap-1">
                          <Zap className="w-3 h-3" />
                          Apply Patch
                        </button>
                      )}
                      <button className="px-3 py-1.5 bg-purple-600 hover:bg-purple-700 rounded-lg text-white text-sm transition-colors">
                        View Details
                      </button>
                      <button className="px-3 py-1.5 bg-white/10 hover:bg-white/20 border border-white/20 rounded-lg text-white text-sm transition-colors">
                        Create Ticket
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </motion.div>
          ))
        )}
      </div>
    </div>
  )
}