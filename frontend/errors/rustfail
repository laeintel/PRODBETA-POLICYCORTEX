#16 699.7    Compiling policycortex-core v2.0.0 (/app)
#16 699.9     Finished `release` profile [optimized] target(s) in 11m 39s
#16 699.9 warning: the following packages contain code that will be rejected by a future version of Rust: redis v0.23.3, sqlx-postgres v0.7.4
#16 699.9 note: to see what the problems were, use the option `--future-incompat-report`, or run `cargo report future-incompatibilities --id 1`
#16 DONE 700.1s
#17 [builder 6/7] COPY src ./src
#17 DONE 0.2s
#18 [builder 7/7] RUN touch src/main.rs && cargo build --release
#18 0.501    Compiling policycortex-core v2.0.0 (/app)
#18 0.711 error: `SQLX_OFFLINE=true` but there is no cached data for this query, run `cargo sqlx prepare` to update the query cache or unset `SQLX_OFFLINE`
#18 0.711    --> src/action_orchestrator.rs:465:30
#18 0.711     |
#18 0.711 465 |               if let Ok(row) = sqlx::query!(
#18 0.711     |  ______________________________^
#18 0.711 466 | |                 r#"SELECT action_id, created_at, expires_at, result FROM idempotency_records WHERE key = $1"#,
#18 0.711 467 | |                 key
#18 0.711 468 | |             )
#18 0.711     | |_____________^
#18 0.711     |
#18 0.711     = note: this error originates in the macro `$crate::sqlx_macros::expand_query` which comes from the expansion of the macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for more info)
#18 0.711 
#18 0.713 error: `SQLX_OFFLINE=true` but there is no cached data for this query, run `cargo sqlx prepare` to update the query cache or unset `SQLX_OFFLINE`
#18 0.713    --> src/action_orchestrator.rs:506:21
#18 0.714     |
#18 0.714 506 |               let _ = sqlx::query!(
#18 0.714     |  _____________________^
#18 0.714 507 | |                 r#"INSERT INTO idempotency_records (key, action_id, result, created_at, expires_at)
#18 0.715 508 | |                    VALUES ($1, $2, $3, NOW(), NOW() + INTERVAL '24 hours')
#18 0.715 509 | |                    ON CONFLICT (key) DO NOTHING"#,
#18 0.715 ...   |
#18 0.715 512 | |                 Option::<serde_json::Value>::None,
#18 0.715 513 | |             )
#18 0.715     | |_____________^
#18 0.715     |
#18 0.715     = note: this error originates in the macro `$crate::sqlx_macros::expand_query` which comes from the expansion of the macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for more info)
#18 0.715 
#18 0.715 error: `SQLX_OFFLINE=true` but there is no cached data for this query, run `cargo sqlx prepare` to update the query cache or unset `SQLX_OFFLINE`
#18 0.715    --> src/action_orchestrator.rs:543:23
#18 0.715     |
#18 0.715 543 |               let row = sqlx::query!(
#18 0.715     |  _______________________^
#18 0.715 544 | |                 r#"SELECT COUNT(1) as count FROM approval_requests
#18 0.715 545 | |                    WHERE tenant_id = $1 AND action_type = $2 AND resource_id = $3
#18 0.715 546 | |                      AND status::text = 'Approved' AND expires_at > NOW()"#,
#18 0.715 ...   |
#18 0.715 549 | |                 action.target_resource
#18 0.716 550 | |             )
#18 0.716     | |_____________^
#18 0.716     |
#18 0.716     = note: this error originates in the macro `$crate::sqlx_macros::expand_query` which comes from the expansion of the macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for more info)
#18 0.717 
#18 0.717 error: `SQLX_OFFLINE=true` but there is no cached data for this query, run `cargo sqlx prepare` to update the query cache or unset `SQLX_OFFLINE`
#18 0.717    --> src/action_orchestrator.rs:674:9
#18 0.717     |
#18 0.717 674 | /         sqlx::query!(
#18 0.717 675 | |             r#"
#18 0.717 676 | |             INSERT INTO commands (
#18 0.717 677 | |               command_id, command_type, command_data, aggregate_id, tenant_id, user_id,
#18 0.717 ...   |
#18 0.717 692 | |             action.idempotency_key
#18 0.717 693 | |         )
#18 0.717     | |_________^
#18 0.717     |
#18 0.717     = note: this error originates in the macro `$crate::sqlx_macros::expand_query` which comes from the expansion of the macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for more info)
#18 0.717 
#18 0.904 error: `SQLX_OFFLINE=true` but there is no cached data for this query, run `cargo sqlx prepare` to update the query cache or unset `SQLX_OFFLINE`
#18 0.905     --> src/api/mod.rs:1390:17
#18 0.905      |
#18 0.905 1390 |           let _ = sqlx::query!(
#18 0.905      |  _________________^
#18 0.905 1391 | |             r#"INSERT INTO exceptions (
#18 0.905 1392 | |                 id, tenant_id, resource_id, policy_id, reason, status, created_by, created_at, expires_at, recertify_at, evidence, metadata
#18 0.905 1393 | |             ) VALUES ($1,$2,$3,$4,$5,'Approved',$6,NOW(),$7,$8,$9,$10)"#,
#18 0.905 ...    |
#18 0.905 1403 | |             serde_json::json!(***)
#18 0.905 1404 | |         )
#18 0.905      | |_________^
#18 0.905      |
#18 0.905      = note: this error originates in the macro `$crate::sqlx_macros::expand_query` which comes from the expansion of the macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for more info)
#18 0.905 
#18 0.945 error: `SQLX_OFFLINE=true` but there is no cached data for this query, run `cargo sqlx prepare` to update the query cache or unset `SQLX_OFFLINE`
#18 0.946     --> src/api/mod.rs:1944:27
#18 0.946      |
#18 0.946 1944 |   ...   if let Ok(rows) = sqlx::query!(
#18 0.946      |  _________________________^
#18 0.946 1945 | | ...       r#"SELECT id, resource_id, policy_id, reason, status, expires_at, recertify_at, created_at FROM exceptions ORDER BY created_at ...
#18 0.946 1946 | | ...   )
#18 0.946      | |_______^
#18 0.946      |
#18 0.946      = note: this error originates in the macro `$crate::sqlx_macros::expand_query` which comes from the expansion of the macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for more info)
#18 0.946 
#18 0.947 error: `SQLX_OFFLINE=true` but there is no cached data for this query, run `cargo sqlx prepare` to update the query cache or unset `SQLX_OFFLINE`
#18 0.948     --> src/api/mod.rs:1976:15
#18 0.948      |
#18 0.948 1976 |           match sqlx::query!(
#18 0.948      |  _______________^
#18 0.948 1977 | |             r#"UPDATE exceptions SET status = 'Expired' WHERE expires_at < NOW() AND status <> 'Expired' RETURNING 1"#
#18 0.948 1978 | |         )
#18 0.948      | |_________^
#18 0.948      |
#18 0.948      = note: this error originates in the macro `$crate::sqlx_macros::expand_query` which comes from the expansion of the macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for more info)
#18 0.948 
#18 1.578 error: `SQLX_OFFLINE=true` but there is no cached data for this query, run `cargo sqlx prepare` to update the query cache or unset `SQLX_OFFLINE`
#18 1.578    --> src/evidence_pipeline.rs:513:9
#18 1.578     |
#18 1.578 513 | /         sqlx::query!(
#18 1.578 514 | |             r#"INSERT INTO evidence_store (
#18 1.578 515 | |                 id, evidence_type, source, subject, description, data, hash, signature,
#18 1.578 516 | |                 signing_key_id, chain_of_custody, metadata, tenant_id, created_at, expires_at, verification_status
#18 1.578 ...   |
#18 1.578 535 | |             format!("***:?***", evidence.verification_status)
#18 1.578 536 | |         )
#18 1.578     | |_________^
#18 1.578     |
#18 1.578     = note: this error originates in the macro `$crate::sqlx_macros::expand_query` which comes from the expansion of the macro `sqlx::query` (in Nightly builds, run with -Z macro-backtrace for more info)
#18 1.578 
#18 2.263 error[E0433]: failed to resolve: could not find `LayerFn` in `util`
#18 2.263    --> src/main.rs:289:36
#18 2.263     |
#18 2.263 289 |         .layer(tower::layer::util::LayerFn::new(|service| ***
#18 2.263     |                                    ^^^^^^^ could not find `LayerFn` in `util`
#18 2.263     |
#18 2.263 help: consider importing this struct
#18 2.263     |
#18 2.263 1   + use tower::layer::LayerFn;
#18 2.263     |
#18 2.263 help: if you import `LayerFn`, refer to it directly
#18 2.263     |
#18 2.263 289 -         .layer(tower::layer::util::LayerFn::new(|service| ***
#18 2.263 289 +         .layer(LayerFn::new(|service| ***
#18 2.263     |
#18 2.263 
#18 2.330 warning: unused imports: `StatusCode` and `response::IntoResponse`
#18 2.330  --> src/main.rs:3:28
#18 2.330   |
#18 2.330 3 |     http::***header, Method, StatusCode***,
#18 2.330   |                            ^^^^^^^^^^
#18 2.330 4 |     response::IntoResponse,
#18 2.330   |     ^^^^^^^^^^^^^^^^^^^^^^
#18 2.330   |
#18 2.330   = note: `#[warn(unused_imports)]` on by default
#18 2.330 
#18 2.330 warning: unused import: `Deserialize`
#18 2.330   --> src/main.rs:10:13
#18 2.330    |
#18 2.330 10 | use serde::***Deserialize, Serialize***;
#18 2.330    |             ^^^^^^^^^^^
#18 2.330 
#18 2.330 warning: unused import: `warn`
#18 2.330  --> src/action_orchestrator.rs:7:28
#18 2.330   |
#18 2.330 7 | use tracing::***error, info, warn***;
#18 2.330   |                            ^^^^
#18 2.330 
#18 2.337 warning: unused imports: `EvaluationHarness`, `EvaluationReport`, `ModelCard`, `ModelMetrics`, `ModelRegistry`, `ModelType`, and `TrainingDataLineage`
#18 2.337  --> src/ai/mod.rs:4:5
#18 2.337   |
#18 2.337 4 |     EvaluationHarness, EvaluationReport, ModelCard, ModelMetrics, ModelRegistry, ModelType,
#18 2.337   |     ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^  ^^^^^^^^^  ^^^^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^
#18 2.337 5 |     TrainingDataLineage,
#18 2.337   |     ^^^^^^^^^^^^^^^^^^^
#18 2.337 
#18 2.338 warning: unused imports: `Aggregation`, `ErrorBudget`, `SLIType`, `SLI`, `SLOWindow`, and `SLO`
#18 2.338  --> src/api/mod.rs:3:18
#18 2.338   |
#18 2.338 3 | use crate::slo::***Aggregation, ErrorBudget, SLIType, SLOManager, SLOWindow, SLI, SLO***;
#18 2.338   |                  ^^^^^^^^^^^  ^^^^^^^^^^^  ^^^^^^^              ^^^^^^^^^  ^^^  ^^^
#18 2.338 
#18 2.338 warning: unused import: `Query`
#18 2.338  --> src/api/mod.rs:6:21
#18 2.338   |
#18 2.338 6 |     extract::***Path, Query, State***,
#18 2.338   |                     ^^^^^
#18 2.338 
#18 2.339 warning: unused import: `std::collections::HashMap`
#18 2.339   --> src/api/mod.rs:19:5
#18 2.339    |
#18 2.339 19 | use std::collections::HashMap;
#18 2.339    |     ^^^^^^^^^^^^^^^^^^^^^^^^^
#18 2.339 
#18 2.345 warning: unused imports: `DataMode` and `DataResponse`
#18 2.345     --> src/api/mod.rs:1330:28
#18 2.345      |
#18 2.345 1330 |     use crate::data_mode::***DataMode, DataModeGuard, DataResponse***;
#18 2.345      |                            ^^^^^^^^                 ^^^^^^^^^^^^
#18 2.345 
#18 2.347 warning: unused import: `DateTime`
#18 2.348  --> src/approval_workflow.rs:5:14
#18 2.348   |
#18 2.348 5 | use chrono::***DateTime, Duration, Utc***;
#18 2.348   |              ^^^^^^^^
#18 2.348 
#18 2.348 warning: unused import: `error`
#18 2.348   --> src/approval_workflow.rs:10:15
#18 2.348    |
#18 2.348 10 | use tracing::***error, info, warn***;
#18 2.348    |               ^^^^^
#18 2.348 
#18 2.356 warning: unused imports: `AuthUser` and `Claims`
#18 2.356  --> src/auth_middleware.rs:1:19
#18 2.356   |
#18 2.356 1 | use crate::auth::***AuthUser, Claims, TokenValidator***;
#18 2.356   |                   ^^^^^^^^  ^^^^^^
#18 2.356 
#18 2.357 warning: unused import: `Serialize`
#18 2.357  --> src/azure_client.rs:5:26
#18 2.357   |
#18 2.357 5 | use serde::***Deserialize, Serialize***;
#18 2.357   |                          ^^^^^^^^^
#18 2.357 
#18 2.358 warning: unused import: `RequestBuilder`
#18 2.358  --> src/azure_client_async.rs:6:23
#18 2.358   |
#18 2.358 6 | use reqwest::***Client, RequestBuilder***;
#18 2.358   |                       ^^^^^^^^^^^^^^
#18 2.358 
#18 2.370 warning: unused imports: `Deserialize` and `Serialize`
#18 2.370  --> src/collectors/gcp_collector.rs:2:13
#18 2.370   |
#18 2.370 2 | use serde::***Deserialize, Serialize***;
#18 2.370   |             ^^^^^^^^^^^  ^^^^^^^^^
#18 2.370 
#18 2.372 warning: unused imports: `CloudProvider`, `ComplianceStatus`, and `ResourceType`
#18 2.372  --> src/collectors/gcp_collector.rs:5:44
#18 2.372   |
#18 2.372 5 |     AuditLog, CloudCollector, CloudPolicy, CloudProvider, CloudResource, ComplianceStatus,
#18 2.373   |                                            ^^^^^^^^^^^^^                 ^^^^^^^^^^^^^^^^
#18 2.373 6 |     ResourceType,
#18 2.373   |     ^^^^^^^^^^^^
#18 2.373 
#18 2.373 warning: unused import: `AwsCollector`
#18 2.373  --> src/collectors/mod.rs:5:15
#18 2.373   |
#18 2.373 5 |     AuditLog, AwsCollector, CloudCollector, CloudPolicy, CloudProvider, CloudResource,
#18 2.373   |               ^^^^^^^^^^^^
#18 2.373 
#18 2.373 warning: unused import: `gcp_collector::GcpCollector`
#18 2.373  --> src/collectors/mod.rs:8:9
#18 2.373   |
#18 2.373 8 | pub use gcp_collector::GcpCollector;
#18 2.373   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
#18 2.373 
#18 2.382 warning: unused import: `futures_lite::stream::StreamExt`
#18 2.382  --> src/events/mod.rs:7:5
#18 2.382   |
#18 2.382 7 | use futures_lite::stream::StreamExt;
#18 2.382   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#18 2.382 
#18 2.385 warning: unused import: `error`
#18 2.385  --> src/evidence_pipeline.rs:8:15
#18 2.385   |
#18 2.385 8 | use tracing::***error, info, warn***;
#18 2.385   |               ^^^^^
#18 2.385 
#18 2.387 warning: unused import: `Duration`
#18 2.387  --> src/finops/mod.rs:5:24
#18 2.387   |
#18 2.387 5 | use chrono::***DateTime, Duration, Utc***;
#18 2.387   |                        ^^^^^^^^
#18 2.387 
#18 2.395 warning: unused import: `error`
#18 2.395  --> src/secrets.rs:8:15
#18 2.395   |
#18 2.395 8 | use tracing::***error, info, warn***;
#18 2.395   |               ^^^^^
#18 2.395 
#18 2.397 warning: unused import: `async_trait::async_trait`
#18 2.397  --> src/security_graph/mod.rs:5:5
#18 2.397   |
#18 2.397 5 | use async_trait::async_trait;
#18 2.397   |     ^^^^^^^^^^^^^^^^^^^^^^^^
#18 2.397 
#18 2.397 warning: unused import: `dijkstra`
#18 2.397  --> src/security_graph/mod.rs:6:40
#18 2.397   |
#18 2.397 6 | use petgraph::algo::***all_simple_paths, dijkstra***;
#18 2.397   |                                        ^^^^^^^^
#18 2.397 
#18 2.397 warning: unused import: `HashSet`
#18 2.397  --> src/security_graph/mod.rs:9:33
#18 2.397   |
#18 2.397 9 | use std::collections::***HashMap, HashSet***;
#18 2.397   |                                 ^^^^^^^
#18 2.397 
#18 2.401 warning: unused import: `uuid::Uuid`
#18 2.401  --> src/simulated_data.rs:4:5
#18 2.401   |
#18 2.401 4 | use uuid::Uuid;
#18 2.401   |     ^^^^^^^^^^
#18 2.401 
#18 2.406 warning: unused import: `warn`
#18 2.407  --> src/tenant.rs:9:21
#18 2.407   |
#18 2.407 9 | use tracing::***info, warn***;
#18 2.407   |                     ^^^^
#18 2.407 
#18 2.408 warning: unused import: `error`
#18 2.408   --> src/tenant_isolation.rs:11:15
#18 2.408    |
#18 2.408 11 | use tracing::***error, info, warn***;
#18 2.408    |               ^^^^^
#18 2.408 
#18 2.410 warning: unused imports: `AuthUser` and `OptionalAuthUser`
#18 2.411   --> src/main.rs:58:12
#18 2.411    |
#18 2.411 58 | use auth::***AuthUser, OptionalAuthUser***;
#18 2.411    |            ^^^^^^^^  ^^^^^^^^^^^^^^^^
#18 2.411 
#18 2.411 warning: unused imports: `TenantContext`, `TenantDatabase`, and `tenant_isolation_middleware`
#18 2.411   --> src/main.rs:62:24
#18 2.411    |
#18 2.411 62 | use tenant_isolation::***tenant_isolation_middleware, TenantContext, TenantDatabase***;
#18 2.411    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^
#18 2.411 
#18 4.014 error[E0308]: mismatched types
#18 4.014     --> src/api/mod.rs:1026:5
#18 4.014      |
#18 4.014 995  | ) -> impl IntoResponse ***
#18 4.014      |      ----------------- expected `axum::http::Response<axum::body::Body>` because of return type
#18 4.014 ...
#18 4.014 1026 |     Json(serde_json::json!(***"success": true, "approval": req***))
#18 4.014      |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Response<Body>`, found `Json<Value>`
#18 4.014      |
#18 4.014      = note: expected struct `axum::http::Response<axum::body::Body>`
#18 4.014                 found struct `axum::Json<JsonValue>`
#18 4.014 note: return type inferred to be `axum::http::Response<axum::body::Body>` here
#18 4.014     --> src/api/mod.rs:997:16
#18 4.014      |
#18 4.014 997  |           return (
#18 4.014      |  ________________^
#18 4.014 998  | |             StatusCode::FORBIDDEN,
#18 4.014 999  | |             Json(serde_json::json!(***"error":"insufficient_scope"***)),
#18 4.014 1000 | |         )
#18 4.014 1001 | |             .into_response();
#18 4.015      | |____________________________^
#18 4.015 
#18 4.098 error[E0308]: mismatched types
#18 4.098     --> src/api/mod.rs:1354:20
#18 4.098      |
#18 4.098 1321 |   ) -> impl IntoResponse ***
#18 4.098      |        ----------------- expected `axum::http::Response<axum::body::Body>` because of return type
#18 4.098 ...
#18 4.098 1354 |               return Json(serde_json::json!(***
#18 4.098      |  ____________________^
#18 4.098 1355 | |                 "success": false,
#18 4.098 1356 | |                 "status": "PendingApproval",
#18 4.098 1357 | |                 "message": "Remediation requires approval before execution",
#18 4.098 1358 | |                 "next": "Submit approval via /api/v1/approvals"
#18 4.098 1359 | |             ***));
#18 4.098      | |_______________^ expected `Response<Body>`, found `Json<Value>`
#18 4.098      |
#18 4.098      = note: expected struct `axum::http::Response<axum::body::Body>`
#18 4.098                 found struct `axum::Json<JsonValue>`
#18 4.098 note: return type inferred to be `axum::http::Response<axum::body::Body>` here
#18 4.098     --> src/api/mod.rs:1323:16
#18 4.098      |
#18 4.098 1323 |           return (
#18 4.098      |  ________________^
#18 4.098 1324 | |             StatusCode::FORBIDDEN,
#18 4.098 1325 | |             Json(serde_json::json!(***"error":"insufficient_scope"***)),
#18 4.098 1326 | |         )
#18 4.098 1327 | |             .into_response();
#18 4.098      | |____________________________^
#18 4.098 
#18 4.103 error[E0308]: mismatched types
#18 4.103     --> src/api/mod.rs:1363:5
#18 4.104      |
#18 4.104 1321 |   ) -> impl IntoResponse ***
#18 4.104      |        ----------------- expected `axum::http::Response<axum::body::Body>` because of return type
#18 4.104 ...
#18 4.104 1363 | /     Json(serde_json::json!(***
#18 4.104 1364 | |         "success": true,
#18 4.104 1365 | |         "resourceId": payload.resource_id,
#18 4.104 1366 | |         "action": payload.action,
#18 4.104 ...    |
#18 4.104 1369 | |         "message": format!("Remediation '***' initiated for resource ***", payload.action, payload.resource_id)
#18 4.104 1370 | |     ***))
#18 4.104      | |_______^ expected `Response<Body>`, found `Json<Value>`
#18 4.104      |
#18 4.104      = note: expected struct `axum::http::Response<axum::body::Body>`
#18 4.104                 found struct `axum::Json<JsonValue>`
#18 4.104 note: return type inferred to be `axum::http::Response<axum::body::Body>` here
#18 4.104     --> src/api/mod.rs:1323:16
#18 4.104      |
#18 4.104 1323 |           return (
#18 4.104      |  ________________^
#18 4.104 1324 | |             StatusCode::FORBIDDEN,
#18 4.104 1325 | |             Json(serde_json::json!(***"error":"insufficient_scope"***)),
#18 4.104 1326 | |         )
#18 4.104 1327 | |             .into_response();
#18 4.104      | |____________________________^
#18 4.104 
#18 4.111 error[E0308]: mismatched types
#18 4.111     --> src/api/mod.rs:1408:5
#18 4.111      |
#18 4.111 1378 |   ) -> impl IntoResponse ***
#18 4.111      |        ----------------- expected `axum::http::Response<axum::body::Body>` because of return type
#18 4.111 ...
#18 4.111 1408 | /     Json(serde_json::json!(***
#18 4.111 1409 | |         "success": true,
#18 4.111 1410 | |         "exceptionId": id,
#18 4.111 1411 | |         "resourceId": payload.resource_id,
#18 4.111 ...    |
#18 4.111 1417 | |         "evidenceRequired": true
#18 4.111 1418 | |     ***))
#18 4.111      | |_______^ expected `Response<Body>`, found `Json<Value>`
#18 4.111      |
#18 4.111      = note: expected struct `axum::http::Response<axum::body::Body>`
#18 4.111                 found struct `axum::Json<JsonValue>`
#18 4.111 note: return type inferred to be `axum::http::Response<axum::body::Body>` here
#18 4.111     --> src/api/mod.rs:1380:16
#18 4.111      |
#18 4.111 1380 |           return (
#18 4.111      |  ________________^
#18 4.111 1381 | |             StatusCode::FORBIDDEN,
#18 4.111 1382 | |             Json(serde_json::json!(***"error":"insufficient_scope"***)),
#18 4.111 1383 | |         )
#18 4.111 1384 | |             .into_response();
#18 4.111      | |____________________________^
#18 4.111 
#18 4.191 warning: unused variable: `mode`
#18 4.192     --> src/api/mod.rs:1569:9
#18 4.192      |
#18 4.192 1569 |     let mode = DataMode::from_env();
#18 4.192      |         ^^^^ help: if this is intentional, prefix it with an underscore: `_mode`
#18 4.192      |
#18 4.192      = note: `#[warn(unused_variables)]` on by default
#18 4.192 
#18 4.213 warning: unused variable: `mode`
#18 4.213     --> src/api/mod.rs:1621:9
#18 4.213      |
#18 4.213 1621 |     let mode = DataMode::from_env();
#18 4.213      |         ^^^^ help: if this is intentional, prefix it with an underscore: `_mode`
#18 4.213 
#18 4.233 error[E0308]: mismatched types
#18 4.234     --> src/api/mod.rs:1785:5
#18 4.234      |
#18 4.234 1697 | ) -> impl IntoResponse ***
#18 4.234      |      ----------------- expected `axum::http::Response<axum::body::Body>` because of return type
#18 4.234 ...
#18 4.234 1785 |     Json(serde_json::json!(***"action_id": id***))
#18 4.234      |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Response<Body>`, found `Json<Value>`
#18 4.234      |
#18 4.234      = note: expected struct `axum::http::Response<axum::body::Body>`
#18 4.234                 found struct `axum::Json<JsonValue>`
#18 4.234 note: return type inferred to be `axum::http::Response<axum::body::Body>` here
#18 4.234     --> src/api/mod.rs:1699:16
#18 4.234      |
#18 4.234 1699 |           return (
#18 4.234      |  ________________^
#18 4.234 1700 | |             StatusCode::FORBIDDEN,
#18 4.234 1701 | |             Json(serde_json::json!(***"error":"insufficient_scope"***)),
#18 4.234 1702 | |         )
#18 4.234 1703 | |             .into_response();
#18 4.234      | |____________________________^
#18 4.234 
#18 4.301 error[E0308]: mismatched types
#18 4.301     --> src/api/mod.rs:1983:30
#18 4.301      |
#18 4.301 1974 | pub async fn expire_exceptions(State(state): State<Arc<AppState>>) -> impl IntoResponse ***
#18 4.301      |                                                                       ----------------- expected `axum::Json<ExpireResult>` because of return type
#18 4.301 ...
#18 4.301 1983 |             Err(e) => return (StatusCode::INTERNAL_SERVER_ERROR, Json(serde_json::json!(***"error": e.to_string()***))).into_response(),
#18 4.301      |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Json<ExpireResult>`, found `Response<Body>`
#18 4.301      |
#18 4.301      = note: expected struct `axum::Json<ExpireResult>`
#18 4.301                 found struct `axum::http::Response<axum::body::Body>`
#18 4.301 note: return type inferred to be `axum::Json<ExpireResult>` here
#18 4.301     --> src/api/mod.rs:1982:32
#18 4.301      |
#18 4.301 1982 |             Ok(rows) => return Json(ExpireResult *** expired: rows.len() as i64 ***),
#18 4.301      |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#18 4.301 
#18 4.415 warning: unused variable: `message`
#18 4.415    --> src/approval_workflow.rs:439:17
#18 4.415     |
#18 4.415 439 |             let message = rule.notification_message.clone();
#18 4.415     |                 ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_message`
#18 4.415 
#18 4.458 warning: unused variable: `query`
#18 4.458    --> src/audit_chain.rs:359:13
#18 4.458     |
#18 4.458 359 |         let query = r#"
#18 4.458     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_query`
#18 4.458 
#18 4.564 warning: unused variable: `header`
#18 4.564    --> src/auth.rs:201:23
#18 4.564     |
#18 4.564 201 |             if let Ok(header) = jsonwebtoken::decode_header(token) ***
#18 4.564     |                       ^^^^^^ help: if this is intentional, prefix it with an underscore: `_header`
#18 4.564 
#18 4.837 warning: variable does not need to be mutable
#18 4.837   --> src/azure_client_async.rs:90:13
#18 4.837    |
#18 4.837 90 |         let mut config = AzureClientConfig::default();
#18 4.837    |             ----^^^^^^
#18 4.837    |             |
#18 4.837    |             help: remove this `mut`
#18 4.837    |
#18 4.837    = note: `#[warn(unused_mut)]` on by default
#18 4.837 
#18 5.251 warning: unused variable: `control`
#18 5.251    --> src/compliance/mod.rs:431:9
#18 5.251     |
#18 5.251 431 |         control: &ComplianceControl,
#18 5.251     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_control`
#18 5.251 
#18 5.446 warning: unused variable: `key_id`
#18 5.447    --> src/evidence_pipeline.rs:442:9
#18 5.447     |
#18 5.447 442 |         key_id: &str,
#18 5.447     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_key_id`
#18 5.447 
#18 11.06 warning: unused variable: `model`
#18 11.06    --> src/ai/model_registry.rs:211:13
#18 11.06     |
#18 11.06 211 |         let model = self
#18 11.06     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_model`
#18 11.06 
#18 12.15 warning: unused variable: `rule`
#18 12.15    --> src/approvals.rs:284:13
#18 12.15     |
#18 12.15 284 |         for rule in &policy.sod_rules ***
#18 12.15     |             ^^^^ help: if this is intentional, prefix it with an underscore: `_rule`
#18 12.15 
#18 12.15 warning: unused variable: `requester_id`
#18 12.15    --> src/approvals.rs:280:9
#18 12.15     |
#18 12.15 280 |         requester_id: &str,
#18 12.15     |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_requester_id`
#18 12.15 
#18 12.15 warning: unused variable: `approver_id`
#18 12.15    --> src/approvals.rs:281:9
#18 12.15     |
#18 12.15 281 |         approver_id: &str,
#18 12.15     |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_approver_id`
#18 12.15 
#18 13.18 warning: unused variable: `result`
#18 13.18    --> src/change_management.rs:437:17
#18 13.18     |
#18 13.18 437 |             let result: serde_json::Value = response
#18 13.18     |                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_result`
#18 13.18 
#18 14.80 warning: unused variable: `pricing`
#18 14.80    --> src/finops/mod.rs:287:9
#18 14.80     |
#18 14.80 287 |         pricing: &serde_json::Value,
#18 14.80     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_pricing`
#18 14.80 
#18 14.81 warning: unused variable: `current`
#18 14.81    --> src/finops/mod.rs:343:37
#18 14.81     |
#18 14.81 343 |     fn calculate_rightsizing(&self, current: &VmSku, metrics: &ResourceMetrics) -> Option<VmSku> ***
#18 14.81     |                                     ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_current`
#18 14.81 
#18 14.81 warning: unused variable: `metrics`
#18 14.81    --> src/finops/mod.rs:343:54
#18 14.81     |
#18 14.81 343 |     fn calculate_rightsizing(&self, current: &VmSku, metrics: &ResourceMetrics) -> Option<VmSku> ***
#18 14.81     |                                                      ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_metrics`
#18 14.81 
#18 14.94 warning: value assigned to `savings_achieved` is never read
#18 14.94    --> src/finops/mod.rs:954:17
#18 14.94     |
#18 14.94 954 |         let mut savings_achieved = 0.0;
#18 14.94     |                 ^^^^^^^^^^^^^^^^
#18 14.94     |
#18 14.94     = help: maybe it is overwritten before being read?
#18 14.94     = note: `#[warn(unused_assignments)]` on by default
#18 14.94 
#18 16.45 Some errors have detailed explanations: E0308, E0433.
#18 16.45 For more information about an error, try `rustc --explain E0308`.
#18 16.48 warning: `policycortex-core` (bin "policycortex-core") generated 46 warnings
#18 16.48 error: could not compile `policycortex-core` (bin "policycortex-core") due to 15 previous errors; 46 warnings emitted
#18 ERROR: process "/bin/sh -c touch src/main.rs && cargo build --release" did not complete successfully: exit code: 101
------
 > [builder 7/7] RUN touch src/main.rs && cargo build --release:
14.94 954 |         let mut savings_achieved = 0.0;
14.94     |                 ^^^^^^^^^^^^^^^^
14.94     |
14.94     = help: maybe it is overwritten before being read?
14.94     = note: `#[warn(unused_assignments)]` on by default
14.94 
16.45 Some errors have detailed explanations: E0308, E0433.
16.45 For more information about an error, try `rustc --explain E0308`.
16.48 warning: `policycortex-core` (bin "policycortex-core") generated 46 warnings
16.48 error: could not compile `policycortex-core` (bin "policycortex-core") due to 15 previous errors; 46 warnings emitted
------
Dockerfile:29
--------------------
  27 |     # Build the actual application
  28 |     ENV SQLX_OFFLINE=true
  29 | >>> RUN touch src/main.rs && cargo build --release
  30 |     
  31 |     # Runtime stage
--------------------
ERROR: failed to build: failed to solve: process "/bin/sh -c touch src/main.rs && cargo build --release" did not complete successfully: exit code: 101
Error: buildx failed with: ERROR: failed to build: failed to solve: process "/bin/sh -c touch src/main.rs && cargo build --release" did not complete successfully: exit code: 101