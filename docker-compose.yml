version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: policycortex-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: policycortex
      POSTGRES_INIT_DB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - policycortex-network

  # Redis/DragonflyDB (25x faster Redis)
  redis:
    image: docker.dragonflydb.io/dragonflydb/dragonfly:latest
    container_name: policycortex-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: ["dragonfly", "--logtostderr", "--cache_mode"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - policycortex-network

  # EventStore for Event Sourcing
  eventstore:
    image: eventstore/eventstore:latest
    container_name: policycortex-eventstore
    restart: unless-stopped
    environment:
      - EVENTSTORE_CLUSTER_SIZE=1
      - EVENTSTORE_RUN_PROJECTIONS=All
      - EVENTSTORE_START_STANDARD_PROJECTIONS=true
      - EVENTSTORE_DB=/var/lib/eventstore-data
      - EVENTSTORE_INDEX=/var/lib/eventstore-index
      - EVENTSTORE_LOG=/var/log/eventstore
      - EVENTSTORE_INSECURE=true
      - EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP=true
    ports:
      - "2113:2113"
      - "1113:1113"
    volumes:
      - eventstore_data:/var/lib/eventstore-data
      - eventstore_index:/var/lib/eventstore-index
      - eventstore_logs:/var/log/eventstore
    networks:
      - policycortex-network

  # NATS for messaging
  nats:
    image: nats:2.10-alpine
    container_name: policycortex-nats
    restart: unless-stopped
    ports:
      - "4222:4222"
      - "8222:8222"
      - "6222:6222"
    command: ["--js", "--sd", "/data", "-m", "8222"]
    volumes:
      - nats_data:/data
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "4222"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - policycortex-network

  # Rust Backend Core API
  backend:
    build:
      context: ./core
      dockerfile: Dockerfile
    container_name: policycortex-backend
    restart: unless-stopped
    environment:
      - AZURE_TENANT_ID=${AZURE_TENANT_ID:-9ef5b184-d371-462a-bc75-5024ce8baff7}
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID:-1ecc95d1-e5bb-43e2-9324-30a17cb6b01c}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      - AZURE_SUBSCRIPTION_ID=${AZURE_SUBSCRIPTION_ID}
      - ENVIRONMENT=prod
      - USE_REAL_DATA=true
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/policycortex
      - REDIS_URL=redis://redis:6379
      - NATS_URL=nats://nats:4222
      - EVENTSTORE_URL=tcp://eventstore:1113
      - RUST_LOG=info
      - PORT=8080
      - ALLOWED_ORIGINS=https://policycortex.com,https://www.policycortex.com
    volumes:
      - ${USERPROFILE}/.azure:/home/policycortex/.azure:ro
    ports:
      - "8085:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - policycortex-network

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: policycortex-frontend
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_GRAPHQL_ENDPOINT=/graphql
      - NEXT_PUBLIC_AZURE_CLIENT_ID=1ecc95d1-e5bb-43e2-9324-30a17cb6b01c
      - NEXT_PUBLIC_AZURE_TENANT_ID=9ef5b184-d371-462a-bc75-5024ce8baff7
      - NEXT_PUBLIC_MSAL_REDIRECT_URI=https://policycortex.com
      - NEXT_PUBLIC_MSAL_POST_LOGOUT_REDIRECT_URI=https://policycortex.com
      - BACKEND_SERVICE_NAME=backend
      - IN_DOCKER=true
      - NODE_ENV=production
    ports:
      - "3005:3000"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (r) => {r.statusCode === 200 ? process.exit(0) : process.exit(1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - policycortex-network

  # GraphQL Gateway (optional - if you want to use it)
  graphql:
    build:
      context: ./graphql
      dockerfile: Dockerfile
    container_name: policycortex-graphql
    restart: unless-stopped
    environment:
      - BACKEND_URL=http://backend:8080
      - NODE_ENV=production
      - PORT=4000
    ports:
      - "4001:4000"
    depends_on:
      - backend
    networks:
      - policycortex-network

  # Nginx Reverse Proxy (optional but recommended)
  nginx:
    image: nginx:alpine
    container_name: policycortex-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - policycortex-network

networks:
  policycortex-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  eventstore_data:
    driver: local
  eventstore_index:
    driver: local
  eventstore_logs:
    driver: local
  nats_data:
    driver: local