apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: default-telemetry
  namespace: policycortex
spec:
  # Metrics configuration
  metrics:
  - providers:
    - name: prometheus
    overrides:
    - match:
        metric: ALL_METRICS
      tagOverrides:
        tenant_id:
          value: request.headers["x-tenant-id"] | "unknown"
        api_version:
          value: request.headers["x-api-version"] | "v1"
        environment:
          value: request.headers["x-environment"] | "production"
  
  # Access logging
  accessLogging:
  - providers:
    - name: custom-accesslog
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: telemetry-config
  namespace: istio-system
data:
  custom_access_log.yaml: |
    # JSON structured logging
    - name: custom-accesslog
      envoy_access_log_service:
        cluster: access-log-cluster
        log_name: access_log
        additional_request_headers_to_log:
        - x-request-id
        - x-tenant-id
        - x-user-id
        - x-api-version
        additional_response_headers_to_log:
        - x-response-time
        - x-cache-status
---
apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: distributed-tracing
  namespace: policycortex
spec:
  tracing:
  - providers:
    - name: jaeger
    randomSamplingPercentage: 100.0 # Sample all requests in dev
    customTags:
      tenant_id:
        header:
          name: x-tenant-id
          defaultValue: "unknown"
      user_id:
        header:
          name: x-user-id
          defaultValue: "anonymous"
      api_version:
        header:
          name: x-api-version
          defaultValue: "v1"
      request_id:
        header:
          name: x-request-id
---
apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: custom-metrics
  namespace: policycortex
spec:
  metrics:
  - providers:
    - name: prometheus
    dimensions:
      request_protocol: request.protocol
      response_code: response.code | 0
      source_workload: source.workload.name | "unknown"
      source_app: source.labels["app"] | "unknown"
      destination_service: destination.service.name | "unknown"
      destination_version: destination.labels["version"] | "unknown"
      method: request.method | "unknown"
      path: request.path | "unknown"
      tenant_id: request.headers["x-tenant-id"] | "unknown"
      user_id: request.headers["x-user-id"] | "unknown"
  - providers:
    - name: prometheus
    overrides:
    # Custom metric for AI operations
    - match:
        metric: REQUEST_COUNT
        path: "/api/v1/conversation"
      tags:
        ai_operation: "conversation"
        model_version: request.headers["x-model-version"] | "default"
    - match:
        metric: REQUEST_COUNT
        path: "/api/v1/predictions"
      tags:
        ai_operation: "prediction"
        prediction_type: request.headers["x-prediction-type"] | "compliance"
---
# Service Level Objectives (SLOs)
apiVersion: v1
kind: ConfigMap
metadata:
  name: slo-config
  namespace: policycortex
data:
  slos.yaml: |
    service_level_objectives:
      - service: core-api
        slos:
          - name: availability
            target: 99.9
            window: 30d
            indicator:
              metric: success_rate
              formula: "(sum(rate(istio_request_duration_milliseconds_count{destination_service_name=\"core-api\",response_code!~\"5..\"}[5m])) / sum(rate(istio_request_duration_milliseconds_count{destination_service_name=\"core-api\"}[5m]))) * 100"
          - name: latency_p99
            target: 500 # milliseconds
            window: 30d
            indicator:
              metric: latency
              formula: "histogram_quantile(0.99, sum(rate(istio_request_duration_milliseconds_bucket{destination_service_name=\"core-api\"}[5m])) by (le))"
      
      - service: frontend
        slos:
          - name: availability
            target: 99.95
            window: 30d
          - name: latency_p95
            target: 200 # milliseconds
            window: 30d
      
      - service: ai-engine
        slos:
          - name: availability
            target: 99.5
            window: 30d
          - name: latency_p95
            target: 2000 # milliseconds (AI operations are slower)
            window: 30d
          - name: prediction_accuracy
            target: 99.2 # percentage
            window: 7d
---
# Grafana dashboards configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: istio-system
data:
  policycortex-service-mesh.json: |
    {
      "dashboard": {
        "title": "PolicyCortex Service Mesh Dashboard",
        "panels": [
          {
            "title": "Request Rate by Service",
            "targets": [{
              "expr": "sum(rate(istio_request_total[1m])) by (destination_service_name)"
            }]
          },
          {
            "title": "P95 Latency by Service",
            "targets": [{
              "expr": "histogram_quantile(0.95, sum(rate(istio_request_duration_milliseconds_bucket[1m])) by (destination_service_name, le))"
            }]
          },
          {
            "title": "Error Rate by Service",
            "targets": [{
              "expr": "sum(rate(istio_request_total{response_code=~\"5..\"}[1m])) by (destination_service_name)"
            }]
          },
          {
            "title": "Circuit Breaker Status",
            "targets": [{
              "expr": "sum(envoy_cluster_circuit_breakers_default_cx_open) by (cluster_name)"
            }]
          },
          {
            "title": "mTLS Status",
            "targets": [{
              "expr": "sum(envoy_cluster_ssl_connection_error) by (cluster_name)"
            }]
          }
        ]
      }
    }