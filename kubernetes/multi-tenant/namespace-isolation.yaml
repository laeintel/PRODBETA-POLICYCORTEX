# Multi-Tenant Namespace Isolation for PolicyCortex
# Each tenant gets isolated namespace with RBAC and network policies

---
# Tenant Production Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: tenant-prod
  labels:
    istio-injection: enabled
    environment: production
    tenant-isolation: enforced
---
# Tenant Staging Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: tenant-staging
  labels:
    istio-injection: enabled
    environment: staging
    tenant-isolation: enforced
---
# Tenant Development Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: tenant-dev
  labels:
    istio-injection: enabled
    environment: development
    tenant-isolation: enforced
---
# Network Policy for Tenant Isolation
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: tenant-isolation
  namespace: tenant-prod
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: tenant-prod
    - namespaceSelector:
        matchLabels:
          name: istio-system
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: tenant-prod
    - namespaceSelector:
        matchLabels:
          name: istio-system
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
---
# RBAC for Tenant Isolation
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: tenant-prod
  name: tenant-admin
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: tenant-admin-binding
  namespace: tenant-prod
subjects:
- kind: Group
  name: "tenant-prod-admins"
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: tenant-admin
  apiGroup: rbac.authorization.k8s.io
---
# Resource Quotas per Tenant
apiVersion: v1
kind: ResourceQuota
metadata:
  name: tenant-quota
  namespace: tenant-prod
spec:
  hard:
    requests.cpu: "100"
    requests.memory: 200Gi
    requests.storage: 1Ti
    persistentvolumeclaims: "10"
    services.loadbalancers: "2"
    services.nodeports: "0"
---
# Limit Ranges per Tenant
apiVersion: v1
kind: LimitRange
metadata:
  name: tenant-limits
  namespace: tenant-prod
spec:
  limits:
  - max:
      cpu: "8"
      memory: 16Gi
    min:
      cpu: 100m
      memory: 128Mi
    default:
      cpu: 500m
      memory: 512Mi
    defaultRequest:
      cpu: 100m
      memory: 128Mi
    type: Container
  - max:
      storage: 100Gi
    type: PersistentVolumeClaim