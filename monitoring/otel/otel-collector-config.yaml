receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
        cors:
          allowed_origins:
            - "http://*"
            - "https://*"

  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 10s
          static_configs:
            - targets: ['0.0.0.0:8888']

  hostmetrics:
    scrapers:
      cpu:
      disk:
      filesystem:
      load:
      memory:
      network:
      paging:
      processes:
      process:

  docker_stats:
    endpoint: unix:///var/run/docker.sock
    collection_interval: 10s
    timeout: 20s
    api_version: 1.24

  zipkin:
    endpoint: 0.0.0.0:9411

processors:
  batch:
    timeout: 10s
    send_batch_size: 1024
    
  memory_limiter:
    check_interval: 1s
    limit_mib: 512
    spike_limit_mib: 128
    
  resource:
    attributes:
      - key: environment
        value: production
        action: insert
      - key: cluster
        value: policycortex
        action: insert
        
  attributes:
    actions:
      - key: http.user_agent
        action: delete
      - key: http.request.body
        action: delete
        
  tail_sampling:
    decision_wait: 10s
    num_traces: 100
    expected_new_traces_per_sec: 10
    policies:
      - name: errors-policy
        type: status_code
        status_code:
          status_codes: [ERROR]
      - name: latency-policy
        type: latency
        latency:
          threshold_ms: 1000
      - name: probabilistic-policy
        type: probabilistic
        probabilistic:
          sampling_percentage: 10

  transform:
    metric_statements:
      - context: datapoint
        statements:
          - set(attributes["environment"], "production")
          - set(attributes["service.namespace"], "policycortex")

exporters:
  prometheus:
    endpoint: "0.0.0.0:8889"
    namespace: policycortex
    const_labels:
      environment: production
      
  jaeger:
    endpoint: jaeger:14250
    tls:
      insecure: true
      
  otlp/jaeger:
    endpoint: jaeger:4317
    tls:
      insecure: true
      
  logging:
    loglevel: info
    
  debug:
    verbosity: detailed
    sampling_initial: 5
    sampling_thereafter: 200

extensions:
  health_check:
    endpoint: 0.0.0.0:13133
    
  pprof:
    endpoint: 0.0.0.0:1888
    
  zpages:
    endpoint: 0.0.0.0:55679

service:
  extensions: [health_check, pprof, zpages]
  
  pipelines:
    traces:
      receivers: [otlp, zipkin]
      processors: [memory_limiter, batch, resource, attributes, tail_sampling]
      exporters: [jaeger, otlp/jaeger, logging]
      
    metrics:
      receivers: [otlp, prometheus, hostmetrics, docker_stats]
      processors: [memory_limiter, batch, resource, transform]
      exporters: [prometheus, logging]
      
    logs:
      receivers: [otlp]
      processors: [memory_limiter, batch, resource]
      exporters: [logging]