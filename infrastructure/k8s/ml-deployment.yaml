apiVersion: v1
kind: Namespace
metadata:
  name: policycortex-ml
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ml-config
  namespace: policycortex-ml
data:
  REDIS_URL: "redis://redis-service:6379"
  DATABASE_URL: "postgresql://postgres:postgres@postgres-service:5432/policycortex"
  MODEL_CACHE_SIZE: "10"
  INFERENCE_BATCH_SIZE: "32"
  MAX_WAIT_MS: "10"
  ENABLE_GPU: "true"
  TENSORRT_OPTIMIZATION: "true"
---
apiVersion: v1
kind: Secret
metadata:
  name: ml-secrets
  namespace: policycortex-ml
type: Opaque
stringData:
  AZURE_TENANT_ID: "9ef5b184-d371-462a-bc75-5024ce8baff7"
  AZURE_CLIENT_ID: "1ecc95d1-e5bb-43e2-9324-30a17cb6b01c"
  AZURE_CLIENT_SECRET: "your-client-secret-here"
  ENCRYPTION_KEY: "your-256-bit-key-here"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ml-prediction-server
  namespace: policycortex-ml
spec:
  replicas: 3
  selector:
    matchLabels:
      app: ml-prediction-server
  template:
    metadata:
      labels:
        app: ml-prediction-server
    spec:
      nodeSelector:
        accelerator: nvidia-tesla-t4  # GPU node selector
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
      containers:
      - name: prediction-server
        image: crpcxdev.azurecr.io/policycortex-ml:latest
        imagePullPolicy: Always
        command: ["python", "-m", "backend.services.ml_models.prediction_serving"]
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 9090
          name: metrics
        envFrom:
        - configMapRef:
            name: ml-config
        - secretRef:
            name: ml-secrets
        resources:
          requests:
            memory: "4Gi"
            cpu: "2"
            nvidia.com/gpu: "1"  # Request 1 GPU
          limits:
            memory: "8Gi"
            cpu: "4"
            nvidia.com/gpu: "1"  # Limit to 1 GPU
        volumeMounts:
        - name: model-cache
          mountPath: /models
        - name: shm
          mountPath: /dev/shm
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: model-cache
        persistentVolumeClaim:
          claimName: model-cache-pvc
      - name: shm
        emptyDir:
          medium: Memory
          sizeLimit: 2Gi
---
apiVersion: v1
kind: Service
metadata:
  name: ml-prediction-service
  namespace: policycortex-ml
spec:
  selector:
    app: ml-prediction-server
  ports:
  - port: 8080
    targetPort: 8080
    name: http
  - port: 9090
    targetPort: 9090
    name: metrics
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ml-websocket-server
  namespace: policycortex-ml
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ml-websocket-server
  template:
    metadata:
      labels:
        app: ml-websocket-server
    spec:
      containers:
      - name: websocket-server
        image: crpcxdev.azurecr.io/policycortex-ml-websocket:latest
        imagePullPolicy: Always
        command: ["python", "-m", "backend.services.websocket_server"]
        ports:
        - containerPort: 8765
          name: websocket
        envFrom:
        - configMapRef:
            name: ml-config
        resources:
          requests:
            memory: "2Gi"
            cpu: "1"
          limits:
            memory: "4Gi"
            cpu: "2"
---
apiVersion: v1
kind: Service
metadata:
  name: ml-websocket-service
  namespace: policycortex-ml
spec:
  selector:
    app: ml-websocket-server
  ports:
  - port: 8765
    targetPort: 8765
    name: websocket
  type: LoadBalancer
---
apiVersion: batch/v1
kind: Job
metadata:
  name: ml-training-job
  namespace: policycortex-ml
spec:
  parallelism: 1
  completions: 1
  backoffLimit: 3
  template:
    metadata:
      labels:
        app: ml-training
    spec:
      restartPolicy: OnFailure
      nodeSelector:
        accelerator: nvidia-tesla-v100  # More powerful GPU for training
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
      containers:
      - name: model-trainer
        image: crpcxdev.azurecr.io/policycortex-ml-trainer:latest
        imagePullPolicy: Always
        command: ["python", "-m", "backend.services.ml_models.train_models"]
        envFrom:
        - configMapRef:
            name: ml-config
        - secretRef:
            name: ml-secrets
        resources:
          requests:
            memory: "16Gi"
            cpu: "8"
            nvidia.com/gpu: "2"  # Request 2 GPUs for training
          limits:
            memory: "32Gi"
            cpu: "16"
            nvidia.com/gpu: "2"
        volumeMounts:
        - name: training-data
          mountPath: /data
        - name: model-output
          mountPath: /models
      volumes:
      - name: training-data
        persistentVolumeClaim:
          claimName: training-data-pvc
      - name: model-output
        persistentVolumeClaim:
          claimName: model-output-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: model-cache-pvc
  namespace: policycortex-ml
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 100Gi
  storageClassName: azure-files
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: training-data-pvc
  namespace: policycortex-ml
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 500Gi
  storageClassName: managed-premium
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: model-output-pvc
  namespace: policycortex-ml
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 200Gi
  storageClassName: azure-files
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ml-prediction-hpa
  namespace: policycortex-ml
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ml-prediction-server
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: inference_latency_p95
      target:
        type: AverageValue
        averageValue: "85"  # Scale if P95 latency approaches 85ms
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: ml-prediction-pdb
  namespace: policycortex-ml
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: ml-prediction-server
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: ml-metrics
  namespace: policycortex-ml
spec:
  selector:
    matchLabels:
      app: ml-prediction-server
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics