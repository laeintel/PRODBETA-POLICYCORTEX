apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default
  namespace: policycortex
spec:
  mtls:
    mode: STRICT
---
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: production-strict
  namespace: policycortex-prod
spec:
  mtls:
    mode: STRICT
---
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: default
  namespace: policycortex
spec:
  host: "*.policycortex.svc.cluster.local"
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
  exportTo:
  - "."
---
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: production-services
  namespace: policycortex-prod
spec:
  host: "*.policycortex-prod.svc.cluster.local"
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
    connectionPool:
      tcp:
        maxConnections: 100
      http:
        http1MaxPendingRequests: 100
        http2MaxRequests: 100
        maxRequestsPerConnection: 2
    loadBalancer:
      simple: LEAST_REQUEST
    outlierDetection:
      consecutiveErrors: 5
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50
      minHealthPercent: 30
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: allow-internal-traffic
  namespace: policycortex
spec:
  action: ALLOW
  rules:
  - from:
    - source:
        namespaces: ["policycortex", "istio-system"]
  - to:
    - operation:
        methods: ["GET"]
        paths: ["/health", "/ready", "/metrics"]
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: production-authorization
  namespace: policycortex-prod
spec:
  action: ALLOW
  rules:
  - from:
    - source:
        principals: ["cluster.local/ns/policycortex-prod/sa/*"]
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE"]
  - from:
    - source:
        namespaces: ["istio-ingress"]
    to:
    - operation:
        paths: ["/api/*"]
    when:
    - key: request.headers[authorization]
      values: ["Bearer *"]
---
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: external-azure-services
  namespace: policycortex
spec:
  hosts:
  - management.azure.com
  - graph.microsoft.com
  - login.microsoftonline.com
  - "*.blob.core.windows.net"
  - "*.queue.core.windows.net"
  - "*.table.core.windows.net"
  - "*.servicebus.windows.net"
  - "*.eventhub.windows.net"
  ports:
  - number: 443
    name: https
    protocol: HTTPS
  location: MESH_EXTERNAL
  resolution: DNS
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: circuit-breaker
  namespace: policycortex
spec:
  hosts:
  - policycortex-core
  http:
  - timeout: 30s
    retries:
      attempts: 3
      perTryTimeout: 10s
      retryOn: 5xx,reset,connect-failure,refused-stream
    fault:
      abort:
        percentage:
          value: 0.1
        httpStatus: 503
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: istio-custom-config
  namespace: istio-system
data:
  mesh: |
    defaultConfig:
      proxyStatsMatcher:
        inclusionRegexps:
        - ".*outlier_detection.*"
        - ".*circuit_breakers.*"
        - ".*retry.*"
      holdApplicationUntilProxyStarts: true
      tracing:
        sampling: 100.0
        zipkin:
          address: zipkin.istio-system:9411
    trustDomain: cluster.local
    # Certificate rotation every 12 hours
    defaultConfig:
      envoyMetricsService:
        address: otel-collector.observability:15000
      envoyAccessLogService:
        address: otel-collector.observability:15000
    # Enable automatic sidecar injection
    defaultConfig:
      image:
        imageType: distroless
    # Telemetry v2 configuration
    telemetry:
      v2:
        prometheus:
          configOverride:
            inboundSidecar:
              disable_host_header_fallback: true
            outboundSidecar:
              disable_host_header_fallback: true
            gateway:
              disable_host_header_fallback: true
---
apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: default-metrics
  namespace: istio-system
spec:
  metrics:
  - providers:
    - name: prometheus
    overrides:
    - match:
        metric: ALL_METRICS
      tagOverrides:
        method:
          value: request.method | "unknown"
        response_code:
          value: response.code | 0
        grpc_response_status:
          value: response.grpc_status | 0
---
apiVersion: v1
kind: Secret
metadata:
  name: cacerts
  namespace: istio-system
type: Opaque
data:
  # These should be replaced with actual certificates
  # Generated with: openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes
  root-cert.pem: LS0tLS1CRUdJTi... # base64 encoded root certificate
  cert-chain.pem: LS0tLS1CRUdJTi... # base64 encoded certificate chain
  ca-cert.pem: LS0tLS1CRUdJTi... # base64 encoded CA certificate
  ca-key.pem: LS0tLS1CRUdJTi... # base64 encoded CA key