{
  "info": {
    "name": "PolicyCortex API Integration Tests",
    "description": "Complete integration test suite for PolicyCortex API including authentication, policies, compliance, conversations, and real-time features",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{access_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000",
      "type": "string"
    },
    {
      "key": "access_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "policy_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "conversation_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. Authentication Flow",
      "item": [
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('status', 'healthy');",
                  "    pm.expect(response).to.have.property('service', 'PolicyCortex API Gateway');",
                  "    pm.expect(response).to.have.property('version');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            }
          }
        },
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains tokens\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('access_token');",
                  "    pm.expect(response).to.have.property('refresh_token');",
                  "    pm.expect(response).to.have.property('token_type', 'bearer');",
                  "    ",
                  "    // Save tokens for subsequent requests",
                  "    pm.collectionVariables.set('access_token', response.access_token);",
                  "});",
                  "",
                  "pm.test(\"User information is returned\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('user');",
                  "    pm.expect(response.user).to.have.property('id');",
                  "    pm.expect(response.user).to.have.property('email');",
                  "    ",
                  "    // Save user ID",
                  "    pm.collectionVariables.set('user_id', response.user.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser@example.com\",\n  \"password\": \"TestPassword123!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "login"]
            }
          }
        },
        {
          "name": "Get Current User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User data is returned\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('email');",
                  "    pm.expect(response).to.have.property('roles');",
                  "});",
                  "",
                  "pm.test(\"Authorization header works\", function () {",
                  "    pm.expect(pm.response.headers.get('X-Request-ID')).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/auth/me",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "me"]
            }
          }
        }
      ]
    },
    {
      "name": "2. Policy Management",
      "item": [
        {
          "name": "List Policies",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Policies have required fields\", function () {",
                  "    const response = pm.response.json();",
                  "    if (response.length > 0) {",
                  "        const policy = response[0];",
                  "        pm.expect(policy).to.have.property('id');",
                  "        pm.expect(policy).to.have.property('displayName');",
                  "        pm.expect(policy).to.have.property('policyType');",
                  "        pm.expect(policy).to.have.property('compliancePercentage');",
                  "        ",
                  "        // Save a policy ID for later tests",
                  "        pm.collectionVariables.set('policy_id', policy.id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/policies",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "policies"]
            }
          }
        },
        {
          "name": "Get Policy Details",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Policy details are complete\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('policy');",
                  "    pm.expect(response).to.have.property('resources');",
                  "    pm.expect(response).to.have.property('summary');",
                  "});",
                  "",
                  "pm.test(\"Resources array contains compliance data\", function () {",
                  "    const response = pm.response.json();",
                  "    if (response.resources.length > 0) {",
                  "        const resource = response.resources[0];",
                  "        pm.expect(resource).to.have.property('id');",
                  "        pm.expect(resource).to.have.property('name');",
                  "        pm.expect(resource).to.have.property('type');",
                  "        pm.expect(resource).to.have.property('complianceState');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/policies/{{policy_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "policies", "{{policy_id}}"]
            }
          }
        },
        {
          "name": "Search Policies",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Search returns filtered results\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/policies/search?query=security",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "policies", "search"],
              "query": [
                {
                  "key": "query",
                  "value": "security"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "3. Compliance Monitoring",
      "item": [
        {
          "name": "Get Compliance Summary",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Summary contains key metrics\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('overallCompliance');",
                  "    pm.expect(response).to.have.property('totalResources');",
                  "    pm.expect(response).to.have.property('compliantResources');",
                  "    pm.expect(response).to.have.property('nonCompliantResources');",
                  "    pm.expect(response).to.have.property('byCategory');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/compliance/summary",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "compliance", "summary"]
            }
          }
        },
        {
          "name": "Get Compliance Trends",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Trends data is properly formatted\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('daily');",
                  "    pm.expect(response).to.have.property('weekly');",
                  "    pm.expect(response).to.have.property('monthly');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/compliance/trends?days=30",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "compliance", "trends"],
              "query": [
                {
                  "key": "days",
                  "value": "30"
                }
              ]
            }
          }
        },
        {
          "name": "Get Non-Compliant Resources",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains resource list\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('resources');",
                  "    pm.expect(response).to.have.property('total');",
                  "    pm.expect(response).to.have.property('page');",
                  "    pm.expect(response).to.have.property('pageSize');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/compliance/resources/non-compliant?page=1&pageSize=10",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "compliance", "resources", "non-compliant"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "4. Conversation & AI",
      "item": [
        {
          "name": "Start Conversation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Conversation is created\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('title');",
                  "    pm.expect(response).to.have.property('created_at');",
                  "    ",
                  "    // Save conversation ID",
                  "    pm.collectionVariables.set('conversation_id', response.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Policy Compliance Discussion\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/conversations",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "conversations"]
            }
          }
        },
        {
          "name": "Send Message",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"AI response is received\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('content');",
                  "    pm.expect(response).to.have.property('role', 'assistant');",
                  "    pm.expect(response).to.have.property('timestamp');",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"What are my top compliance issues?\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/conversations/{{conversation_id}}/messages",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "conversations", "{{conversation_id}}", "messages"]
            }
          }
        },
        {
          "name": "Get Conversation History",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Messages are returned in order\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('messages');",
                  "    pm.expect(response.messages).to.be.an('array');",
                  "    pm.expect(response.messages.length).to.be.at.least(2);",
                  "});",
                  "",
                  "pm.test(\"Both user and assistant messages exist\", function () {",
                  "    const response = pm.response.json();",
                  "    const userMessages = response.messages.filter(m => m.role === 'user');",
                  "    const assistantMessages = response.messages.filter(m => m.role === 'assistant');",
                  "    pm.expect(userMessages.length).to.be.at.least(1);",
                  "    pm.expect(assistantMessages.length).to.be.at.least(1);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/conversations/{{conversation_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "conversations", "{{conversation_id}}"]
            }
          }
        }
      ]
    },
    {
      "name": "5. Recommendations & Insights",
      "item": [
        {
          "name": "Get AI Recommendations",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Recommendations are provided\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('recommendations');",
                  "    pm.expect(response.recommendations).to.be.an('array');",
                  "    ",
                  "    if (response.recommendations.length > 0) {",
                  "        const rec = response.recommendations[0];",
                  "        pm.expect(rec).to.have.property('id');",
                  "        pm.expect(rec).to.have.property('title');",
                  "        pm.expect(rec).to.have.property('description');",
                  "        pm.expect(rec).to.have.property('priority');",
                  "        pm.expect(rec).to.have.property('impact');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/ai/recommendations?type=compliance",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "ai", "recommendations"],
              "query": [
                {
                  "key": "type",
                  "value": "compliance"
                }
              ]
            }
          }
        },
        {
          "name": "Get Cost Optimization Insights",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Cost insights include savings potential\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('totalPotentialSavings');",
                  "    pm.expect(response).to.have.property('recommendations');",
                  "    pm.expect(response).to.have.property('currentMonthlySpend');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/insights/cost-optimization",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "insights", "cost-optimization"]
            }
          }
        }
      ]
    },
    {
      "name": "6. Integration Tests",
      "item": [
        {
          "name": "Full Compliance Workflow",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// This test verifies the complete compliance workflow",
                  "pm.test(\"Complete compliance workflow executes successfully\", function () {",
                  "    // Test will run a series of requests in sequence",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Verify data consistency across endpoints",
                  "pm.test(\"Data is consistent across different endpoints\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success', true);",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Set up test data for integration test",
                  "pm.variables.set('test_timestamp', new Date().toISOString());"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"action\": \"validate_compliance\",\n  \"scope\": \"full\",\n  \"timestamp\": \"{{test_timestamp}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/compliance/validate",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "compliance", "validate"]
            }
          }
        }
      ]
    },
    {
      "name": "7. Cleanup",
      "item": [
        {
          "name": "Delete Test Conversation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Cleanup successful\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/conversations/{{conversation_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "conversations", "{{conversation_id}}"]
            }
          }
        },
        {
          "name": "Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Logout successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Clear stored variables",
                  "pm.collectionVariables.set('access_token', '');",
                  "pm.collectionVariables.set('user_id', '');",
                  "pm.collectionVariables.set('conversation_id', '');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/auth/logout",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "logout"]
            }
          }
        }
      ]
    }
  ]
}